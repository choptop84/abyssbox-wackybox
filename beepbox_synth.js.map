{"version":3,"file":"beepbox_synth.js","sources":["../synth/SynthConfig.ts","../editor/EditorConfig.ts","../synth/FFT.ts","../synth/Deque.ts","../global/Events.ts","../synth/filtering.ts","../synth/synth.ts"],"sourcesContent":["/*!\nCopyright (c) 2012-2022 John Nesky and contributing authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to \nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \nof the Software, and to permit persons to whom the Software is furnished to do \nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \nSOFTWARE.\n*/\n\nexport interface Dictionary<T> {\n    [K: string]: T;\n}\n\n// @TODO: Not ideal to make this writable like this.\n// export interface DictionaryArray<T> extends ReadonlyArray<T> {\nexport interface DictionaryArray<T> extends Array<T> {\n    dictionary: Dictionary<T>;\n}\n\nexport const enum FilterType {\n    lowPass,\n    highPass,\n    peak,\n    length,\n}\n\nexport const enum SustainType {\n\tbright,\n\tacoustic,\n\tlength,\n}\n\nexport const enum EnvelopeType {\n\tnoteSize,\n    none,\n\tpunch,\n\tflare,\n\ttwang,\n\tswell,\n\ttremolo,\n\ttremolo2,\n    decay,\n    wibble,\n    hard,\n    linear,\n    rise,\n    blip\n}\n\nexport const enum InstrumentType {\n    chip,\n    fm,\n    noise,\n    spectrum,\n    drumset,\n    harmonics,\n    pwm,\n    pickedString,\n    supersaw,\n    customChipWave,\n    mod,\n\tfm6op,\n    length,\n}\n\nexport const TypePresets: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"pulse width\", \"picked string\", \"supersaw\", \"chip (custom)\", \"mod\", \"FM (6-op)\"];\n\nexport const enum DropdownID {\n    Vibrato = 0,\n    Pan = 1,\n    Chord = 2,\n    Transition = 3,\n    FM = 4,\n    PulseWidth = 5,\n    Unison = 6,\n    Envelope = 7,\n\n}\n\nexport const enum EffectType {\n    reverb,\n    chorus,\n    panning,\n    distortion,\n    bitcrusher,\n    noteFilter,\n    echo,\n    pitchShift,\n    detune,\n    vibrato,\n    transition,\n    chord,\n    // If you add more, you'll also have to extend the bitfield used in Base64 which currently uses two six-bit characters.\n    length,\n}\n\nexport const enum EnvelopeComputeIndex {\n    noteVolume,\n    noteFilterAllFreqs,\n    pulseWidth,\n    stringSustain,\n    unison,\n    operatorFrequency0, operatorFrequency1, operatorFrequency2, operatorFrequency3, operatorFrequency4, operatorFrequency5,\n    operatorAmplitude0, operatorAmplitude1, operatorAmplitude2, operatorAmplitude3, operatorAmplitude4, operatorAmplitude5,\n    feedbackAmplitude,\n    pitchShift,\n    detune,\n    vibratoDepth,\n    noteFilterFreq0, noteFilterFreq1, noteFilterFreq2, noteFilterFreq3, noteFilterFreq4, noteFilterFreq5, noteFilterFreq6, noteFilterFreq7,\n    noteFilterGain0, noteFilterGain1, noteFilterGain2, noteFilterGain3, noteFilterGain4, noteFilterGain5, noteFilterGain6, noteFilterGain7,\n    decimalOffset,\n    supersawDynamism,\n\tsupersawSpread,\n\tsupersawShape,\n    length,\n}\n\n/*\nexport const enum InstrumentAutomationIndex {\n    mixVolume,\n    eqFilterAllFreqs,\n    eqFilterFreq0, eqFilterFreq1, eqFilterFreq2, eqFilterFreq3, eqFilterFreq4, eqFilterFreq5, eqFilterFreq6, eqFilterFreq7,\n    eqFilterGain0, eqFilterGain1, eqFilterGain2, eqFilterGain3, eqFilterGain4, eqFilterGain5, eqFilterGain6, eqFilterGain7,\n    distortion,\n    bitcrusherQuantization,\n    bitcrusherFrequency,\n    panning,\n    chorus,\n    echoSustain,\n    //echoDelay, // Wait until tick settings can be computed once for multiple run lengths.\n    reverb,\n    length,\n}\n*/\n\nexport interface BeepBoxOption {\n    readonly index: number;\n    readonly name: string;\n}\n\nexport interface Scale extends BeepBoxOption {\n    readonly flags: ReadonlyArray<boolean>;\n    readonly realName: string;\n}\n\nexport interface Key extends BeepBoxOption {\n    readonly isWhiteKey: boolean;\n    readonly basePitch: number;\n}\n\nexport interface Rhythm extends BeepBoxOption {\n    readonly stepsPerBeat: number;\n    readonly roundUpThresholds: number[] | null;\n}\n\nexport interface ChipWave extends BeepBoxOption {\n    readonly expression: number;\n    samples: Float32Array;\n    isPercussion?: boolean;\n    isCustomSampled?: boolean;\n    isSampled?: boolean;\n    extraSampleDetune?: number;\n    rootKey?: number;\n    sampleRate?: number;\n}\n\nexport interface OperatorWave extends BeepBoxOption {\n    samples: Float32Array;\n}\n\nexport interface ChipNoise extends BeepBoxOption {\n    readonly expression: number;\n    readonly basePitch: number;\n    readonly pitchFilterMult: number;\n    readonly isSoft: boolean;\n    samples: Float32Array | null;\n}\n\nexport interface Transition extends BeepBoxOption {\n    readonly isSeamless: boolean;\n    readonly continues: boolean;\n    readonly slides: boolean;\n    readonly slideTicks: number;\n    readonly includeAdjacentPatterns: boolean;\n}\n\nexport interface Vibrato extends BeepBoxOption {\n    readonly amplitude: number;\n    readonly type: number;\n    readonly delayTicks: number;\n}\n\nexport interface VibratoType extends BeepBoxOption {\n    readonly periodsSeconds: number[];\n    readonly period: number;\n}\n\nexport interface Unison extends BeepBoxOption {\n    readonly voices: number;\n    readonly spread: number;\n    readonly offset: number;\n    readonly expression: number;\n    readonly sign: number;\n}\n\nexport interface Modulator extends BeepBoxOption {\n    readonly name: string; // name that shows up in song editor UI\n    readonly pianoName: string; // short name that shows up in mod piano UI\n    readonly maxRawVol: number; // raw\n    readonly newNoteVol: number; // raw\n    readonly forSong: boolean; // true - setting is song scope\n    convertRealFactor: number; // offset that needs to be applied to get a \"real\" number display of value, for UI purposes\n    readonly associatedEffect: EffectType; // effect that should be enabled for this modulator to work properly. If unused, set to EffectType.length.\n    readonly promptName: string; // long-as-needed name that shows up in tip prompt\n    readonly promptDesc: string[]; // paragraph(s) describing how to use this mod\n    optionalModify?: string; // optional modifications for the mods (eg. flipping all values)\n\n}\n\nexport interface Chord extends BeepBoxOption {\n    readonly customInterval: boolean;\n    readonly arpeggiates: boolean;\n    readonly strumParts: number;\n    readonly singleTone: boolean;\n}\n\nexport interface Algorithm extends BeepBoxOption {\n    readonly carrierCount: number;\n    readonly associatedCarrier: ReadonlyArray<number>;\n    readonly modulatedBy: ReadonlyArray<ReadonlyArray<number>>;\n}\n\nexport interface OperatorFrequency extends BeepBoxOption {\n    readonly mult: number;\n    readonly hzOffset: number;\n    readonly amplitudeSign: number;\n}\n\nexport interface Feedback extends BeepBoxOption {\n    readonly indices: ReadonlyArray<ReadonlyArray<number>>;\n}\n\nexport interface Envelope extends BeepBoxOption {\n    readonly type: EnvelopeType;\n    readonly speed: number;\n}\n\nexport interface AutomationTarget extends BeepBoxOption {\n    readonly computeIndex: EnvelopeComputeIndex /*| InstrumentAutomationIndex*/ | null;\n    readonly displayName: string;\n    //readonly perNote: boolean; // Whether to compute envelopes on a per-note basis.\n    readonly interleave: boolean; // Whether to interleave this target with the next one in the menu (e.g. filter frequency and gain).\n\treadonly isFilter: boolean; // Filters are special because the maxCount depends on other instrument settings.\n\t//readonly range: number | null; // set if automation is allowed.\n    readonly maxCount: number;\n    readonly effect: EffectType | null;\n    readonly compatibleInstruments: InstrumentType[] | null;\n}\n\nexport const enum SampleLoadingStatus {\n    loading,\n    loaded,\n    error,\n}\n\nexport function getSampleLoadingStatusName(status: SampleLoadingStatus): string {\n    switch (status) {\n\tcase SampleLoadingStatus.loading: return \"loading\";\n\tcase SampleLoadingStatus.loaded: return \"loaded\";\n\tcase SampleLoadingStatus.error: return \"error\";\n    }\n}\n\nexport class SampleLoadingState {\n    public statusTable: Dictionary<SampleLoadingStatus>;\n    public urlTable: Dictionary<string>;\n    public totalSamples: number;\n    public samplesLoaded: number;\n\n    constructor() {\n\tthis.statusTable = {};\n\tthis.urlTable = {};\n\tthis.totalSamples = 0;\n\tthis.samplesLoaded = 0;\n    }\n}\n\nexport const sampleLoadingState: SampleLoadingState = new SampleLoadingState();\n\nexport class SampleLoadedEvent extends Event {\n    public readonly totalSamples: number;\n    public readonly samplesLoaded: number;\n\n    constructor(totalSamples: number, samplesLoaded: number) {\n\tsuper(\"sampleloaded\");\n\tthis.totalSamples = totalSamples;\n\tthis.samplesLoaded = samplesLoaded;\n    }\n}\n\nexport interface SampleLoadEventMap {\n    \"sampleloaded\": SampleLoadedEvent;\n}\n\nexport class SampleLoadEvents extends EventTarget {\n    constructor() {\n\tsuper();\n    }\n}\n\nexport const sampleLoadEvents: SampleLoadEvents = new SampleLoadEvents();\n\nexport function startLoadingSample(url: string, chipWaveIndex: number, presetSettings: Dictionary<any>, rawLoopOptions: any, customSampleRate: number): void {\n    // @TODO: Make parts of the code that expect everything to already be\n    // in memory work correctly.\n    // It would be easy to only instantiate `SongEditor` and company after\n    // everything is loaded, but if dynamic sample loading without a reload\n    // is deemed necessary, anything that involves chip waves has to be\n    // revisited so as to be able to work with a changing list of chip\n    // waves that may or may not be ready to be used.\n    const sampleLoaderAudioContext = new AudioContext({ sampleRate: customSampleRate });\n    let closedSampleLoaderAudioContext: boolean = false;\n    const chipWave = Config.chipWaves[chipWaveIndex];\n    const rawChipWave = Config.rawChipWaves[chipWaveIndex];\n    const rawRawChipWave = Config.rawRawChipWaves[chipWaveIndex];\n    fetch(url).then((response) => {\n\tif (!response.ok) {\n\t    // @TODO: Be specific with the error handling.\n\t    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.error;\n\t    return Promise.reject(new Error(\"Couldn't load sample\"));\n\t}\n\treturn response.arrayBuffer();\n    }).then((arrayBuffer) => {\n\treturn sampleLoaderAudioContext.decodeAudioData(arrayBuffer);\n    }).then((audioBuffer) => {\n\t// @TODO: Downmix.\n\tconst samples = centerWave(Array.from(audioBuffer.getChannelData(0)));\n\tconst integratedSamples = performIntegral(samples);\n\tchipWave.samples = integratedSamples;\n\trawChipWave.samples = samples;\n\trawRawChipWave.samples = samples;\n\tif (rawLoopOptions[\"isUsingAdvancedLoopControls\"]) {\n\t    presetSettings[\"chipWaveLoopStart\"] = rawLoopOptions[\"chipWaveLoopStart\"] != null ? rawLoopOptions[\"chipWaveLoopStart\"] : 0;\n\t    presetSettings[\"chipWaveLoopEnd\"] = rawLoopOptions[\"chipWaveLoopEnd\"] != null ? rawLoopOptions[\"chipWaveLoopEnd\"] : samples.length - 1;\n\t    presetSettings[\"chipWaveLoopMode\"] = rawLoopOptions[\"chipWaveLoopMode\"] != null ? rawLoopOptions[\"chipWaveLoopMode\"] : 0;\n\t    presetSettings[\"chipWavePlayBackwards\"] = rawLoopOptions[\"chipWavePlayBackwards\"];\n\t    presetSettings[\"chipWaveStartOffset\"] = rawLoopOptions[\"chipWaveStartOffset\"] != null ? rawLoopOptions[\"chipWaveStartOffset\"] : 0;\n\t}\n\tsampleLoadingState.samplesLoaded++;\n\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\n\tsampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n\t    sampleLoadingState.totalSamples,\n\t    sampleLoadingState.samplesLoaded\n\t));\n\tif (!closedSampleLoaderAudioContext) {\n\t    closedSampleLoaderAudioContext = true;\n\t    sampleLoaderAudioContext.close();\n\t}\n    }).catch((error) => {\n\t//console.error(error);\n\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.error;\n\talert(\"Failed to load \" + url + \":\\n\" + error);\n\tif (!closedSampleLoaderAudioContext) {\n\t    closedSampleLoaderAudioContext = true;\n\t    sampleLoaderAudioContext.close();\n\t}\n    });\n}\n\nexport function getLocalStorageItem<T>(key: string, defaultValue: T): T | string {\n    let value: T | string | null = localStorage.getItem(key);\n    if (value == null || value === \"null\" || value === \"undefined\") {\n        value = defaultValue;\n    }\n    return value;\n}\n\n// @HACK: This just assumes these exist, regardless of whether they actually do\n// or not.\ndeclare global {\n    const kicksample: number[];\n    const snaresample: number[];\n    const pianosample: number[];\n    const WOWsample: number[];\n    const overdrivesample: number[];\n    const trumpetsample: number[];\n    const saxophonesample: number[];\n    const orchhitsample: number[];\n    const detatchedviolinsample: number[];\n    const synthsample: number[];\n    const sonic3snaresample: number[];\n    const comeonsample: number[];\n    const choirsample: number[];\n    const overdrivensample: number[];\n    const flutesample: number[];\n    const legatoviolinsample: number[];\n    const tremoloviolinsample: number[];\n    const amenbreaksample: number[];\n    const pizzicatoviolinsample: number[];\n    const timallengruntsample: number[];\n    const tubasample: number[];\n    const loopingcymbalsample: number[];\n    const kickdrumsample: number[];\n    const snaredrumsample: number[];\n    const closedhihatsample: number[];\n    const foothihatsample: number[];\n    const openhihatsample: number[];\n    const crashsample: number[];\n    const pianoC4sample: number[];\n    const liverpadsample: number[];\n    const marimbasample: number[];\n    const susdotwavsample: number[];\n    const wackyboxttssample: number[];\n    const peppersteak1: number[];\n    const peppersteak2: number[];\n    const vinyl: number[];\n    const slapbass: number[];\n    const hdeboverdrive: number[];\n    const sunsoftbass: number[];\n    const masculinechoir: number[];\n    const femininechoir: number[];\n    const southtololoche: number[];\n    const harp: number[];\n    const panflute: number[];\n    const krumhorn: number[];\n    const timpani: number[];\n    const crowdhey: number[];\n    const warioland4brass: number[];\n    const warioland4organ: number[];\n    const warioland4daow: number[];\n    const warioland4hourchime: number[];\n    const warioland4tick: number[];\n    const kirbykick: number[];\n    const kirbysnare: number[];\n    const kirbybongo: number[];\n    const kirbyclick: number[];\n    const funkkick: number[];\n    const funksnare: number[];\n    const funksnareleft: number[];\n    const funksnareright: number[];\n    const funktomhigh: number[];\n    const funktomlow: number[];\n    const funkhihatclosed: number[];\n    const funkhihathalfopen: number[];\n    const funkhihatopen: number[];\n    const funkhihatopentip: number[];\n    const funkhihatfoot: number[];\n    const funkcrash: number[];\n    const funkcrashtip: number[];\n    const funkride: number[];\n    const chronoperc1finalsample: number[];\n    const synthkickfmsample: number[];\n    const woodclicksample: number[];\n    const acousticsnaresample: number[];\n    const catpaintboxsample: number[];\n    const gameboypaintboxsample: number[];\n    const mariopaintboxsample: number[];\n    const drumpaintboxsample: number[];\n    const yoshipaintboxsample: number[];\n    const starpaintboxsample: number[];\n    const fireflowerpaintboxsample: number[];\n    const dogpaintbox: number[];\n    const oinkpaintbox: number[];\n    const swanpaintboxsample: number[];\n    const facepaintboxsample: number[];\n}\n\nfunction loadScript(url: string): Promise<void> {\n    const result: Promise<void> = new Promise((resolve, reject) => {\n\tif (!Config.willReloadForCustomSamples) {\n\t    const script = document.createElement(\"script\");\n\t    script.src = url;\n\t    document.head.appendChild(script);\n\t    script.addEventListener(\"load\", (event) => {\n\t\tresolve();\n\t    });\n\t} else {\n\t    // There's not really any errors that show up if the loading for\n\t    // this script is stopped early, but it won't really do anything\n\t    // particularly useful either in that case.\n\t}\n    });\n    return result;\n}\n\nexport function loadBuiltInSamples(set: number): void {\n    const defaultIndex: number = 0;\n    const defaultIntegratedSamples: Float32Array = Config.chipWaves[defaultIndex].samples;\n    const defaultSamples: Float32Array = Config.rawRawChipWaves[defaultIndex].samples;\n\n    if (set == 0) {\n\t// Create chip waves with the wrong sound.\n\tconst chipWaves = [\n\t    { name: \"paandorasbox kick\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n\t    { name: \"paandorasbox snare\", expression: 3.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n\t    { name: \"paandorasbox piano1\", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 2 },\n\t    { name: \"paandorasbox WOW\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n\t    { name: \"paandorasbox overdrive\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -2 },\n\t    { name: \"paandorasbox trumpet\", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 1.2 },\n\t    { name: \"paandorasbox saxophone\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -5 },\n\t    { name: \"paandorasbox orchestrahit\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },\n\t    { name: \"paandorasbox detatched violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },\n\t    { name: \"paandorasbox synth\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -0.8 },\n\t    { name: \"paandorasbox sonic3snare\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n\t    { name: \"paandorasbox come on\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n\t    { name: \"paandorasbox choir\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -3 },\n\t    { name: \"paandorasbox overdriveguitar\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6.2 },\n\t    { name: \"paandorasbox flute\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6 },\n\t    { name: \"paandorasbox legato violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -28 },\n\t    { name: \"paandorasbox tremolo violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -33 },\n\t    { name: \"paandorasbox amen break\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -55 },\n\t    { name: \"paandorasbox pizzicato violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -11 },\n\t    { name: \"paandorasbox tim allen grunt\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -20 },\n\t    { name: \"paandorasbox tuba\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 44 },\n\t    { name: \"paandorasbox loopingcymbal\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17 },\n\t    { name: \"paandorasbox standardkick\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -7 },\n\t    { name: \"paandorasbox standardsnare\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n\t    { name: \"paandorasbox closedhihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 5 },\n\t    { name: \"paandorasbox foothihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 4 },\n\t    { name: \"paandorasbox openhihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -31 },\n\t    { name: \"paandorasbox crashcymbal\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -43 },\n\t    { name: \"paandorasbox pianoC4\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.5 },\n\t    { name: \"paandorasbox liver pad\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -22.5 },\n\t    { name: \"paandorasbox marimba\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -15.5 },\n\t    { name: \"paandorasbox susdotwav\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -24.5 },\n\t    { name: \"paandorasbox wackyboxtts\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17.5 },\n\t    { name: \"paandorasbox peppersteak_1\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.2 },\n\t    { name: \"paandorasbox peppersteak_2\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -47 },\n\t    { name: \"paandorasbox vinyl_noise\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -50 },\n\t    { name: \"paandorasbeta slap bass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -56 },\n\t    { name: \"paandorasbeta HD EB overdrive guitar\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60 },\n\t    { name: \"paandorasbeta sunsoft bass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -18.5 },\n\t    { name: \"paandorasbeta masculine choir\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },\n\t    { name: \"paandorasbeta feminine choir\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60.5 },\n\t    { name: \"paandorasbeta tololoche\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -29.5 },\n\t    { name: \"paandorasbeta harp\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -54 },\n\t    { name: \"paandorasbeta pan flute\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -58 },\n\t    { name: \"paandorasbeta krumhorn\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -46 },\n\t    { name: \"paandorasbeta timpani\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },\n\t    { name: \"paandorasbeta crowd hey\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -29 },\n\t    { name: \"paandorasbeta wario land 4 brass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -68 },\n\t    { name: \"paandorasbeta wario land 4 rock organ\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -63 },\n\t    { name: \"paandorasbeta wario land 4 DAOW\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -35 },\n\t    { name: \"paandorasbeta wario land 4 hour chime\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -47.5 },\n\t    { name: \"paandorasbeta wario land 4 tick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -12.5 },\n\t    { name: \"paandorasbeta kirby kick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n\t    { name: \"paandorasbeta kirby snare\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n\t    { name: \"paandorasbeta kirby bongo\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n\t    { name: \"paandorasbeta kirby click\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n\t    { name: \"paandorasbeta sonor kick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },\n\t    { name: \"paandorasbeta sonor snare\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },\n\t    { name: \"paandorasbeta sonor snare (left hand)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },\n\t    { name: \"paandorasbeta sonor snare (right hand)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },\n\t    { name: \"paandorasbeta sonor high tom\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },\n\t    { name: \"paandorasbeta sonor low tom\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },\n\t    { name: \"paandorasbeta sonor hihat (closed)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -17 },\n\t    { name: \"paandorasbeta sonor hihat (half opened)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -21 },\n\t    { name: \"paandorasbeta sonor hihat (open)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -54.5 },\n\t    { name: \"paandorasbeta sonor hihat (open tip)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -43.5 },\n\t    { name: \"paandorasbeta sonor hihat (pedal)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28 },\n\t    { name: \"paandorasbeta sonor crash\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -51 },\n\t    { name: \"paandorasbeta sonor crash (tip)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -50.5 },\n\t    { name: \"paandorasbeta sonor ride\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46 }\n\t];\n\n\tsampleLoadingState.totalSamples += chipWaves.length;\n\n\t// This assumes that Config.rawRawChipWaves and Config.chipWaves have\n\t// the same number of elements.\n\tconst startIndex: number = Config.rawRawChipWaves.length;\n\tfor (const chipWave of chipWaves) {\n\t    const chipWaveIndex: number = Config.rawRawChipWaves.length;\n\t    const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n\t    const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n\t    const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n\t    Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n\t    Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n\t    Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n\t    Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n\t    Config.chipWaves[chipWaveIndex] = integratedChipWave;\n\t    Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n\t    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\n\t    sampleLoadingState.urlTable[chipWaveIndex] = \"legacySamples\";\n\t}\n\n\tloadScript(\"samples.js\")\n\t.then(() => loadScript(\"samples2.js\"))\n\t.then(() => loadScript(\"samples3.js\"))\n\t.then(() => loadScript(\"drumsamples.js\"))\n\t.then(() => loadScript(\"wario_samples.js\"))\n\t.then(() => loadScript(\"kirby_samples.js\"))\n\t.then(() => {\n\t    // Now put the right sounds in there after everything\n\t    // got loaded.\n\t    const chipWaveSamples: Float32Array[] = [\n\t\tcenterWave(kicksample),\n\t\tcenterWave(snaresample),\n\t\tcenterWave(pianosample),\n\t\tcenterWave(WOWsample),\n\t\tcenterWave(overdrivesample),\n\t\tcenterWave(trumpetsample),\n\t\tcenterWave(saxophonesample),\n\t\tcenterWave(orchhitsample),\n\t\tcenterWave(detatchedviolinsample),\n\t\tcenterWave(synthsample),\n\t\tcenterWave(sonic3snaresample),\n\t\tcenterWave(comeonsample),\n\t\tcenterWave(choirsample),\n\t\tcenterWave(overdrivensample),\n\t\tcenterWave(flutesample),\n\t\tcenterWave(legatoviolinsample),\n\t\tcenterWave(tremoloviolinsample),\n\t\tcenterWave(amenbreaksample),\n\t\tcenterWave(pizzicatoviolinsample),\n\t\tcenterWave(timallengruntsample),\n\t\tcenterWave(tubasample),\n\t\tcenterWave(loopingcymbalsample),\n\t\tcenterWave(kickdrumsample),\n\t\tcenterWave(snaredrumsample),\n\t\tcenterWave(closedhihatsample),\n\t\tcenterWave(foothihatsample),\n\t\tcenterWave(openhihatsample),\n\t\tcenterWave(crashsample),\n\t\tcenterWave(pianoC4sample),\n\t\tcenterWave(liverpadsample),\n\t\tcenterWave(marimbasample),\n\t\tcenterWave(susdotwavsample),\n\t\tcenterWave(wackyboxttssample),\n\t\tcenterWave(peppersteak1),\n\t\tcenterWave(peppersteak2),\n\t\tcenterWave(vinyl),\n\t\tcenterWave(slapbass),\n\t\tcenterWave(hdeboverdrive),\n\t\tcenterWave(sunsoftbass),\n\t\tcenterWave(masculinechoir),\n\t\tcenterWave(femininechoir),\n\t\tcenterWave(southtololoche),\n\t\tcenterWave(harp),\n\t\tcenterWave(panflute),\n\t\tcenterWave(krumhorn),\n\t\tcenterWave(timpani),\n\t\tcenterWave(crowdhey),\n\t\tcenterWave(warioland4brass),\n\t\tcenterWave(warioland4organ),\n\t\tcenterWave(warioland4daow),\n\t\tcenterWave(warioland4hourchime),\n\t\tcenterWave(warioland4tick),\n\t\tcenterWave(kirbykick),\n\t\tcenterWave(kirbysnare),\n\t\tcenterWave(kirbybongo),\n\t\tcenterWave(kirbyclick),\n\t\tcenterWave(funkkick),\n\t\tcenterWave(funksnare),\n\t\tcenterWave(funksnareleft),\n\t\tcenterWave(funksnareright),\n\t\tcenterWave(funktomhigh),\n\t\tcenterWave(funktomlow),\n\t\tcenterWave(funkhihatclosed),\n\t\tcenterWave(funkhihathalfopen),\n\t\tcenterWave(funkhihatopen),\n\t\tcenterWave(funkhihatopentip),\n\t\tcenterWave(funkhihatfoot),\n\t\tcenterWave(funkcrash),\n\t\tcenterWave(funkcrashtip),\n\t\tcenterWave(funkride)\n\t    ];\n\t    let chipWaveIndexOffset: number = 0;\n\t    for (const chipWaveSample of chipWaveSamples) {\n\t\tconst chipWaveIndex: number = startIndex + chipWaveIndexOffset;\n\t\tConfig.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n\t\tConfig.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n\t\tConfig.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n\t\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\n\t\tsampleLoadingState.samplesLoaded++;\n\t\tsampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n\t\t    sampleLoadingState.totalSamples,\n\t\t    sampleLoadingState.samplesLoaded\n\t\t));\n\t\tchipWaveIndexOffset++;\n\t    }\n\t});\n\t//EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {name: \"Legacy Sample Presets\", presets:  { name: \"Earthbound O. Guitar\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"paandorasbox overdrive\", \"unison\": \"none\", \"envelopes\": [] } }, index: EditorConfig.presetCategories.length,};\n    }\n    else if (set == 1) {\n\t// Create chip waves with the wrong sound.\n\tconst chipWaves = [\n\t    { name: \"chronoperc1final\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n\t    { name: \"synthkickfm\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n\t    { name: \"mcwoodclick1\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n\t    { name: \"acoustic snare\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 }\n\t];\n\n\tsampleLoadingState.totalSamples += chipWaves.length;\n\n\t// This assumes that Config.rawRawChipWaves and Config.chipWaves have\n\t// the same number of elements.\n\tconst startIndex: number = Config.rawRawChipWaves.length;\n\tfor (const chipWave of chipWaves) {\n\t    const chipWaveIndex: number = Config.rawRawChipWaves.length;\n\t    const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n\t    const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n\t    const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n\t    Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n\t    Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n\t    Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n\t    Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n\t    Config.chipWaves[chipWaveIndex] = integratedChipWave;\n\t    Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n\t    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\n\t    sampleLoadingState.urlTable[chipWaveIndex] = \"nintariboxSamples\";\n\t}\n\n\tloadScript(\"nintaribox_samples.js\")\n\t.then(() => {\n\t    // Now put the right sounds in there after everything\n\t    // got loaded.\n\t    const chipWaveSamples: Float32Array[] = [\n\t\tcenterWave(chronoperc1finalsample),\n\t\tcenterWave(synthkickfmsample),\n\t\tcenterWave(woodclicksample),\n\t\tcenterWave(acousticsnaresample)\n\t    ];\n\t    let chipWaveIndexOffset: number = 0;\n\t    for (const chipWaveSample of chipWaveSamples) {\n\t\tconst chipWaveIndex: number = startIndex + chipWaveIndexOffset;\n\t\tConfig.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n\t\tConfig.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n\t\tConfig.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n\t\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\n\t\tsampleLoadingState.samplesLoaded++;\n\t\tsampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n\t\t    sampleLoadingState.totalSamples,\n\t\t    sampleLoadingState.samplesLoaded\n\t\t));\n\t\tchipWaveIndexOffset++;\n\t    }\n\t});\n    }\n    else if (set == 2) {\n\t// Create chip waves with the wrong sound.\n\tconst chipWaves = [\n\t    { name: \"cat\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -3 },\n\t    { name: \"gameboy\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 7 },\n\t    { name: \"mario\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n\t    { name: \"drum\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 4 },\n\t    { name: \"yoshi\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },\n\t    { name: \"star\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },\n\t    { name: \"fire flower\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },\n\t    { name: \"dog\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },\n\t    { name: \"oink\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 3 },\n\t    { name: \"swan\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 1 },\n\t    { name: \"face\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -12 }\n\t];\n\n\tsampleLoadingState.totalSamples += chipWaves.length;\n\n\t// This assumes that Config.rawRawChipWaves and Config.chipWaves have\n\t// the same number of elements.\n\tconst startIndex: number = Config.rawRawChipWaves.length;\n\tfor (const chipWave of chipWaves) {\n\t    const chipWaveIndex: number = Config.rawRawChipWaves.length;\n\t    const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n\t    const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n\t    const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n\t    Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n\t    Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n\t    Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n\t    Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n\t    Config.chipWaves[chipWaveIndex] = integratedChipWave;\n\t    Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n\t    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\n\t    sampleLoadingState.urlTable[chipWaveIndex] = \"marioPaintboxSamples\";\n\t}\n\n\tloadScript(\"mario_paintbox_samples.js\")\n\t.then(() => {\n\t    // Now put the right sounds in there after everything\n\t    // got loaded.\n\t    const chipWaveSamples: Float32Array[] = [\n\t\tcenterWave(catpaintboxsample),\n\t\tcenterWave(gameboypaintboxsample),\n\t\tcenterWave(mariopaintboxsample),\n\t\tcenterWave(drumpaintboxsample),\n\t\tcenterWave(yoshipaintboxsample),\n\t\tcenterWave(starpaintboxsample),\n\t\tcenterWave(fireflowerpaintboxsample),\n\t\tcenterWave(dogpaintbox),\n\t\tcenterWave(oinkpaintbox),\n\t\tcenterWave(swanpaintboxsample),\n\t\tcenterWave(facepaintboxsample)\n\t    ];\n\t    let chipWaveIndexOffset: number = 0;\n\t    for (const chipWaveSample of chipWaveSamples) {\n\t\tconst chipWaveIndex: number = startIndex + chipWaveIndexOffset;\n\t\tConfig.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n\t\tConfig.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n\t\tConfig.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n\t\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\n\t\tsampleLoadingState.samplesLoaded++;\n\t\tsampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n\t\t    sampleLoadingState.totalSamples,\n\t\t    sampleLoadingState.samplesLoaded\n\t\t));\n\t\tchipWaveIndexOffset++;\n\t    }\n\t});\n    }\n    else {\n        console.log(\"invalid set of built-in samples\");\n    }\n}\n\nexport class Config {\n    // Params for post-processing compressor\n    public static thresholdVal: number = -10;\n    public static kneeVal: number = 40;\n    public static ratioVal: number = 12;\n    public static attackVal: number = 0;\n    public static releaseVal: number = 0.25;\n\n    public static willReloadForCustomSamples: boolean = false;\n\n    public static readonly scales: DictionaryArray<Scale> = toNameMap([\n\n\t\t//   C     Db      D     Eb      E      F     F#      G     Ab      A     Bb      B      C\n\t\t{ name: \"Free\", realName: \"chromatic\", flags: [true, true, true, true, true, true, true, true, true, true, true, true] }, // Free\n        { name: \"Major\", realName: \"ionian\", flags: [true, false, true, false, true, true, false, true, false, true, false, true] }, // Major\n        { name: \"Minor\", realName: \"aeolian\", flags: [true, false, true, true, false, true, false, true, true, false, true, false] }, // Minor\n        { name: \"Mixolydian\", realName: \"mixolydian\", flags: [true, false, true, false, true, true, false, true, false, true, true, false] }, // Mixolydian\n        { name: \"Lydian\", realName: \"lydian\", flags: [true, false, true, false, true, false, true, true, false, true, false, true] }, // Lydian\n        { name: \"Dorian\", realName: \"dorian\", flags: [true, false, true, true, false, true, false, true, false, true, true, false] }, // Dorian\n        { name: \"Phrygian\", realName: \"phrygian\", flags: [true, true, false, true, false, true, false, true, true, false, true, false] }, // Phrygian\n        { name: \"Locrian\", realName: \"locrian\", flags: [true, true, false, true, false, true, true, false, true, false, true, false] }, // Locrian\n        { name: \"Lydian Dominant\", realName: \"lydian dominant\", flags: [true, false, true, false, true, false, true, true, false, true, true, false] }, // Lydian Dominant\n        { name: \"Phrygian Dominant\", realName: \"phrygian dominant\", flags: [true, true, false, false, true, true, false, true, true, false, true, false] }, // Phrygian Dominant\n        { name: \"Harmonic Major\", realName: \"harmonic major\", flags: [true, false, true, false, true, true, false, true, true, false, false, true] }, // Harmonic Major\n        { name: \"Harmonic Minor\", realName: \"harmonic minor\", flags: [true, false, true, true, false, true, false, true, true, false, false, true] }, // Harmonic Minor\n        { name: \"Melodic Minor\", realName: \"melodic minor\", flags: [true, false, true, true, false, true, false, true, false, true, false, true] }, // Melodic Minor\n        { name: \"Blues\", realName: \"blues\", flags: [true, false, false, true, false, true, true, true, false, false, true, false] }, // Blues\n        { name: \"Altered\", realName: \"altered\", flags: [true, true, false, true, true, false, true, false, true, false, true, false] }, // Altered\n        { name: \"Major Pentatonic\", realName: \"major pentatonic\", flags: [true, false, true, false, true, false, false, true, false, true, false, false] }, // Major Pentatonic\n        { name: \"Minor Pentatonic\", realName: \"minor pentatonic\", flags: [true, false, false, true, false, true, false, true, false, false, true, false] }, // Minor Pentatonic\n        { name: \"Whole Tone\", realName: \"whole tone\", flags: [true, false, true, false, true, false, true, false, true, false, true, false] }, // Whole Tone\n        { name: \"Octatonic\", realName: \"octatonic\", flags: [true, false, true, true, false, true, true, false, true, true, false, true] }, // Octatonic\n        { name: \"Hexatonic\", realName: \"hexatonic\", flags: [true, false, false, true, true, false, false, true, true, false, false, true] }, // Hexatonic\n        { name: \"No Dabbing\", realName: \"no dabbing\", flags:[true, true, false, true, true, true, true, true, true, false, true, false] },\n\t//modbox\n\t{ name: \"Jacked Toad\", realName: \"jacked toad\", flags: [true, false, true, true, false, true, true, true, true, false, true, true] },\n\t{ name: \"Dumb\", realName: \"Originally named, currently named, and will always be named 'dumb.'\", flags: [true, false, false, false, false, true, true, true, true, false, false, true] },\n        { name: \"Test Scale\", realName: \"**t\", flags: [true, true, false, false, false, true, true, false, false, true, true, false] },\n\t// todbox\n\t{ name: \"die\", realName: \"death\", flags: [true, false, false, false, false, false, false, false, true, false, false, false] },\n\t//wackybox\n        // { name: \"Rythmic\", realName: \"Pretty straightforward.\", flags: [true, false, false, false, false, false, false, false, false, false, false, false] },\n        //todbox\n\t{ name: \"Custom\", realName: \"custom\", flags: [true, false, true, true, false, false, false, true, true, false, true, true] }, // Custom? considering allowing this one to be be completely configurable\n\t]);\n\tpublic static readonly keys: DictionaryArray<Key> = toNameMap([\n\t\t{ name: \"C\", isWhiteKey: true, basePitch: 12 }, // C0 has index 12 on the MIDI scale. C7 is 96, and C9 is 120. C10 is barely in the audible range.\n\t\t{ name: \"C♯\", isWhiteKey: false, basePitch: 13 },\n\t\t{ name: \"D\", isWhiteKey: true, basePitch: 14 },\n\t\t{ name: \"D♯\", isWhiteKey: false, basePitch: 15 },\n\t\t{ name: \"E\", isWhiteKey: true, basePitch: 16 },\n\t\t{ name: \"F\", isWhiteKey: true, basePitch: 17 },\n\t\t{ name: \"F♯\", isWhiteKey: false, basePitch: 18 },\n\t\t{ name: \"G\", isWhiteKey: true, basePitch: 19 },\n\t\t{ name: \"G♯\", isWhiteKey: false, basePitch: 20 },\n\t\t{ name: \"A\", isWhiteKey: true, basePitch: 21 },\n\t\t{ name: \"A♯\", isWhiteKey: false, basePitch: 22 },\n        { name: \"B\", isWhiteKey: true, basePitch: 23 },\n\t\t\t\t// { name: \"C+\", isWhiteKey: false, basePitch: 24 },\n\t\t//taken from todbox, called \"B#\" for some reason lol\n\t\t// { name: \"G- (actually F#-)\", isWhiteKey: false, basePitch: 6 },\n        // { name: \"C-\", isWhiteKey: true, basePitch: 0 },\n\t    //brucebox\n\t\t//g- isn't actually g-???\n\t\t// { name: \"oh no (F-)\", isWhiteKey: true, basePitch: 5 },\n\t\t//shitbox\n\t]);\n\tpublic static readonly blackKeyNameParents: ReadonlyArray<number> = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];\n\tpublic static readonly tempoMin: number = 1;\n\tpublic static readonly tempoMax: number = 500;\n\tpublic static readonly octaveMin: number = -2;\n\tpublic static readonly octaveMax: number = 2;\n    public static readonly echoDelayRange: number = 24;\n    public static readonly echoDelayStepTicks: number = 4;\n    public static readonly echoSustainRange: number = 8;\n    public static readonly echoShelfHz: number = 4000.0; // The cutoff freq of the shelf filter that is used to decay echoes.\n    public static readonly echoShelfGain: number = Math.pow(2.0, -0.5);\n    public static readonly reverbShelfHz: number = 8000.0; // The cutoff freq of the shelf filter that is used to decay reverb.\n    public static readonly reverbShelfGain: number = Math.pow(2.0, -1.5);\n\tpublic static readonly reverbRange: number = 32;\n    public static readonly reverbDelayBufferSize: number = 16384; // TODO: Compute a buffer size based on sample rate.\n    public static readonly reverbDelayBufferMask: number = Config.reverbDelayBufferSize - 1; // TODO: Compute a buffer size based on sample rate.\n    public static readonly beatsPerBarMin: number = 1;\n\tpublic static readonly beatsPerBarMax: number = 64;\n\tpublic static readonly barCountMin: number = 1;\n\tpublic static readonly barCountMax: number = 1024;\n    public static readonly instrumentCountMin: number = 1;\n    public static readonly layeredInstrumentCountMax: number = 10;\n\t//this still hasn't been properly tested...\n    public static readonly patternInstrumentCountMax: number = 10;\n\tpublic static readonly partsPerBeat: number = 24;\n\tpublic static readonly ticksPerPart: number = 2;\n\tpublic static readonly ticksPerArpeggio: number = 3;\n\tpublic static readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7] ];\n\tpublic static readonly rhythms: DictionaryArray<Rhythm> = toNameMap([\n\t\t{ name: \"÷1 (whole notes)\", stepsPerBeat: 1, /*ticksPerArpeggio: 6, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1]],*/ roundUpThresholds: [3] },\n\t\t{ name: \"÷2 (half notes)\", stepsPerBeat: 2, /*ticksPerArpeggio: 5, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1]],*/ roundUpThresholds: [3, 9] },\n\t\t{ name: \"÷3 (triplets)\", stepsPerBeat: 3, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\n\t\t{ name: \"÷4 (standard)\", stepsPerBeat: 4, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 3, /*6*/ 9, /*12*/ 17, /*18*/ 21 /*24*/] },\n\t\t{ name: \"÷6 (sextuplets)\", stepsPerBeat: 6, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\n\t\t{ name: \"÷8 (eighth notes)\", stepsPerBeat: 8, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\n\t\t{ name: \"÷12 (twelfth notes)\", stepsPerBeat: 12, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1]]*/ roundUpThresholds: null },\n\t\t{ name: \"freehand\", stepsPerBeat: 24, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\n\t]);\n\n    public static readonly instrumentTypeNames: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"Picked String\", \"supersaw\", \"custom chip\", \"mod\", \"FM6op\"];\n\tpublic static readonly instrumentTypeHasSpecialInterval: ReadonlyArray<boolean> = [true, true, false, false, false, true, false, false, false, false, false];\n    public static readonly chipBaseExpression: number = 0.03375; // Doubled by unison feature, but affected by expression adjustments per unison setting and wave shape.\n    public static readonly fmBaseExpression: number = 0.03;\n    public static readonly noiseBaseExpression: number = 0.19;\n    public static readonly spectrumBaseExpression: number = 0.3; // Spectrum can be in pitch or noise channels, the expression is doubled for noise.\n    public static readonly drumsetBaseExpression: number = 0.45; // Drums tend to be loud but brief!\n    public static readonly harmonicsBaseExpression: number = 0.025;\n    public static readonly pwmBaseExpression: number = 0.04725; // It's actually closer to half of this, the synthesized pulse amplitude range is only .5 to -.5, but also note that the fundamental sine partial amplitude of a square wave is 4/π times the measured square wave amplitude.\n    public static readonly supersawBaseExpression:  number = 0.061425; // It's actually closer to half of this, the synthesized sawtooth amplitude range is only .5 to -.5.\n    public static readonly pickedStringBaseExpression: number = 0.025; // Same as harmonics.\n    public static readonly distortionBaseVolume: number = 0.011; // Distortion is not affected by pitchDamping, which otherwise approximately halves expression for notes around the middle of the range.\n    public static readonly bitcrusherBaseVolume: number = 0.010; // Also not affected by pitchDamping, used when bit crushing is maxed out (aka \"1-bit\" output).\n\tpublic static rawChipWaves: DictionaryArray<ChipWave> = toNameMap([\n        { name: \"rounded\", expression: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },\n        { name: \"triangle\", expression: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },\n        { name: \"square\", expression: 0.5, samples: centerWave([1.0, -1.0]) },\n        { name: \"1/4 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },\n        { name: \"1/8 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n        { name: \"sawtooth\", expression: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\n        { name: \"double saw\", expression: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\n        { name: \"double pulse\", expression: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\n        { name: \"spiky\", expression: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },\n        { name: \"sine\", expression: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },\n        { name: \"flute\", expression: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },\n        { name: \"harp\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },\n        { name: \"sharp clarinet\", expression: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },\n        { name: \"soft clarinet\", expression: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\n        { name: \"alto sax\", expression: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },\n        { name: \"bassoon\", expression: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },\n        { name: \"trumpet\", expression: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },\n        { name: \"electric guitar\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },\n        { name: \"organ\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },\n        { name: \"pan flute\", expression: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },\n        { name: \"glitch\", expression: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },\n        { name: \"trapezoid\", expression: 1.0, samples: centerWave([1.0 / 15.0, 6.0 / 15.0, 10.0 / 15.0, 14.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 14.0 / 15.0, 10.0 / 15.0, 6.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -6.0 / 15.0, -10.0 / 15.0, -14.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -14.0 / 15.0, -10.0 / 15.0, -6.0 / 15.0, -1.0 / 15.0,])},\n   \t//normal\n{ name: \"modbox 10% pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n\t{ name: \"modbox sunsoft bass\", expression: 1.0, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, 1.0, 0.6875, 0.5, 0.625, 0.625, 0.5, 0.375, 0.5625, 0.4375, 0.5625, 0.4375, 0.4375, 0.3125, 0.1875, 0.1875, 0.375, 0.5625, 0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },\n\t{ name: \"modbox loud pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.7, 0.1, 0.1, 0, 0, 0, 0, 0, 0.1, 0.2, 0.15, 0.25, 0.125, 0.215, 0.345, 4.0]) },\n\t   { name: \"modbox sax\", expression: 0.5, samples: centerAndNormalizeWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 9.0, 0.06]) },\n\t    { name: \"modbox guitar\", expression: 0.5, samples: centerAndNormalizeWave([-0.5, 3.5, 3.0, -0.5, -0.25, -1.0]) },\n\t  { name: \"modbox sine\", expression: 0.5, samples: centerAndNormalizeWave([0.0, 0.05, 0.125, 0.2, 0.25, 0.3, 0.425, 0.475, 0.525, 0.625, 0.675, 0.725, 0.775, 0.8, 0.825, 0.875, 0.9, 0.925, 0.95, 0.975, 0.98, 0.99, 0.995, 1, 0.995, 0.99, 0.98, 0.975, 0.95, 0.925, 0.9, 0.875, 0.825, 0.8, 0.775, 0.725, 0.675, 0.625, 0.525, 0.475, 0.425, 0.3, 0.25, 0.2, 0.125, 0.05, 0.0, -0.05, -0.125, -0.2, -0.25, -0.3, -0.425, -0.475, -0.525, -0.625, -0.675, -0.725, -0.775, -0.8, -0.825, -0.875, -0.9, -0.925, -0.95, -0.975, -0.98, -0.99, -0.995, -1, -0.995, -0.99, -0.98, -0.975, -0.95, -0.925, -0.9, -0.875, -0.825, -0.8, -0.775, -0.725, -0.675, -0.625, -0.525, -0.475, -0.425, -0.3, -0.25, -0.2, -0.125, -0.05]) },\n\t   { name: \"modbox atari bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]) },\n\t    { name: \"modbox atari pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\n\t  { name: \"modbox 1% pulse\", expression: 0.5, samples: centerAndNormalizeWave},\n\t   { name: \"modbox curved sawtooth\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0 / 4.0]) },\n\t { name: \"modbox viola\", expression: 0.45, samples: centerAndNormalizeWave([-0.9, -1.0, -0.85, -0.775, -0.7, -0.6, -0.5, -0.4, -0.325, -0.225, -0.2, -0.125, -0.1, -0.11, -0.125, -0.15, -0.175, -0.18, -0.2, -0.21, -0.22, -0.21, -0.2, -0.175, -0.15, -0.1, -0.5, 0.75, 0.11, 0.175, 0.2, 0.25, 0.26, 0.275, 0.26, 0.25, 0.225, 0.2, 0.19, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.275, 0.28, 0.29, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.225, 0.2, 0.175, 0.15, 0.1, 0.075, 0.0, -0.01, -0.025, 0.025, 0.075, 0.2, 0.3, 0.475, 0.6, 0.75, 0.85, 0.85, 1.0, 0.99, 0.95, 0.8, 0.675, 0.475, 0.275, 0.01, -0.15, -0.3, -0.475, -0.5, -0.6, -0.71, -0.81, -0.9, -1.0, -0.9]) },\n        { name: \"modbox brass\", expression: 0.45, samples: centerAndNormalizeWave([-1.0, -0.95, -0.975, -0.9, -0.85, -0.8, -0.775, -0.65, -0.6, -0.5, -0.475, -0.35, -0.275, -0.2, -0.125, -0.05, 0.0, 0.075, 0.125, 0.15, 0.20, 0.21, 0.225, 0.25, 0.225, 0.21, 0.20, 0.19, 0.175, 0.125, 0.10, 0.075, 0.06, 0.05, 0.04, 0.025, 0.04, 0.05, 0.10, 0.15, 0.225, 0.325, 0.425, 0.575, 0.70, 0.85, 0.95, 1.0, 0.9, 0.675, 0.375, 0.2, 0.275, 0.4, 0.5, 0.55, 0.6, 0.625, 0.65, 0.65, 0.65, 0.65, 0.64, 0.6, 0.55, 0.5, 0.4, 0.325, 0.25, 0.15, 0.05, -0.05, -0.15, -0.275, -0.35, -0.45, -0.55, -0.65, -0.7, -0.78, -0.825, -0.9, -0.925, -0.95, -0.975]) },\n      { name: \"modbox acoustic bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 0.1, -0.1, -0.2, -0.4, -0.3, -1.0]) },\n\t   { name: \"modbox lyre\", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, 4.0, 2.15, 4.13, 5.15, 0.0, -0.05, 1.0]) },\n\t { name: \"modbox ramp pulse\", expression: 0.5, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },  \n\t  { name: \"modbox piccolo\", expression: 0.5, samples: centerAndNormalizeWave([1, 4, 2, 1, -0.1, -1, -0.12]) },\n     { name: \"modbox squaretooth\", expression: 0.5, samples: centerAndNormalizeWave([0.2, 1.0, 2.6, 1.0, 0.0, -2.4]) },\n\t  { name: \"modbox flatline\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) },\n\t  { name: \"modbox pnryshk a (u5)\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]) },\n\t  { name: \"modbox pnryshk b (riff)\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -0.9, 0.8, -0.7, 0.6, -0.5, 0.4, -0.3, 0.2, -0.1, 0.0, -0.1, 0.2, -0.3, 0.4, -0.5, 0.6, -0.7, 0.8, -0.9, 1.0]) },\n\t//modbox\n\t{ name: \"sandbox shrill lute\", expression: 0.94, samples: centerAndNormalizeWave([1.0, 1.5, 1.25, 1.2, 1.3, 1.5]) },\n        { name: \"sandbox bassoon\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]) },\n        { name: \"sandbox shrill bass\", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 0, 0, 1, 0, 1, 0, 0, 0]) },\n      { name: \"sandbox nes pulse\", expression: 0.4, samples: centerAndNormalizeWave([2.1, -2.2, 1.2, 3]) },\n     { name: \"sandbox saw bass\", expression: 0.25, samples: centerAndNormalizeWave([1, 1, 1, 1, 0, 2, 1, 2, 3, 1, -2, 1, 4, 1, 4, 2, 1, 6, -3, 4, 2, 1, 5, 1, 4, 1, 5, 6, 7, 1, 6, 1, 4, 1, 9]) },\n        { name: \"sandbox euphonium\", expression: 0.3, samples: centerAndNormalizeWave([0, 1, 2, 1, 2, 1, 4, 2, 5, 0, -2, 1, 5, 1, 2, 1, 2, 4, 5, 1, 5, -2, 5, 10, 1]) },\n      { name: \"sandbox shrill pulse\", expression: 0.3, samples: centerAndNormalizeWave([4 -2, 0, 4, 1, 4, 6, 7, 3]) },\n      { name: \"sandbox r-sawtooth\", expression: 0.2, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },\n        { name: \"sandbox recorder\", expression: 0.2, samples: centerAndNormalizeWave([5.0, -5.1, 4.0, -4.1, 3.0, -3.1, 2.0, -2.1, 1.0, -1.1, 6.0]) },\n        { name: \"sandbox narrow saw\", expression: 1.2, samples: centerAndNormalizeWave([0.1, 0.13 / -0.1 ,0.13 / -0.3 ,0.13 / -0.5 ,0.13 / -0.7 ,0.13 / -0.9 ,0.13 / -0.11 ,0.13 / -0.31 ,0.13 / -0.51 ,0.13 / -0.71 ,0.13 / -0.91 ,0.13 / -0.12 ,0.13 / -0.32 ,0.13 / -0.52 ,0.13 / -0.72 ,0.13 / -0.92 ,0.13 / -0.13 ,0.13 / 0.13 ,0.13 / 0.92 ,0.13 / 0.72 ,0.13 / 0.52 ,0.13 / 0.32 ,0.13 / 0.12 ,0.13 / 0.91 ,0.13 / 0.71 ,0.13 / 0.51 ,0.13 / 0.31 ,0.13 / 0.11 ,0.13 / 0.9 ,0.13 / 0.7 ,0.13 / 0.5 ,0.13 / 0.3 ,0.13]) },\n        { name: \"sandbox deep square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },\n      //cut\n\t  { name: \"sandbox ring pulse\", expression: 1.0, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n      { name: \"sandbox double sine\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.0, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5, -1.6, -1.7, -1.8, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0]) },\n        { name: \"sandbox contrabass\", expression: 0.5, samples: centerAndNormalizeWave([4.20, 6.9, 1.337, 6.66]) },\n       { name: \"sandbox double bass\", expression: 0.4, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, -1.0, -0.6875, -0.5, -0.625, -0.625, -0.5, -0.375, -0.5625, -0.4375, -0.5625, -0.4375, -0.4375, -0.3125, -0.1875, 0.1875, 0.375, 0.5625, -0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },\n     //   { name: \"sandbox triple pulse\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.5, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.5]) },     \n\t//from sandbox, are these correct????\n\t  { name: \"haileybox test1\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.5, -1.0]) },\n\t  { name: \"brucebox pokey 4bit lfsr\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0]) },\n\t{ name: \"brucebox pokey 5step bass\", expression: 0.5,samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0]) },\n\t{ name: \"brucebox isolated spiky\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0, -1.0]) },\n\t//brucebox\n\t{ name: \"nerdbox unnamed 1\", expression: 0.5, samples: centerAndNormalizeWave([0.2 , 0.8 / 0.2, 0.7, -0.4, -1.0, 0.5, -0.5 / 0.6]) },\n\t{ name: \"nerdbox unnamed 2\", expression: 0.5, samples: centerAndNormalizeWave([2.0 , 5.0 / 55.0 , -9.0 , 6.5 / 6.5 , -55.0, 18.5 / -26.0]) },\n//nerdbox\n\t { name: \"zefbox semi-square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.5, 2.0, 2.5, 2.5, 2.5, 2.0, 1.5, 1.0]) },\n\t{ name: \"zefbox deep square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },\n { name: \"zefbox squaretal\", expression: 0.7, samples: centerAndNormalizeWave([1.5, 1.0, 1.5, -1.5, -1.0, -1.5]) },\n//\t{ name: \"zefbox sawtooth\", expression: 0.65, samples: centerAndNormalizeWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\n\t { name: \"zefbox saw wide\", expression: 0.65, samples: centerAndNormalizeWave([0.0, -0.4, -0.8, -1.2, -1.6 , -2.0, 0.0, -0.4, -0.8, -1.2, -1.6]) },\n\t{ name: \"zefbox saw narrow\", expression: 0.65,samples: centerAndNormalizeWave([1, 0.5, 1, 0.5, 1, 0.5, 1, 2, 1, 2 ,1]) },\n\t { name: \"zefbox deep sawtooth\", expression: 0.5, samples: centerAndNormalizeWave([0, 2, 3, 4, 4.5, 5, 5.5, 6, 6.25, 6.5, 6.75, 7, 6.75, 6.5, 6.25, 6, 5.5, 5, 4.5, 4, 3, 2, 1]) },\n\t//{ name: \"zefbox double saw\", expression: 0.5, samples: centerAndNormalizeWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\n\t { name: \"zefbox sawtal\", expression: 0.3, samples: centerAndNormalizeWave([1.5, 1.0, 1.25, -0.5, 1.5, -0.5, 0.0, -1.5, 1.5, 0.0, 0.5, -1.5, 0.5, 1.25, -1.0, -1.5]) },\n\t{ name: \"zefbox deep sawtal\", expression: 0.7, samples: centerAndNormalizeWave([0.75, 0.25, 0.5, -0.5, 0.5, -0.5, -0.25, -0.75]) },\n//\t { name: \"zefbox squaretooth\", expression: 0.25, samples: centerAndNormalizeWave([0.2, 1.0, 2.6, 1.0, 0.0, -2.4]) },\n\t//identical to the modbox squaretooth, just louder - this was pre-2.0 ultrabox, but I've added backwards compatibility stuff related to it so yeah\n\t{ name: \"zefbox pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -2.0, -2.0, -1.5, -1.5, -1.25, -1.25, -1.0, -1.0]) },\n//{ name: \"zefbox double pulse\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\n{ name: \"zefbox triple pulse\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.5, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.5]) },\n{ name: \"zefbox high pulse\", expression: 0.2, samples: centerAndNormalizeWave([1, -2, 2, -3, 3, -4, 5, -4, 3, -3, 2, -2, 1]) },\n{ name: \"zefbox deep pulse\", expression: 0.2, samples: centerAndNormalizeWave([1, 2, 2, -2, -2, -3, -4, -4, -5, -5, -5, -5, 0, -1, -2]) },\n//from zefbox, are these correct????\n\t //\"triangle\", \"square\", \"semi-square\", \"deep square\", \"squaretal\", \"sawtooth\", \"saw wide\", \"saw narrow\",  \"deep sawtooth\", \"double saw\", \"sawtal\", \"deep sawtal\", \"squaretooth\", \"pulse\", \"pulse wide\", \"pulse narrow\", \"double pulse\", \"triple pulse\", \"high pulse\", \"deep pulse\",  \"nes pulse\", \"spiky\", \"plateau\", \"sinusoid\"\n\t { name: \"wackybox guitar string\", expression: 0.6, samples: centerAndNormalizeWave([0, 63, 63, 63, 63, 19, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 11, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 27, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 34, 63, 63, 63, 63]) },\n\t\t{ name: \"wackybox intense\", expression: 0.6, samples: centerAndNormalizeWave([36, 25, 33, 35, 18, 51, 22, 40, 27, 37, 31, 33, 25, 29, 41, 23, 31, 31, 45, 20, 37, 23, 29, 26, 42, 29, 33, 26, 31, 27, 40, 25, 40, 26, 37, 24, 41, 32, 0, 32, 33, 29, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31]) },\n\t\t{ name: \"wackybox buzz wave\", expression: 0.6, samples: centerAndNormalizeWave([0, 1, 1, 2, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 11, 15, 23, 62, 61, 60, 58, 56, 56, 54, 53, 52, 50, 49, 48, 47, 47, 45, 45, 45, 44, 44, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 53]) },\n        //wackybox\n\t\t        { name: \"todbox 1/3 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0]) },\n        { name: \"todbox 1/5 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0]) },\n\t\t//these WEREN'T in pre-2.0 ultrabox, but I've added backwards compatibility stuff related to it so yeah\n\t\t{ name: \"todbox slap bass\", expression: 0.5, samples: centerAndNormalizeWave([1, 0.5, 0, 0.5, 1.25, 0.5, -0.25, 0.1, -0.1, 0.1, 1.1, 2.1, 3, 3.5, 2.9, 3.3, 2.7, 2.9, 2.3, 2, 1.9, 1.8, 1, 0.7, 0.9, 0.8, 0.4, 0.1, 0.0, 0.2, 0.4, 0.6, 0.5, 0.8]) },\n\t{ name: \"todbox harsh wave\", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 0.5, 0.5, 0.5, 0.7, 0.39, 1.3, 0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n\t{ name: \"todbox accordian\", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 1, 2, 2, 1.5, 1.5, 0.8, 0, -2, -3.25, -4, -4.5, -5.5, -6, -5.75, -5.5, -5, -5, -5, -6, -6, -6, -5, -4, -3, -2, -1, 0.75, 1, 2, 3, 4, 5, 6, 6.5, 7.5, 8, 7.75, 6, 5.25, 5, 5, 5, 5, 5, 4.25, 3.75, 3.25, 2.75, 1.25, -0.75, -2, -0.75, 1.25, 1.25, 2, 2, 2, 2, 1.5, -1, -2, -1, 1.5, 2,  2.75, 2.75, 2.75, 3, 2.75, -1, -2, -2.5, -2, -1, -2.25, -2.75, -2, -3, -1.75, 1, 2, 3.5, 4, 5.25, 6, 8, 9.75, 10, 9.5, 9, 8.5, 7.5, 6.5, 5.25, 5, 4.5, 4, 4, 4, 3.25, 2.5, 2, 1, -0.5, -2, -3.5, -4, -4, -4, -3.75, -3, -2, -1]) },\n    //from todbox\n\t{ name: \"todbox beta banana wave\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0]) },\n\t{ name: \"todbox beta test wave\", expression: 0.5, samples: centerAndNormalizeWave([56, 0, -52, 16, 3, 3, 2, -35, 20, 147, -53, 0, 0, 5, -6]) },\n\t//I don't like this one.\n\t{ name: \"todbox beta real snare\", expression: 1.0, samples: centerAndNormalizeWave([0.00000,-0.01208,-0.02997,-0.04382,-0.06042,-0.07529,-0.09116,-0.10654,-0.12189,-0.13751,-0.15289,-0.16849,-0.18387,-0.19974,-0.21484,-0.23071,-0.24557,-0.26144,-0.27731,-0.29141,-0.30350,-0.32416,-0.34406,-0.32947,-0.31158,-0.33725,-0.37579,-0.39746,-0.40201,-0.40906,-0.44180,-0.47229,-0.47379,-0.47733,-0.45239,-0.33954,-0.22894,-0.22443,-0.32138,-0.46371,-0.57178,-0.61081,-0.59998,-0.61459,-0.62189,-0.43979,-0.19217,-0.12643,-0.17252,-0.20956,-0.20981,-0.19217,-0.22845,-0.34332,-0.50629,-0.64307,-0.72922,-0.81384,-0.87857,-0.90149,-0.88687,-0.86169,-0.87781,-0.80478,-0.52493,-0.31308,-0.33249,-0.39395,-0.39017,-0.30301,-0.19949,-0.13071,-0.02493,0.14307,0.34961,0.52542,0.63223,0.68613,0.74710,0.87305,0.98184,0.98889,0.97052,0.99066,0.99747,0.99344,0.99469,0.99393,0.99570,0.99393,0.99521,0.99469,0.99420,0.99521,0.99420,0.99521,0.99469,0.99469,0.99521,0.99420,0.99545,0.99445,0.99469,0.99493,0.99420,0.99521,0.99393,0.99493,0.99469,0.99445,0.99570,0.99445,0.99521,0.99469,0.99469,0.99521,0.99420,0.99545,0.99445,0.99445,0.99493,0.99420,0.99545,0.99420,0.99493,0.99493,0.99420,0.99545,0.99445,0.99521,0.99469,0.99445,0.99545,0.99368,0.99393,0.99445,0.99268,0.97983,0.97229,0.95944,0.88486,0.76773,0.64481,0.53098,0.39847,0.19318,-0.03827,-0.20325,-0.39319,-0.68765,-0.88461,-0.93448,-0.96069,-0.97681,-0.98715,-0.99042,-0.99142,-0.99091,-0.99142,-0.99219,-0.99091,-0.99219,-0.99066,-0.99142,-0.99142,-0.99118,-0.99191,-0.99066,-0.99191,-0.99142,-0.99142,-0.99191,-0.99091,-0.99219,-0.99118,-0.99142,-0.99167,-0.99091,-0.99219,-0.99091,-0.99167,-0.99142,-0.99091,-0.99191,-0.99091,-0.99191,-0.99142,-0.99118,-0.99191,-0.99066,-0.99191,-0.99118,-0.99142,-0.99191,-0.99066,-0.99191,-0.99091,-0.99167,-0.99191,-0.99118,-0.99219,-0.99091,-0.99191,-0.99142,-0.99142,-0.99243,-0.98865,-0.98764,-0.99219,-0.98083,-0.92517,-0.92770,-0.91486,-0.59042,-0.15189,0.02945,0.05667,0.06195,0.00629,-0.18008,-0.56497,-0.88010,-0.92770,-0.92871,-0.97705,-0.99167,-0.98663,-0.99118,-0.99042,-0.99219,-0.99142,-0.99118,-0.98941,-0.99219,-1.00000,-0.97580,-0.95993,-0.99948,-0.98236,-0.84659,-0.74860,-0.70679,-0.59747,-0.48035,-0.41687,-0.36826,-0.29745,-0.18185,-0.06219,0.02164,0.07907,0.13123,0.18033,0.19620,0.15692,0.14053,0.20251,0.27530,0.30905,0.29092,0.27252,0.30402,0.32416,0.32214,0.35239,0.39670,0.43198,0.49420,0.58487,0.64154,0.65967,0.67050,0.67026,0.66522,0.65540,0.66119,0.70627,0.75842,0.78738,0.78940,0.78763,0.80402,0.85944,0.94559,0.98990,0.98160,0.98007,0.99368,0.99393,0.98538,0.97580,0.97101,0.93802,0.81812,0.64633,0.46649,0.28613,0.14685,0.08966,0.12543,0.20325,0.24557,0.18866,0.02795,-0.20175,-0.44205,-0.58713,-0.57629,-0.41385,-0.14255,0.18033,0.47882,0.68311,0.72314,0.62064,0.48309,0.43073,0.53577,0.72794,0.90250,0.97354,0.97000,0.98083,0.99191,0.99319,0.99493,0.99393,0.99521,0.99393,0.99545,0.99420,0.99493,0.99493,0.99445,0.99545,0.99420,0.99545,0.99243,0.98917,0.98386,0.97781,0.95844,0.89066,0.81561,0.78134,0.77277,0.75995,0.73022,0.67126,0.57178,0.47000,0.38361,0.29419,0.20703,0.14734,0.15866,0.25162,0.35818,0.45062,0.56750,0.69748,0.81232,0.89697,0.95062,0.97656,0.98615,0.99191,0.99219,0.99243,0.99368,0.99368,0.97028,0.95566,0.94559,0.82617,0.59973,0.38361,0.23901,0.15338,0.12921,0.11206,0.04382,-0.12946,-0.43552,-0.72644,-0.89847,-0.95465,-0.95541,-0.97229,-0.99268,-0.99319,-0.98840,-0.99142,-0.99167,-0.99091,-0.98840,-0.98965,-0.99368,-0.97455,-0.95010,-0.94684,-0.96219,-0.98514,-0.99243,-0.98889,-0.98917,-0.99142,-0.99219,-0.99091,-0.99191,-0.99142,-0.99142,-0.99191,-0.99066,-0.99167,-0.99091,-0.99142,-0.99191,-0.99091,-0.99191,-0.99091,-0.99167,-0.99167,-0.99091,-0.99219,-0.99091,-0.99191,-0.99142,-0.99118,-0.99191,-0.99066,-0.99191,-0.99091,-0.99118,-0.99243,-0.98941,-0.98462,-0.96976,-0.96320,-0.96194,-0.87305,-0.66196,-0.44809,-0.29495,-0.18085,-0.11813,-0.11334,-0.18564,-0.34885,-0.58237,-0.80450,-0.93726,-0.97806,-0.97354,-0.97531,-0.98990,-0.99368,-0.98941,-0.99219,-0.99091,-0.99142,-0.99167,-0.99091,-0.99191,-0.99118,-0.99219,-0.98236,-0.97781,-0.97656,-0.95135,-0.87204,-0.71335,-0.52139,-0.34232,-0.17783,-0.00906,0.14886,0.30450,0.48889,0.67404,0.84030,0.94128,0.97681,0.98462,0.98337,0.99142,0.99521,0.99493,0.99420,0.99445,0.99521,0.99393,0.99545,0.99445,0.99521,0.99521,0.99445,0.99570,0.99445,0.99521,0.99469,0.99445,0.99521,0.99420,0.99521,0.99445,0.99445,0.99521,0.99445,0.99545,0.99445,0.99469,0.99493,0.99393,0.99493,0.99445,0.99393,0.98285,0.97781,0.97479,0.92844,0.82114,0.66095,0.52417,0.46826,0.46722,0.47934,0.47379,0.47076,0.48209,0.42014,0.25439,0.10074,-0.00302,-0.08966,-0.16068,-0.21436,-0.22040,-0.15137,-0.00476,0.18536,0.37631,0.52292,0.62164,0.70425,0.74835,0.72366,0.63928,0.52567,0.40805,0.35666,0.42896,0.60175,0.80200,0.92743,0.96548,0.97632,0.98337,0.99066,0.99521,0.99420,0.99368,0.99292,0.98840,0.98083,0.96774,0.93323,0.85440,0.69470,0.47202,0.20425,-0.08890,-0.36423,-0.60025,-0.77481,-0.90173,-0.96017,-0.97028,-0.98108,-0.98840,-0.99219,-0.98990,-0.99219,-0.99142,-0.99142,-0.99219,-0.99091,-0.99243,-0.99066,-0.99142,-0.99142,-0.99118,-0.99191,-0.99066,-0.99167,-0.99142,-0.99142,-0.99219,-0.99091,-0.99191,-0.99118,-0.99142,-0.99191,-0.99091,-0.99191,-0.99091,-0.99167,-0.99191,-0.99118,-0.99219,-0.99091,-0.99167,-0.99142,-0.99142,-0.99219,-0.99091,-0.99191,-0.99142,-0.99118,-0.98917,-0.99042,-0.99445,-0.97330,-0.95590,-0.96219,-0.89670,-0.72241,-0.55112,-0.44809,-0.39319,-0.37833,-0.35641,-0.26270,-0.14230,-0.11282,-0.13525,-0.11536,-0.09671,-0.11511,-0.18060,-0.26874,-0.33374,-0.42215,-0.51358,-0.44785,-0.30450,-0.28613,-0.30527,-0.25037,-0.15390,-0.08286,-0.11157,-0.12592,-0.00327,0.13803,0.19141,0.12820,0.01788,-0.03952,-0.12592,-0.26773,-0.34634,-0.31384,-0.18060,-0.01080,0.13574,0.26120,0.36975,0.46573,0.55087,0.63626,0.73022,0.83072,0.92014,0.97177,0.98587,0.98413,0.99167,0.99445,0.99292,0.99219,0.98740,0.98007,0.96472,0.92239,0.82166,0.69067,0.57959,0.54962,0.59695,0.64255,0.64633,0.60629,0.55942,0.54910,0.58966,0.61887,0.56952,0.54181,0.59518,0.63248,0.63876,0.65463,0.73398,0.88312,0.96927,0.97101,0.97958,0.99344,0.99420,0.99268,0.99493,0.99469,0.99445,0.99521,0.99445,0.99545,0.99420,0.99493,0.99493,0.99420,0.99545,0.99420,0.99493,0.99420,0.99393,0.99420,0.98840,0.98309,0.98309,0.96069,0.88461,0.79370,0.72064,0.65765,0.59998,0.53247,0.49268,0.48615,0.44205,0.38034,0.36447,0.38715,0.39294,0.32645,0.19595,0.07782,-0.05893,-0.27832,-0.48309,-0.62619,-0.72995,-0.79999,-0.84583,-0.82166,-0.73575,-0.67227,-0.65491,-0.64960,-0.66397,-0.70175,-0.72894,-0.74658,-0.76724,-0.79520,-0.82846,-0.86523,-0.90527,-0.94382,-0.89948,-0.69849,-0.47479,-0.31662,-0.15414,-0.00729,0.07077,0.08237,0.04431,-0.02292,-0.11761,-0.24307,-0.36926,-0.45087,-0.46170,-0.40250,-0.30679,-0.17529,0.00000,0.14331,0.24179,0.36774,0.49545,0.56522,0.57907,0.56775,0.53851,0.51132,0.48688,0.41913,0.26044,0.00955,-0.26297,-0.46396,-0.62341,-0.82214,-0.94684,-0.96774,-0.97531,-0.98413,-0.99017,-0.98990,-0.99219,-0.99066,-0.99142,-0.99167,-0.99118,-0.99219,-0.98990,-0.99118,-0.99368,-0.99142,-0.97757,-0.97403,-0.98007,-0.96170,-0.86826,-0.67783,-0.52719,-0.48788,-0.45490,-0.43146,-0.47681,-0.54105,-0.57983,-0.60904,-0.62317,-0.59949,-0.55566,-0.52063,-0.52115,-0.55112,-0.56244,-0.58337,-0.65540,-0.73373,-0.77228,-0.74759,-0.68890,-0.64609,-0.61887,-0.58060,-0.50351,-0.40729,-0.33929,-0.35110,-0.42944,-0.47028,-0.42267,-0.32718,-0.20224,-0.05640,0.04556,0.10529,0.17630,0.26169,0.33197,0.32138,0.23776,0.20956,0.23148,0.20352,0.23325,0.39267,0.52719,0.58438,0.62289,0.66345,0.70023,0.66296,0.54330,0.42618,0.33475,0.24533,0.14105,0.03851,0.01358,0.09143,0.22845,0.34961,0.41711,0.48740,0.58914,0.69519,0.78186,0.84357,0.89822,0.95389,0.98135,0.98615,0.99167,0.99243,0.99445,0.99420,0.99469,0.99493,0.99393,0.99545,0.99445,0.99521,0.99469,0.99445,0.99521,0.99420,0.99469,0.98965,0.98715,0.98563,0.96295,0.91736,0.86624,0.82367,0.77554,0.68411,0.53549,0.38916,0.26120,0.11435,-0.04053,-0.18161,-0.23172,-0.19394,-0.15237,-0.10730,-0.02997,0.08588,0.22620,0.34305,0.44104,0.55740,0.65765,0.71259,0.69217,0.65363,0.69748,0.79572,0.89368,0.95514,0.97733,0.98413,0.98816,0.99243,0.99445,0.99243,0.97302,0.96674,0.97983,0.90378,0.71005,0.51056,0.40451,0.40982,0.41559,0.32996,0.24356,0.18866,0.11411,0.05365,0.01157,-0.03247,-0.09216,-0.16095,-0.23248,-0.31662,-0.39771,-0.48663,-0.59647,-0.71536,-0.82013,-0.85287,-0.82947,-0.84937,-0.92215,-0.97177,-0.98663,-0.98816,-0.98438,-0.99091,-0.99219,-0.99091,-0.99191,-0.99042,-0.99191,-0.99091,-0.99142,-0.99191,-0.99091,-0.99191,-0.99091,-0.99167,-0.99142]) },\n\t//from todbox beta (obviously)\n\t\n\t//{ name: \"ultrabox nes 12.5%\", expression: 0.5, isSampled: false, samples: centerAndNormalizeWave([0, 1, 0, 0, 0, 0, 0, 0]) },\n\t//{ name: \"ultrabox nes 25%\", expression: 0.5, isSampled: false, samples: centerAndNormalizeWave([0, 1, 1, 0, 0, 0, 0, 0]) },\n//\t{ name: \"ultrabox nes 50%\", expression: 0.5, isSampled: false, samples: centerAndNormalizeWave([0, 1, 1, 1, 1, 0, 0, 0]) },\n//\t{ name: \"ultrabox nes 25% negated\", expression: 0.5, isSampled: false, samples: centerAndNormalizeWave([1, 0, 0, 1, 1, 1, 1, 1]) },\n\t//{ name: \"ultrabox nes triangle\", expression: 0.5, isSampled: true, isPercussion: false, extraSampleDetune: 63.28, samples: centerAndNormalizeWave([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) },\n\t//{ name: \"ultrabox gameboy kirby triangle\", expression: 1.0, isSampled: false, samples: centerAndNormalizeWave([2,5,7,1,0,2,2,3,2,5,5,9,3,4,8,9,5,4,8,1,3,1,3,5,9,8,9,2,1,6,9,0,7,9,6,8,1,6]) },\n\t//{ name: \"ultrabox gameboy kirby bass\", expression: 1.0, isSampled: false, samples: centerAndNormalizeWave([4,5,7,2,6,8,3,3,0,8,1,4,2,1,1,4,8,6,7,3,7,8,3,8,7,7,7,5,7,4,3,9,8,7,8,7,0,7]) },\n\t\n\t\n\t{ name: \"ultrabox shortened od guitar\", expression: 0.5, samples: centerAndNormalizeWave([-0.82785,-0.67621,-0.40268,-0.43817,-0.45468,-0.22531,-0.18329,0.24750,0.71246,0.52155,0.56082,0.48395,0.33990,0.46957,0.27744,0.42313,0.47104,0.18796,0.12930,-0.13901,-0.07431,-0.16348,-0.74857,-0.73206,-0.35181,-0.26227,-0.41882,-0.27786,-0.19806,-0.19867,0.18643,0.24808,0.08847,-0.06964,0.06912,0.20474,-0.05304,0.29416,0.31967,0.14243,0.27521,-0.23932,-0.14752,0.12360,-0.26123,-0.26111,0.06616,0.26520,0.08090,0.15240,0.16254,-0.12061,0.04562,0.00131,0.04050,0.08182,-0.21729,-0.17041,-0.16312,-0.08563,0.06390,0.05099,0.05627,0.02728,0.00726,-0.13028,-0.05673,-0.14969,-0.17645,0.35492,0.16766,-0.00897,0.24326,-0.00461,-0.04456,0.01776,-0.04950,-0.01221,0.02039,0.07684,0.13397,0.39850,0.35962,0.13754,0.42310,0.27161,-0.17609,0.03659,0.10635,-0.21909,-0.22046,-0.20258,-0.40973,-0.40280,-0.40521,-0.66284]) },\n\t//based off an old mp3 in #modded-beepbox where someone tried to shorten the overdrive guitar into the size of other chip waves \n\t//search \"normie alert\" in beepcord\n]); \n\tpublic static chipWaves: DictionaryArray<ChipWave> = rawChipToIntegrated(Config.rawChipWaves);\n\tpublic static rawRawChipWaves: DictionaryArray<ChipWave> = Config.rawChipWaves;\n\n\tpublic static firstIndexForSamplesInChipWaveList: number = Config.chipWaves.length;\n  \n\t// Noise waves have too many samples to write by hand, they're generated on-demand by getDrumWave instead.\n\tpublic static readonly chipNoises: DictionaryArray<ChipNoise> = toNameMap([\n\t\t{ name: \"retro\", expression: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n\t\t{ name: \"white\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n\t\t// The \"clang\" and \"buzz\" noises are based on similar noises in the modded beepbox! :D\n\t\t{ name: \"clang\", expression: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n\t\t{ name: \"buzz\", expression: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n\t\t{ name: \"hollow\", expression: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },\n\t\t{ name: \"shine\", expression: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n\t\t{ name: \"deep\", expression: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },\n\t\t{ name: \"cutter\", expression: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"metallic\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"static\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n\t\t// technically these are from the pandorasbox beta but whatever\n\t\t{ name: \"1-bit white\", expression: 0.5, basePitch: 74.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n\t\t{ name: \"1-bit metallic\", expression: 0.5, basePitch: 86.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n\t\t// ultrabox noises\n\t\t{ name: \"crackling\", expression: 0.9, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n\t\t{ name: \"pink\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n\t\t{ name: \"brownian\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n\t\t//{ name: \"doom random\", expression: 1.0, basePitch: 84, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n\t]);\n\t\n    public static readonly filterFreqStep: number = 1.0 / 4.0;\n    public static readonly filterFreqRange: number = 34;\n    public static readonly filterFreqReferenceSetting: number = 28;\n    public static readonly filterFreqReferenceHz: number = 8000.0;\n    public static readonly filterFreqMaxHz: number = Config.filterFreqReferenceHz * Math.pow(2.0, Config.filterFreqStep * (Config.filterFreqRange - 1 - Config.filterFreqReferenceSetting)); // ~19khz\n    public static readonly filterFreqMinHz: number = 8.0;\n    public static readonly filterGainRange: number = 15;\n    public static readonly filterGainCenter: number = 7;\n    public static readonly filterGainStep: number = 1.0 / 2.0;\n    public static readonly filterMaxPoints: number = 8;\n    public static readonly filterTypeNames: ReadonlyArray<string> = [\"low-pass\", \"high-pass\", \"peak\"]; // See FilterType enum above.\n    public static readonly filterMorphCount: number = 10; // Number of filter shapes allowed for modulating between. Counts the 0/default position.\n\n    public static readonly filterSimpleCutRange: number = 11;\n    public static readonly filterSimplePeakRange: number = 8;\n\n    public static readonly fadeInRange: number = 10;\n    public static readonly fadeOutTicks: ReadonlyArray<number> = [-24, -12, -6, -3, -1, 6, 12, 24, 48, 72, 96];\n    public static readonly fadeOutNeutral: number = 4;\n    public static readonly drumsetFadeOutTicks: number = 48;\n\tpublic static readonly transitions: DictionaryArray<Transition> = toNameMap([\n        { name: \"normal\", isSeamless: false, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: false },\n        { name: \"interrupt\", isSeamless: true, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\n        { name: \"continue\", isSeamless: true, continues: true, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\n        { name: \"slide\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: true },\n        { name: \"slide in pattern\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: false }\n\t]);\n\tpublic static readonly vibratos: DictionaryArray<Vibrato> = toNameMap([\n        { name: \"none\", amplitude: 0.0, type: 0, delayTicks: 0 },\n        { name: \"light\", amplitude: 0.15, type: 0, delayTicks: 0 },\n        { name: \"delayed\", amplitude: 0.3, type: 0, delayTicks: 37 }, // It will fade in over the previous two ticks.\n        { name: \"heavy\", amplitude: 0.45, type: 0, delayTicks: 0 },\n        { name: \"shaky\", amplitude: 0.1, type: 1, delayTicks: 0 },\n\t\t\t//    { name: \"very shaky\", amplitude: 1, type: 0, delayTicks: 0 },\n\t//{ name: \"insane\", amplitude: 10, type: 1, delayTicks: 0 },\n\t    //todbox vibratos\n\t//\t{ name: \"super insane\", amplitude: 30, type: 1, delayTicks: 1 },\n\t\t//wackybox\n\t//\t { name: \"quiver\", amplitude: 0.001, type: 0, delayTicks: 0 },\n      //  { name: \"wub-wub\", amplitude: 10.0, type: 0, delayTicks: 0 },\n   //     { name: \"quiver delayed\", amplitude: 0.001, type: 0, delayTicks: 18 },\n      //  { name: \"vibrate\", amplitude: 0.08, type: 0, delayTicks: 0 },\n    //    { name: \"too much wub\", amplitude: 30.0, type: 0, delayTicks: 18 },\n\t //too much wub breaks things just a little bit at it's original amplitude\n\t\t//sandbox\n\t]);\n\tpublic static readonly vibratoTypes: DictionaryArray<VibratoType> = toNameMap([\n\t\t{ name: \"normal\", periodsSeconds: [0.14], period: 0.14 },\n\t\t{ name: \"shaky\", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 }, // LCM of all periods\n\t]);\n\t// This array is more or less a linear step by 0.1 but there's a bit of range added at the start to hit specific ratios, and the end starts to grow faster.\n\t//                                                             0       1      2    3     4      5    6    7      8     9   10   11 12   13   14   15   16   17   18   19   20   21 22   23   24   25   26   27   28   29   30   31 32   33   34   35   36   37   38    39  40   41 42    43   44   45   46 47   48 49 50\n\tpublic static readonly arpSpeedScale: ReadonlyArray<number> = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];\n\tpublic static readonly unisons: DictionaryArray<Unison> = toNameMap([\n        { name: \"none\", voices: 1, spread: 0.0, offset: 0.0, expression: 1.4, sign: 1.0 },\n        { name: \"shimmer\", voices: 2, spread: 0.018, offset: 0.0, expression: 0.8, sign: 1.0 },\n        { name: \"hum\", voices: 2, spread: 0.045, offset: 0.0, expression: 1.0, sign: 1.0 },\n        { name: \"honky tonk\", voices: 2, spread: 0.09, offset: 0.0, expression: 1.0, sign: 1.0 },\n        { name: \"dissonant\", voices: 2, spread: 0.25, offset: 0.0, expression: 0.9, sign: 1.0 },\n        { name: \"fifth\", voices: 2, spread: 3.5, offset: 3.5, expression: 0.9, sign: 1.0 },\n        { name: \"octave\", voices: 2, spread: 6.0, offset: 6.0, expression: 0.8, sign: 1.0 },\n        { name: \"bowed\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: -1.0 },\n        { name: \"piano\", voices: 2, spread: 0.01, offset: 0.0, expression: 1.0, sign: 0.7 },\n        { name: \"warbled\", voices: 2, spread: 0.25, offset: 0.05, expression: 0.9, sign: -0.8 },\n        { name: \"hecking gosh\", voices: 2, spread: 6.25, offset: -6.0, expression: 0.8, sign: -0.7 },\n\t\t{ name: \"spinner\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: 1.0 },\n\t\t{ name: \"detune\", voices: 1, spread: 0.0, offset: 0.25, expression: 1.0, sign: 1.0 },\n\t\t{ name: \"rising\", voices: 2, spread: 1.0, offset: 0.7, expression: 0.95, sign: 1.0 },\n\t\t{ name: \"vibrate\", voices: 2, spread: 3.5, offset: 7, expression: 0.975, sign: 1.0 },\n\t\t{ name: \"fourths\", voices: 2, spread: 4, offset: 4, expression: 0.95, sign: 1.0 },\n\t\t{ name: \"bass\", voices: 1, spread: 0, offset: -7, expression: 1.0, sign: 1.0 },\n\t\t{ name: \"dirty\", voices: 2, spread: 0, offset: 0.1, expression: 0.975, sign: 1.0 },\n\t\t{ name: \"stationary\", voices: 2, spread: 3.5, offset: 0.0, expression: 0.9, sign: 1.0 },\n\t\t{ name: \"recurve\", voices: 2, spread: 0.005, offset: 0.0, expression: 1.0, sign: 1.0 },\n\t\t{ name: \"voiced\", voices: 2, spread: 9.5, offset: 0.0, expression: 1.0, sign: 1.0 },\n\t\t{ name: \"fluctuate\", voices: 2, spread: 12, offset: 0.0, expression: 1.0, sign: 1.0 },\n\t\t{ name: \"thin\", voices: 1, spread: 0.0, offset: 50.0, expression: 1.0, sign: 1.0 },\n\t\t{ name: \"inject\", voices: 2, spread: 6.0, offset: 0.4, expression: 1.0, sign: 1.0 },\n\t    { name: \"askewed\", voices: 2, spread: 0.0, offset: 0.42, expression: 0.7, sign: 1.0 },\n        { name: \"resonance\", voices: 2, spread: 0.0025, offset: 0.1, expression: 0.8, sign: -1.5 },\n\t\t{ name: \"FART\", voices: 2, spread: 13, offset: -5, expression: 1.0, sign: -3 },\n\t\t\n\t //for modbox; voices = riffapp, spread = intervals, offset = offsets, expression = volume, and sign = signs\n\t]);\n    public static readonly effectNames: ReadonlyArray<string> = [\"reverb\", \"chorus\", \"panning\", \"distortion\", \"bitcrusher\", \"note filter\", \"echo\", \"pitch shift\", \"detune\", \"vibrato\", \"transition type\", \"chord type\"];\n    public static readonly effectOrder: ReadonlyArray<EffectType> = [EffectType.panning, EffectType.transition, EffectType.chord, EffectType.pitchShift, EffectType.detune, EffectType.vibrato, EffectType.noteFilter, EffectType.distortion, EffectType.bitcrusher, EffectType.chorus, EffectType.echo, EffectType.reverb];\n    public static readonly noteSizeMax: number = 6;\n\tpublic static readonly volumeRange: number = 50;\n\t// Beepbox's old volume scale used factor -0.5 and was [0~7] had roughly value 6 = 0.125 power. This new value is chosen to have -21 be the same,\n\t// given that the new scale is [-25~25]. This is such that conversion between the scales is roughly equivalent by satisfying (0.5*6 = 0.1428*21)\n\tpublic static readonly volumeLogScale: number = 0.1428;\n\tpublic static readonly panCenter: number = 50;\n\tpublic static readonly panMax: number = Config.panCenter * 2;\n\tpublic static readonly panDelaySecondsMax: number = 0.001;\n    public static readonly chorusRange: number = 8;\n    public static readonly chorusPeriodSeconds: number = 2.0;\n    public static readonly chorusDelayRange: number = 0.0034;\n    public static readonly chorusDelayOffsets: ReadonlyArray<ReadonlyArray<number>> = [[1.51, 2.10, 3.35], [1.47, 2.15, 3.25]];\n    public static readonly chorusPhaseOffsets: ReadonlyArray<ReadonlyArray<number>> = [[0.0, 2.1, 4.2], [3.2, 5.3, 1.0]];\n    public static readonly chorusMaxDelay: number = Config.chorusDelayRange * (1.0 + Config.chorusDelayOffsets[0].concat(Config.chorusDelayOffsets[1]).reduce((x, y) => Math.max(x, y)));\n\tpublic static readonly chords: DictionaryArray<Chord> = toNameMap([\n        { name: \"simultaneous\", customInterval: false, arpeggiates: false, strumParts: 0, singleTone: false },\n        { name: \"strum\", customInterval: false, arpeggiates: false, strumParts: 1, singleTone: false },\n        { name: \"arpeggio\", customInterval: false, arpeggiates: true, strumParts: 0, singleTone: true },\n        { name: \"custom interval\", customInterval: true, arpeggiates: false, strumParts: 0, singleTone: true },\n    ]);\n    public static readonly maxChordSize: number = 9;\n    public static readonly operatorCount: number = 4;\n\tpublic static readonly maxPitchOrOperatorCount: number = Math.max(Config.maxChordSize, Config.operatorCount+2);\n    public static readonly algorithms: DictionaryArray<Algorithm> = toNameMap([\n        { name: \"1←(2 3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },\n        { name: \"1←(2 3←4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },\n        { name: \"1←2←(3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },\n        { name: \"1←(2 3)←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },\n        { name: \"1←2←3←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },\n        { name: \"1←3 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },\n        { name: \"1 2←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },\n        { name: \"1 2←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },\n        { name: \"(1 2)←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },\n        { name: \"(1 2)←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },\n        { name: \"1 2 3←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },\n        { name: \"(1 2 3)←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },\n        { name: \"1 2 3 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },\n        { name: \"1←(2 3) 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[2, 3], [4], [], []] },\n        { name: \"1←(2 (3 (4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[2, 3, 4], [3, 4], [4], []] },\n    ]);\n    public static readonly algorithms6Op: DictionaryArray<Algorithm> = toNameMap([\n        //placeholder makes life easier for later\n        { name: \"Custom\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n        //yoinked from SynthBox\n        //algortihm Section 1\n        { name: \"1←2←3←4←5←6\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2], [3], [4], [5], [6], []] },\n        { name: \"1←3 2←4←5←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5], [6], []] },\n        { name: \"1←3←4 2←5←6\", carrierCount: 2, associatedCarrier: [1, 1, 1, 2, 2, 2], modulatedBy: [[3], [5], [4], [], [6], []] },\n        { name: \"1←4 2←5 3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [5], [6], [], [], []] },\n        //Algorithm Section 2\n        { name: \"1←3 2←(4 5←6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [], [6], []] },\n        { name: \"1←(3 4) 2←5←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [5], [], [], [6], []] },\n        { name: \"1←3 2←(4 5 6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5, 6], [], [], [], []] },\n        { name: \"1←3 2←(4 5)←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [6], [6], []] },\n        { name: \"1←3 2←4←(5 6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5, 6], [], []] },\n        { name: \"1←(2 3 4 5 6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n        { name: \"1←(2 3←5 4←6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [5], [6], [], []] },\n        { name: \"1←(2 3 4←5←6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], [5], [6], []] },\n        //Algorithm Section 3\n        { name: \"1←4←5 (2 3)←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [6], [6], [5], [], []] },\n        { name: \"1←(3 4)←5 2←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [6], [5], [5], [], []] },\n        { name: \"(1 2)←4 3←(5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [4], [5, 6], [], [], []] },\n        { name: \"(1 2)←5 (3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [5], [6], [6], [], []] },\n        { name: \"(1 2 3)←(4 5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4, 5, 6], [4, 5, 6], [4, 5, 6], [], [], []] },\n        { name: \"1←5 (2 3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [6], [6], [6], [], []] },\n        { name: \"1 2←5 (3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [5], [6], [6], [], []] },\n        { name: \"1 2 (3 4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [6], [6], [6], []] },\n        { name: \"1 2 3 (4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [6], [6], []] },\n        //Algorithm Section 3\n        { name: \"1 2←4 3←(5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3], modulatedBy: [[], [4], [5, 6], [], [], []] },\n        { name: \"1←4 2←(5 6) 3\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3,], modulatedBy: [[4], [5, 6], [], [], [], []] },\n        { name: \"1 2 3←5 4←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5], [6], [], []] },\n        { name: \"1 (2 3)←5←6 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4,], modulatedBy: [[], [5], [5], [], [6], []] },\n        { name: \"1 2 3←5←6 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5, 6], [], [], []] },\n        { name: \"(1 2 3 4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[6], [6], [6], [6], [6], []] },\n        { name: \"1 2 3 4 5←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [], [6], []] },\n        { name: \"1 2 3 4 5 6\", carrierCount: 6, associatedCarrier: [1, 2, 3, 4, 5, 6], modulatedBy: [[], [], [], [], [], []] },\n        //Section 4 where we take our own previous ones for 4op and it gets weird\n        { name: \"1←(2 (3 (4 (5 (6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },\n        { name: \"1←(2(3(4(5(6\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },\n        { name: \"1←4(2←5(3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [3, 5], [6], [], [], []] },\n        { name: \"1←4(2←5 3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [5], [6], [], [], []] },\n    ]);\n    public static readonly operatorCarrierInterval: ReadonlyArray<number> = [0.0, 0.04, -0.073, 0.091, 0.061, 0.024];\n\tpublic static readonly operatorAmplitudeMax: number = 15;\n    public static readonly operatorFrequencies: DictionaryArray<OperatorFrequency> = toNameMap([\n        { name: \"0.12×\", mult: 0.125, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"0.25×\", mult: 0.25, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"0.5×\", mult: 0.5, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"0.75×\", mult: 0.75, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"1×\", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"~1×\", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },\n        { name: \"2×\", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"~2×\", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },\n        { name: \"3×\", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"3.5×\", mult: 3.5, hzOffset: -0.05, amplitudeSign: 1.0 },\n        { name: \"4×\", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"~4×\", mult: 4.0, hzOffset: -2.4, amplitudeSign: -1.0 },\n        { name: \"5×\", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"6×\", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"7×\", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"8×\", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"9×\", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"10×\", mult: 10.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"11×\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"12×\", mult: 12.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"13×\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"14×\", mult: 14.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t    \t\t{ name: \"15×\", mult: 15.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t\t//ultrabox\n        { name: \"16×\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t    \t\t{ name: \"17×\", mult: 17.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t\t//ultrabox\n        { name: \"18×\", mult: 18.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t    \t\t{ name: \"19×\", mult: 19.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t\t//ultrabox\n        { name: \"20×\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t    \t{ name: \"~20×\", mult: 20.0, hzOffset: -5.0, amplitudeSign: -1.0 },\n\t    // dogebox (maybe another mod also adds this? I got it from dogebox)\n\t\t{ name: \"25×\", mult: 25.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t{ name: \"50×\", mult: 50.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t{ name: \"75×\", mult: 75.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t{ name: \"100×\", mult: 100.0, hzOffset: 0.0, amplitudeSign: 1.0 }\n\t    //50 and 100 are from dogebox\n    ]);\n\n    public static readonly envelopes: DictionaryArray<Envelope> = toNameMap([\n        { name: \"none\", type: EnvelopeType.none, speed: 0.0 },\n        { name: \"note size\", type: EnvelopeType.noteSize, speed: 0.0 },\n        { name: \"punch\", type: EnvelopeType.punch, speed: 0.0 },\n        { name: \"flare -1\", type: EnvelopeType.flare, speed: 128.0 },\n        { name: \"flare 1\", type: EnvelopeType.flare, speed: 32.0 },\n        { name: \"flare 2\", type: EnvelopeType.flare, speed: 8.0 },\n        { name: \"flare 3\", type: EnvelopeType.flare, speed: 2.0 },\n        { name: \"twang -1\", type: EnvelopeType.twang, speed: 128.0 },\n        { name: \"twang 1\", type: EnvelopeType.twang, speed: 32.0 },\n        { name: \"twang 2\", type: EnvelopeType.twang, speed: 8.0 },\n        { name: \"twang 3\", type: EnvelopeType.twang, speed: 2.0 },\n        { name: \"swell -1\", type: EnvelopeType.swell, speed: 128.0 },\n        { name: \"swell 1\", type: EnvelopeType.swell, speed: 32.0 },\n        { name: \"swell 2\", type: EnvelopeType.swell, speed: 8.0 },\n        { name: \"swell 3\", type: EnvelopeType.swell, speed: 2.0 },\n        { name: \"tremolo0\", type: EnvelopeType.tremolo, speed: 8.0 },\n        { name: \"tremolo1\", type: EnvelopeType.tremolo, speed: 4.0 },\n        { name: \"tremolo2\", type: EnvelopeType.tremolo, speed: 2.0 },\n        { name: \"tremolo3\", type: EnvelopeType.tremolo, speed: 1.0 },\n        { name: \"tremolo4\", type: EnvelopeType.tremolo2, speed: 4.0 },\n        { name: \"tremolo5\", type: EnvelopeType.tremolo2, speed: 2.0 },\n        { name: \"tremolo6\", type: EnvelopeType.tremolo2, speed: 1.0 },\n        { name: \"decay -1\", type: EnvelopeType.decay, speed: 40.0 },\n        { name: \"decay 1\", type: EnvelopeType.decay, speed: 10.0 },\n        { name: \"decay 2\", type: EnvelopeType.decay, speed: 7.0 },\n        { name: \"decay 3\", type: EnvelopeType.decay, speed: 4.0 },\n        { name: \"wibble-1\", type: EnvelopeType.wibble, speed: 96.0 },\n        { name: \"wibble 1\", type: EnvelopeType.wibble, speed: 24.0 },\n        { name: \"wibble 2\", type: EnvelopeType.wibble, speed: 12.0 },\n        { name: \"wibble 3\", type: EnvelopeType.wibble, speed: 4.0 },\n        { name: \"linear-2\", type: EnvelopeType.linear, speed: 256.0 },\n        { name: \"linear-1\", type: EnvelopeType.linear, speed: 128.0 },\n        { name: \"linear 1\", type: EnvelopeType.linear, speed: 32.0 },\n        { name: \"linear 2\", type: EnvelopeType.linear, speed: 8.0 },\n        { name: \"linear 3\", type: EnvelopeType.linear, speed: 2.0 },\n        { name: \"rise -2\", type: EnvelopeType.rise, speed: 256.0 },\n        { name: \"rise -1\", type: EnvelopeType.rise, speed: 128.0 },\n        { name: \"rise 1\", type: EnvelopeType.rise, speed: 32.0 },\n        { name: \"rise 2\", type: EnvelopeType.rise, speed: 8.0 },\n        { name: \"rise 3\", type: EnvelopeType.rise, speed: 2.0 },\n\t    \t\t//modbox\n        { name: \"flute 1\", type: 9, speed: 16.0 },\n\t\t{ name: \"flute 2\", type: 9, speed: 8.0 },\n\t\t{ name: \"flute 3\", type: 9, speed: 4.0 },\n        // sandbox\n\t\t{ name: \"tripolo1\", type: 6, speed: 9.0 },\n        { name: \"tripolo2\", type: 6, speed: 6.0 },\n        { name: \"tripolo3\", type: 6, speed: 3.0 },\n        { name: \"tripolo4\", type: 7, speed: 9.0 },\n        { name: \"tripolo5\", type: 7, speed: 6.0 },\n        { name: \"tripolo6\", type: 7, speed: 3.0 },\n        { name: \"pentolo1\", type: 6, speed: 10.0 },\n        { name: \"pentolo2\", type: 6, speed: 5.0 },\n        { name: \"pentolo3\", type: 6, speed: 2.5 },\n        { name: \"pentolo4\", type: 7, speed: 10.0 },\n        { name: \"pentolo5\", type: 7, speed: 5.0 },\n        { name: \"pentolo6\", type: 7, speed: 2.5 },\t\n        // todbox\n\t    { name: \"flutter 1\", type: 6, speed: 14.0 },\n        { name: \"flutter 2\", type: 7, speed: 11.0 },\n        { name: \"water-y flutter\", type: 6, speed: 9.0 },\n\t    // new jummbox\n        { name: \"blip 1\", type: EnvelopeType.blip, speed: 6.0 },\n        { name: \"blip 2\", type: EnvelopeType.blip, speed: 16.0 },\n        { name: \"blip 3\", type: EnvelopeType.blip, speed: 32.0 },\n    ]);\n\tpublic static readonly feedbacks: DictionaryArray<Feedback> = toNameMap([\n\t\t{ name: \"1⟲\", indices: [[1], [], [], []] },\n\t\t{ name: \"2⟲\", indices: [[], [2], [], []] },\n\t\t{ name: \"3⟲\", indices: [[], [], [3], []] },\n\t\t{ name: \"4⟲\", indices: [[], [], [], [4]] },\n\t\t{ name: \"1⟲ 2⟲\", indices: [[1], [2], [], []] },\n\t\t{ name: \"3⟲ 4⟲\", indices: [[], [], [3], [4]] },\n\t\t{ name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], []] },\n\t\t{ name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4]] },\n\t\t{ name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4]] },\n\t\t{ name: \"1→2\", indices: [[], [1], [], []] },\n\t\t{ name: \"1→3\", indices: [[], [], [1], []] },\n\t\t{ name: \"1→4\", indices: [[], [], [], [1]] },\n\t\t{ name: \"2→3\", indices: [[], [], [2], []] },\n\t\t{ name: \"2→4\", indices: [[], [], [], [2]] },\n\t\t{ name: \"3→4\", indices: [[], [], [], [3]] },\n\t\t{ name: \"1→3 2→4\", indices: [[], [], [1], [2]] },\n\t\t{ name: \"1→4 2→3\", indices: [[], [], [2], [1]] },\n        { name: \"1→2→3→4\", indices: [[], [1], [2], [3]] },\n        { name: \"1↔2 3↔4\", indices: [[2], [1], [4], [3]] },\n        { name: \"1↔4 2↔3\", indices: [[4], [3], [2], [1]] },\n        { name: \"2→1→4→3→2\", indices: [[2], [3], [4], [1]] },\n        { name: \"1→2→3→4→1\", indices: [[4], [1], [2], [3]] },\n        { name: \"(1 2 3)→4\", indices: [[], [], [], [1, 2, 3]] },\n        { name: \"ALL\", indices: [[1,2,3,4], [1,2,3,4], [1,2,3,4], [1, 2, 3,4]] },\n    ]);\n    public static readonly feedbacks6Op: DictionaryArray<Feedback> = toNameMap([\n        //placeholder makes life easier for later\n        { name: \"Custom\", indices: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n\n        { name: \"1⟲\", indices: [[1], [], [], [], [], []] },\n        { name: \"2⟲\", indices: [[], [2], [], [], [], []] },\n        { name: \"3⟲\", indices: [[], [], [3], [], [], []] },\n        { name: \"4⟲\", indices: [[], [], [], [4], [], []] },\n        { name: \"5⟲\", indices: [[], [], [], [], [5], []] },\n        { name: \"6⟲\", indices: [[], [], [], [], [], [6]] },\n        { name: \"1⟲ 2⟲\", indices: [[1], [2], [], [], [], []] },\n        { name: \"3⟲ 4⟲\", indices: [[], [], [3], [4], [], []] },\n        { name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], [], [], []] },\n        { name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4], [], []] },\n        { name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4], [], []] },\n        { name: \"1⟲ 2⟲ 3⟲ 4⟲ 5⟲\", indices: [[1], [2], [3], [4], [5], []] },\n        { name: \"1⟲ 2⟲ 3⟲ 4⟲ 5⟲ 6⟲\", indices: [[1], [2], [3], [4], [5], [6]] },\n        { name: \"1→2\", indices: [[], [1], [], [], [], []] },\n        { name: \"1→3\", indices: [[], [], [1], [], [], []] },\n        { name: \"1→4\", indices: [[], [], [], [1], [], []] },\n        { name: \"1→5\", indices: [[], [], [], [], [1], []] },\n        { name: \"1→6\", indices: [[], [], [], [], [], [1]] },\n        { name: \"2→3\", indices: [[], [], [2], [], [], []] },\n        { name: \"2→4\", indices: [[], [], [], [2], [], []] },\n        { name: \"3→4\", indices: [[], [], [], [3], [], []] },\n        { name: \"4→5\", indices: [[], [], [], [], [4], []] },\n        { name: \"1→4 2→5 3→6\", indices: [[], [], [], [1], [2], [3]] },\n        { name: \"1→5 2→6 3→4\", indices: [[], [], [], [3], [1], [2]] },\n        { name: \"1→2→3→4→5→6\", indices: [[], [1], [2], [3], [4], [5]] },\n        { name: \"2→1→6→5→4→3→2\", indices: [[2], [3], [4], [5], [6], [1]] },\n        { name: \"1→2→3→4→5→6→1\", indices: [[6], [1], [2], [3], [4], [5]] },\n        { name: \"1↔2 3↔4 5↔6\", indices: [[2], [1], [4], [3], [6], [5]] },\n        { name: \"1↔4 2↔5 3↔6\", indices: [[4], [5], [6], [1], [2], [3]] },\n        { name: \"(1,2,3,4,5)→6\", indices: [[], [], [], [], [], [1, 2, 3, 4, 5]] },\n        { name: \"ALL\", indices: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]] },\n    ]);\n    public static readonly chipNoiseLength: number = 1 << 15; // 32768\n    public static readonly spectrumNoiseLength: number = 1 << 15; // 32768\n    public static readonly spectrumBasePitch: number = 24;\n    public static readonly spectrumControlPoints: number = 30;\n    public static readonly spectrumControlPointsPerOctave: number = 7;\n    public static readonly spectrumControlPointBits: number = 3;\n    public static readonly spectrumMax: number = (1 << Config.spectrumControlPointBits) - 1;\n    public static readonly harmonicsControlPoints: number = 28;\n    public static readonly harmonicsRendered: number = 64;\n    public static readonly harmonicsRenderedForPickedString: number = 1 << 8; // 256\n    public static readonly harmonicsControlPointBits: number = 3;\n    public static readonly harmonicsMax: number = (1 << Config.harmonicsControlPointBits) - 1;\n    public static readonly harmonicsWavelength: number = 1 << 11; // 2048\n    public static readonly pulseWidthRange: number = 50;\n    public static readonly pulseWidthStepPower: number = 0.5;\n    public static readonly supersawVoiceCount: number = 7;\n\tpublic static readonly supersawDynamismMax: number = 6;\n\tpublic static readonly supersawSpreadMax: number = 12;\n\tpublic static readonly supersawShapeMax: number = 6;\n    public static readonly pitchChannelCountMin: number = 1;\n    public static readonly pitchChannelCountMax: number = 60;\n    public static readonly noiseChannelCountMin: number = 0;\n    public static readonly noiseChannelCountMax: number = 32;\n    public static readonly modChannelCountMin: number = 0;\n    public static readonly modChannelCountMax: number = 24;\n    public static readonly noiseInterval: number = 6;\n    public static readonly pitchesPerOctave: number = 12; // TODO: Use this for converting pitch to frequency.\n    public static readonly drumCount: number = 12;\n    public static readonly pitchOctaves: number = 8;\n    public static readonly modCount: number = 6;\n    public static readonly maxPitch: number = Config.pitchOctaves * Config.pitchesPerOctave;\n    public static readonly maximumTonesPerChannel: number = Config.maxChordSize * 2;\n    public static readonly justIntonationSemitones: number[] = [1.0 / 2.0, 8.0 / 15.0, 9.0 / 16.0, 3.0 / 5.0, 5.0 / 8.0, 2.0 / 3.0, 32.0 / 45.0, 3.0 / 4.0, 4.0 / 5.0, 5.0 / 6.0, 8.0 / 9.0, 15.0 / 16.0, 1.0, 16.0 / 15.0, 9.0 / 8.0, 6.0 / 5.0, 5.0 / 4.0, 4.0 / 3.0, 45.0 / 32.0, 3.0 / 2.0, 8.0 / 5.0, 5.0 / 3.0, 16.0 / 9.0, 15.0 / 8.0, 2.0].map(x => Math.log2(x) * Config.pitchesPerOctave);\n    public static readonly pitchShiftRange: number = Config.justIntonationSemitones.length;\n    public static readonly pitchShiftCenter: number = Config.pitchShiftRange >> 1;\n    public static readonly detuneCenter: number = 200;\n    public static readonly detuneMax: number = 400;\n    public static readonly detuneMin: number = 0;\n    public static readonly songDetuneMin: number = 0;\n    public static readonly songDetuneMax: number = 500;\n    public static readonly sineWaveLength: number = 1 << 8; // 256\n    public static readonly sineWaveMask: number = Config.sineWaveLength - 1;\n    public static readonly sineWave: Float32Array = generateSineWave();\n\n    // Picked strings have an all-pass filter with a corner frequency based on the tone fundamental frequency, in order to add a slight inharmonicity. (Which is important for distortion.)\n    public static readonly pickedStringDispersionCenterFreq: number = 6000.0; // The tone fundamental freq is pulled toward this freq for computing the all-pass corner freq.\n    public static readonly pickedStringDispersionFreqScale: number = 0.3; // The tone fundamental freq freq moves this much toward the center freq for computing the all-pass corner freq.\n    public static readonly pickedStringDispersionFreqMult: number = 4.0; // The all-pass corner freq is based on this times the adjusted tone fundamental freq.\n    public static readonly pickedStringShelfHz: number = 4000.0; // The cutoff freq of the shelf filter that is used to decay the high frequency energy in the picked string.\n\n    public static readonly distortionRange: number = 8;\n    public static readonly stringSustainRange: number = 15;\n    public static readonly stringDecayRate: number = 0.12;\n    public static readonly enableAcousticSustain: boolean = false;\n\tpublic static readonly sustainTypeNames: ReadonlyArray<string> = [\"bright\", \"acoustic\"]; // See SustainType enum above.\n\n    public static readonly bitcrusherFreqRange: number = 14;\n    public static readonly bitcrusherOctaveStep: number = 0.5;\n    public static readonly bitcrusherQuantizationRange: number = 8;\n\n    public static readonly maxEnvelopeCount: number = 12;\n    public static readonly defaultAutomationRange: number = 13;\n    public static readonly instrumentAutomationTargets: DictionaryArray<AutomationTarget> = toNameMap([\n        { name: \"none\", computeIndex: null, displayName: \"none\",             /*perNote: false,*/ interleave: false, isFilter: false, /*range: 0,                              */    maxCount: 1, effect: null, compatibleInstruments: null },\n        { name: \"noteVolume\", computeIndex: EnvelopeComputeIndex.noteVolume, displayName: \"note volume\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.volumeRange,             */    maxCount: 1, effect: null, compatibleInstruments: null },\n        { name: \"pulseWidth\", computeIndex: EnvelopeComputeIndex.pulseWidth, displayName: \"pulse width\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pulseWidthRange,         */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.pwm, InstrumentType.supersaw] },\n        { name: \"stringSustain\", computeIndex: EnvelopeComputeIndex.stringSustain, displayName: \"sustain\",          /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.stringSustainRange,      */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.pickedString] },\n        { name: \"unison\", computeIndex: EnvelopeComputeIndex.unison, displayName: \"unison\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.chip, InstrumentType.harmonics, InstrumentType.pickedString, InstrumentType.customChipWave] },\n        { name: \"operatorFrequency\", computeIndex: EnvelopeComputeIndex.operatorFrequency0, displayName: \"fm# freq\",         /*perNote:  true,*/ interleave: true, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: Config.operatorCount+2, effect: null, compatibleInstruments: [InstrumentType.fm, InstrumentType.fm6op] },\n        { name: \"operatorAmplitude\", computeIndex: EnvelopeComputeIndex.operatorAmplitude0, displayName: \"fm# volume\",       /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.operatorAmplitudeMax + 1,*/    maxCount: Config.operatorCount+2, effect: null, compatibleInstruments: [InstrumentType.fm, InstrumentType.fm6op] },\n        { name: \"feedbackAmplitude\", computeIndex: EnvelopeComputeIndex.feedbackAmplitude, displayName: \"fm feedback\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.operatorAmplitudeMax + 1,*/    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.fm, InstrumentType.fm6op] },\n        { name: \"pitchShift\", computeIndex: EnvelopeComputeIndex.pitchShift, displayName: \"pitch shift\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pitchShiftRange,         */    maxCount: 1, effect: EffectType.pitchShift, compatibleInstruments: null },\n        { name: \"detune\", computeIndex: EnvelopeComputeIndex.detune, displayName: \"detune\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.detuneMax + 1,           */    maxCount: 1, effect: EffectType.detune, compatibleInstruments: null },\n        { name: \"vibratoDepth\", computeIndex: EnvelopeComputeIndex.vibratoDepth, displayName: \"vibrato range\",    /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: EffectType.vibrato, compatibleInstruments: null },\n        { name: \"noteFilterAllFreqs\", computeIndex: EnvelopeComputeIndex.noteFilterAllFreqs, displayName: \"n. filter freqs\",  /*perNote:  true,*/ interleave: false, isFilter: true, /*range: null,                           */    maxCount: 1, effect: EffectType.noteFilter, compatibleInstruments: null },\n        { name: \"noteFilterFreq\", computeIndex: EnvelopeComputeIndex.noteFilterFreq0, displayName: \"n. filter # freq\", /*perNote:  true,*/ interleave: false/*true*/, isFilter: true, /*range: Config.filterFreqRange,     */        maxCount: Config.filterMaxPoints, effect: EffectType.noteFilter, compatibleInstruments: null },\n        { name: \"decimalOffset\", computeIndex: EnvelopeComputeIndex.decimalOffset, displayName: \"decimal offset\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pulseWidthRange,         */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.pwm, InstrumentType.supersaw] },\n        { name: \"supersawDynamism\",       computeIndex:       EnvelopeComputeIndex.supersawDynamism,       displayName: \"dynamism\",         /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawDynamismMax + 1, */    maxCount: 1,    effect: null,                    compatibleInstruments: [InstrumentType.supersaw]},\n\t\t{ name: \"supersawSpread\",         computeIndex:       EnvelopeComputeIndex.supersawSpread,         displayName: \"spread\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawSpreadMax + 1,   */    maxCount: 1,    effect: null,                    compatibleInstruments: [InstrumentType.supersaw]},\n\t\t{ name: \"supersawShape\",          computeIndex:       EnvelopeComputeIndex.supersawShape,          displayName: \"saw↔pulse\",        /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawShapeMax + 1,    */    maxCount: 1,    effect: null,                    compatibleInstruments: [InstrumentType.supersaw]},    \n        // Controlling filter gain is less obvious and intuitive than controlling filter freq, so to avoid confusion I've disabled it for now...\n        //{name: \"noteFilterGain\",         computeIndex:       EnvelopeComputeIndex.noteFilterGain0,        displayName: \"n. filter # vol\",  /*perNote:  true,*/ interleave: false, isFilter:  true, range: Config.filterGainRange,             maxCount: Config.filterMaxPoints, effect: EffectType.noteFilter, compatibleInstruments: null},\n        /*\n        {name: \"distortion\",             computeIndex: InstrumentAutomationIndex.distortion,             displayName: \"distortion\",       perNote: false, interleave: false, isFilter: false, range: Config.distortionRange,             maxCount: 1,    effect: EffectType.distortion,   compatibleInstruments: null},\n        {name: \"bitcrusherQuantization\", computeIndex: InstrumentAutomationIndex.bitcrusherQuantization, displayName: \"bit crush\",        perNote: false, interleave: false, isFilter: false, range: Config.bitcrusherQuantizationRange, maxCount: 1,    effect: EffectType.bitcrusher,   compatibleInstruments: null},\n        {name: \"bitcrusherFrequency\",    computeIndex: InstrumentAutomationIndex.bitcrusherFrequency,    displayName: \"freq crush\",       perNote: false, interleave: false, isFilter: false, range: Config.bitcrusherFreqRange,         maxCount: 1,    effect: EffectType.bitcrusher,   compatibleInstruments: null},\n        {name: \"eqFilterAllFreqs\",       computeIndex: InstrumentAutomationIndex.eqFilterAllFreqs,       displayName: \"eq filter freqs\",  perNote: false, interleave: false, isFilter:  true, range: null,                               maxCount: 1,    effect: null,                    compatibleInstruments: null},\n        {name: \"eqFilterFreq\",           computeIndex: InstrumentAutomationIndex.eqFilterFreq0,          displayName: \"eq filter # freq\", perNote: false, interleave:  true, isFilter:  true, range: Config.filterFreqRange,             maxCount: Config.filterMaxPoints, effect: null,  compatibleInstruments: null},\n        {name: \"eqFilterGain\",           computeIndex: InstrumentAutomationIndex.eqFilterGain0,          displayName: \"eq filter # vol\",  perNote: false, interleave: false, isFilter:  true, range: Config.filterGainRange,             maxCount: Config.filterMaxPoints, effect: null,  compatibleInstruments: null},\n        {name: \"panning\",                computeIndex: InstrumentAutomationIndex.panning,                displayName: \"panning\",          perNote: false, interleave: false, isFilter: false, range: Config.panMax + 1,                  maxCount: 1,    effect: EffectType.panning,      compatibleInstruments: null},\n        {name: \"chorus\",                 computeIndex: InstrumentAutomationIndex.chorus,                 displayName: \"chorus\",           perNote: false, interleave: false, isFilter: false, range: Config.chorusRange,                 maxCount: 1,    effect: EffectType.chorus,       compatibleInstruments: null},\n        {name: \"echoSustain\",            computeIndex: InstrumentAutomationIndex.echoSustain,            displayName: \"echo\",             perNote: false, interleave: false, isFilter: false, range: Config.echoSustainRange,            maxCount: 1,    effect: EffectType.echo,         compatibleInstruments: null},\n        {name: \"echoDelay\",              computeIndex: InstrumentAutomationIndex.echoDelay,              displayName: \"echo delay\",       perNote: false, interleave: false, isFilter: false, range: Config.echoDelayRange,              maxCount: 1,    effect: EffectType.echo,         compatibleInstruments: null}, // wait until after we're computing a tick's settings for multiple run lengths.\n        {name: \"reverb\",                 computeIndex: InstrumentAutomationIndex.reverb,                 displayName: \"reverb\",           perNote: false, interleave: false, isFilter: false, range: Config.reverbRange,                 maxCount: 1,    effect: EffectType.reverb,       compatibleInstruments: null},\n        {name: \"mixVolume\",              computeIndex: InstrumentAutomationIndex.mixVolume,              displayName: \"mix volume\",       perNote: false, interleave: false, isFilter: false, range: Config.volumeRange,                 maxCount: 1,    effect: null,                    compatibleInstruments: null},\n        {name: \"envelope#\",              computeIndex: null,                                             displayName: \"envelope\",         perNote: false, interleave: false, isFilter: false, range: Config.defaultAutomationRange,      maxCount: Config.maxEnvelopeCount, effect: null, compatibleInstruments: null}, // maxCount special case for envelopes to be allowed to target earlier ones.\n        */\n    ]);\n    public static readonly operatorWaves: DictionaryArray<OperatorWave> = toNameMap([\n\t\t{ name: \"sine\", samples: Config.sineWave },\n\t\t{ name: \"triangle\", samples: generateTriWave() },\n\t\t{ name: \"pulse width\", samples: generateSquareWave() },\n\t\t{ name: \"sawtooth\", samples: generateSawWave() },\n\t\t{ name: \"ramp\", samples: generateSawWave(true) },\n\t\t{ name: \"trapezoid\", samples: generateTrapezoidWave(2) },\n\t    { name: \"rounded\", samples: generateRoundedSineWave() },\n\t\t//{ name: \"white noise\", samples: generateWhiteNoiseFmWave() },\n\t\t//{ name: \"1-bit white noise\", samples: generateOneBitWhiteNoiseFmWave() },\n    ]);\n    public static readonly pwmOperatorWaves: DictionaryArray<OperatorWave> = toNameMap([\n        { name: \"1%\", samples: generateSquareWave(0.01) },\n        { name: \"5%\", samples: generateSquareWave(0.05) },\n        { name: \"12.5%\", samples: generateSquareWave(0.125) },\n        { name: \"25%\", samples: generateSquareWave(0.25) },\n        { name: \"33%\", samples: generateSquareWave(1 / 3) },\n        { name: \"50%\", samples: generateSquareWave(0.5) },\n        { name: \"66%\", samples: generateSquareWave(2 / 3) },\n        { name: \"75%\", samples: generateSquareWave(0.75) },\n        { name: \"87.5%\", samples: generateSquareWave(0.875) },\n        { name: \"95%\", samples: generateSquareWave(0.95) },\n        { name: \"99%\", samples: generateSquareWave(0.99) },\n    ]);\n\n\n    // Height of the small editor column for inserting/deleting rows, in pixels.\n    public static readonly barEditorHeight: number = 10;\n\n    // Careful about changing index ordering for this. Index is stored in URL/JSON etc.\n    public static readonly modulators: DictionaryArray<Modulator> = toNameMap([\n        { name: \"none\", pianoName: \"None\", maxRawVol: 6, newNoteVol: 6, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"No Mod Setting\", promptDesc: [ \"No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.\", \"[$LO - $HI]\" ] },\n        { name: \"song volume\", pianoName: \"Volume\", maxRawVol: 100, newNoteVol: 100, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Song Volume\", promptDesc: [ \"This setting affects the overall volume of the song, just like the main volume slider.\", \"At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\" ] },\n        { name: \"tempo\", pianoName: \"Tempo\", maxRawVol: Config.tempoMax - Config.tempoMin, newNoteVol: Math.ceil((Config.tempoMax - Config.tempoMin) / 2), forSong: true, convertRealFactor: Config.tempoMin, associatedEffect: EffectType.length,\n            promptName: \"Song Tempo\", promptDesc: [ \"This setting controls the speed your song plays at, just like the tempo slider.\", \"When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.\", \"Note that you can make a 'swing' effect by rapidly changing between two tempo values.\", \"[OVERWRITING] [$LO - $HI] [BPM]\" ] },\n        { name: \"song reverb\", pianoName: \"Reverb\", maxRawVol: Config.reverbRange * 2, newNoteVol: Config.reverbRange, forSong: true, convertRealFactor: -Config.reverbRange, associatedEffect: EffectType.length,\n            promptName: \"Song Reverb\", promptDesc: [ \"This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.\", \"At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI]\" ] },\n        { name: \"next bar\", pianoName: \"Next Bar\", maxRawVol: 1, newNoteVol: 1, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Go To Next Bar\", promptDesc: [ \"This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.\", \"This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.\", \"You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.\", \"[$LO - $HI]\" ] },\n        { name: \"note volume\", pianoName: \"Note Vol.\", maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: EffectType.length,\n            promptName: \"Note Volume\", promptDesc: [ \"This setting affects the volume of your instrument as if its note size had been scaled.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, note volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'mix volume' modulator instead, which will always just scale the volume with no added effects.\", \"For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'mix volume' modulator anyhow. However, as mentioned, it works more like changing note volume.\", \"[MULTIPLICATIVE] [$LO - $HI]\" ] },\n        { name: \"pan\", pianoName: \"Pan\", maxRawVol: Config.panMax, newNoteVol: Math.ceil(Config.panMax / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.panning,\n            promptName: \"Instrument Panning\", promptDesc: [ \"This setting controls the panning of your instrument, just like the panning slider.\", \"At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.\", \"[OVERWRITING] [$LO - $HI] [L-R]\" ] },\n        { name: \"reverb\", pianoName: \"Reverb\", maxRawVol: Config.reverbRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.reverb,\n            promptName: \"Instrument Reverb\", promptDesc: [ \"This setting controls the reverb of your insturment, just like the reverb slider.\", \"At $LO, your instrument will have no reverb. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"distortion\", pianoName: \"Distortion\", maxRawVol: Config.distortionRange-1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.distortion,\n            promptName: \"Instrument Distortion\", promptDesc: [ \"This setting controls the amount of distortion for your instrument, just like the distortion slider.\", \"At $LO, your instrument will have no distortion. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\" ] },\n        { name: \"fm slider 1\", pianoName: \"FM 1\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Slider 1\", promptDesc: [ \"This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n        { name: \"fm slider 2\", pianoName: \"FM 2\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Slider 2\", promptDesc: [\"This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\" ] },\n        { name: \"fm slider 3\", pianoName: \"FM 3\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Slider 3\", promptDesc: [\"This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\" ] },\n        { name: \"fm slider 4\", pianoName: \"FM 4\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Slider 4\", promptDesc: [\"This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n        { name: \"fm feedback\", pianoName: \"FM Feedback\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Feedback\", promptDesc: [\"This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n        { name: \"pulse width\", pianoName: \"Pulse Width\", maxRawVol: Config.pulseWidthRange, newNoteVol: Config.pulseWidthRange, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Pulse Width\", promptDesc: [\"This setting controls the width of this instrument's pulse wave, just like the pulse width slider.\", \"At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).\", \"Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.\", \"[OVERWRITING] [$LO - $HI] [%Duty]\"] },\n        { name: \"detune\", pianoName: \"Detune\", maxRawVol: Config.detuneMax - Config.detuneMin, newNoteVol: Config.detuneCenter, forSong: false, convertRealFactor: -Config.detuneCenter, associatedEffect: EffectType.detune,\n            promptName: \"Instrument Detune\", promptDesc: [\"This setting controls the detune for this instrument, just like the detune slider.\", \"At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.\", \"[OVERWRITING] [$LO - $HI] [cents]\"] },\n        { name: \"vibrato depth\", pianoName: \"Vibrato Depth\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.vibrato,\n            promptName: \"Vibrato Depth\", promptDesc: [\"This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.\", \"At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.\", \"[OVERWRITING] [$LO - $HI] [pitch ÷25]\"] },\n        { name: \"song detune\", pianoName: \"Detune\", maxRawVol: Config.songDetuneMax - Config.songDetuneMin, newNoteVol: Math.ceil((Config.songDetuneMax - Config.songDetuneMin) / 2), forSong: true, convertRealFactor: -250, associatedEffect: EffectType.length,\n            promptName: \"Song Detune\", promptDesc: [\"This setting controls the overall detune of the entire song. There is no associated slider.\", \"At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [cents x4]\"] },\n        { name: \"vibrato speed\", pianoName: \"Vibrato Speed\", maxRawVol: 30, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.vibrato,\n            promptName: \"Vibrato Speed\", promptDesc: [\"This setting controls the speed your instrument will vibrato at, just like the slider.\", \"A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"vibrato delay\", pianoName: \"Vibrato Delay\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.vibrato,\n            promptName: \"Vibrato Delay\", promptDesc: [\"This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.\", \"A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).\", \"[OVERWRITING] [$LO - $HI] [beats ÷24]\"] },\n        { name: \"arp speed\", pianoName: \"Arp Speed\", maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chord,\n            promptName: \"Arpeggio Speed\", promptDesc: [\"This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.\", \"Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.\",\n                \"[0-4]: x0, x1/16, x⅛, x⅕, x¼,\", \"[5-9]: x⅓, x⅖, x½, x⅔, x¾,\", \"[10-14]: x⅘, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\" ,\"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"pan delay\", pianoName: \"Pan Delay\", maxRawVol: 20, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.panning,\n            promptName: \"Panning Delay\", promptDesc: [\"This setting controls the delay applied to panning for your instrument, just like the pan delay slider.\", \"With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"reset arp\", pianoName: \"Reset Arp\", maxRawVol: 1, newNoteVol: 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chord,\n            promptName: \"Reset Arpeggio\", promptDesc: [\"This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.\", \"This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.\", \"[$LO - $HI]\"] },\n        { name: \"eq filter\", pianoName: \"EQFlt\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"EQ Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's EQ filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"note filter\", pianoName: \"N.Flt\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.noteFilter,\n            promptName: \"Note Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's note filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"bit crush\", pianoName: \"Bitcrush\", maxRawVol: Config.bitcrusherQuantizationRange-1, newNoteVol: Math.round(Config.bitcrusherQuantizationRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.bitcrusher,\n            promptName: \"Instrument Bit Crush\", promptDesc: [\"This setting controls the bit crush of your instrument, just like the bit crush slider.\", \"At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"freq crush\", pianoName: \"Freq Crush\", maxRawVol: Config.bitcrusherFreqRange-1, newNoteVol: Math.round(Config.bitcrusherFreqRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.bitcrusher,\n            promptName: \"Instrument Frequency Crush\", promptDesc: [\"This setting controls the frequency crush of your instrument, just like the freq crush slider.\", \"At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"echo\", pianoName: \"Echo\", maxRawVol: Config.echoSustainRange-1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.echo,\n            promptName: \"Instrument Echo Sustain\", promptDesc: [\"This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.\", \"At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"echo delay\", pianoName: \"Echo Delay\", maxRawVol: Config.echoDelayRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Instrument Echo Delay\", promptDesc: [\"This setting controls the echo delay of your instrument, just like the echo delay slider.\", \"At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.\", \"[OVERWRITING] [$LO - $HI] [~beats ÷12]\" ]\n        }, // Disabled via associatedEffect and manually in list build in SongEditor, enable and set back to echo after fixing bugginess!\n        { name: \"chorus\", pianoName: \"Chorus\", maxRawVol: Config.chorusRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chorus,\n            promptName: \"Instrument Chorus\", promptDesc: [\"This setting controls the chorus strength of your instrument, just like the chorus slider.\", \"At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"eq filt cut\", pianoName: \"EQFlt Cut\", maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"EQ Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"eq filt peak\", pianoName: \"EQFlt Peak\", maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"EQ Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"note filt cut\", pianoName: \"N.Flt Cut\", maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.noteFilter,\n            promptName: \"Note Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"note filt peak\", pianoName: \"N.Flt Peak\", maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.noteFilter,\n            promptName: \"Note Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"pitch shift\", pianoName: \"Pitch Shift\", maxRawVol: Config.pitchShiftRange - 1, newNoteVol: Config.pitchShiftCenter, forSong: false, convertRealFactor: -Config.pitchShiftCenter, associatedEffect: EffectType.pitchShift,\n            promptName: \"Pitch Shift\", promptDesc: [\"This setting controls the pitch offset of your instrument, just like the pitch shift slider.\", \"At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.\", \"[OVERWRITING] [$LO - $HI] [pitch]\"] },\n        { name: \"sustain\", pianoName: \"Sustain\", maxRawVol: Config.stringSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Picked String Sustain\", promptDesc: [\"This setting controls the sustain of your picked string instrument, just like the sustain slider.\", \"At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"mix volume\", pianoName: \"Mix Vol.\", maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: EffectType.length,\n            promptName: \"Mix Volume\", promptDesc: [\"This setting affects the volume of your instrument as if its volume slider had been moved.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.\", \"[MULTIPLICATIVE] [$LO - $HI]\"] },\n        { name: \"fm slider 5\", pianoName: \"FM 5\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Slider 5\", promptDesc: [\"This setting affects the strength of the fifth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n        { name: \"fm slider 6\", pianoName: \"FM 6\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Slider 6\", promptDesc: [\"This setting affects the strength of the sixth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n        { name: \"decimal offset\", pianoName: \"Decimal Offset\", maxRawVol: 99, newNoteVol: 0, forSong: false, convertRealFactor: 0, optionalModify: \"invert-0to99\", associatedEffect: EffectType.length,\n            promptName: \"Decimal Offset\", promptDesc: [\"This setting controls the decimal offset that is subtracted from the pulse width; use this for creating values like 12.5 or 6.25.\", \"[$LO - $HI]\"] },\n        { name: \"envelope speed\", pianoName: \"EnvelopeSpd\", maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Envelope Speed\", promptDesc: [\"This setting controls how fast all of the envelopes for the instrument play.\", \"At $LO, your instrument's envelopes will be frozen, and at values near there they will change very slowly. At 12, the envelopes will work as usual, performing at normal speed. This increases up to $HI, where the envelopes will change very quickly. The speeds are given below:\",\n                \"[0-4]: x0, x1/16, x⅛, x⅕, x¼,\", \"[5-9]: x⅓, x⅖, x½, x⅔, x¾,\", \"[10-14]: x⅘, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\" ,\"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"dynamism\", pianoName: \"Dynamism\", maxRawVol: Config.supersawDynamismMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Supersaw Dynamism\", promptDesc: [\"This setting controls the supersaw dynamism of your instrument, just like the dynamism slider.\", \"At $LO, your instrument will have only a single pulse contributing. Increasing this will raise the contribution of other waves which is similar to a chorus effect. The effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"spread\", pianoName: \"Spread\", maxRawVol: Config.supersawSpreadMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Supersaw Spread\", promptDesc: [\"This setting controls the supersaw spread of your instrument, just like the spread slider.\", \"At $LO, all the pulses in your supersaw will be at the same frequency. Increasing this value raises the frequency spread of the contributing waves, up to a dissonant spread at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"saw shape\", pianoName: \"Saw Shape\", maxRawVol: Config.supersawShapeMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Supersaw Shape\", promptDesc: [\"This setting controls the supersaw shape of your instrument, just like the Saw↔Pulse slider.\", \"As the slider's name implies, this effect will give you a sawtooth wave at $LO, and a full pulse width wave at $HI. Values in between will be a blend of the two.\", \"[OVERWRITING] [$LO - $HI] [%]\"] },\n        ]);\n}\n\nfunction centerWave(wave: Array<number>): Float32Array {\n    let sum: number = 0.0;\n    for (let i: number = 0; i < wave.length; i++) sum += wave[i];\n    const average: number = sum / wave.length;\n    for (let i: number = 0; i < wave.length; i++) wave[i] -= average;\n    performIntegral(wave);\n    // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\n    wave.push(0);\n    return new Float32Array(wave);\n}\nfunction centerAndNormalizeWave(wave: Array<number>): Float32Array {\n    let magn: number = 0.0;\n\n    centerWave(wave);\n\n    // Going to length-1 because an extra 0 sample is added on the end as part of centerWave, which shouldn't impact magnitude calculation.\n    for (let i: number = 0; i < wave.length - 1; i++) {\n        magn += Math.abs(wave[i]);\n    }\n    const magnAvg: number = magn / (wave.length - 1);\n\n    for (let i: number = 0; i < wave.length - 1; i++) {\n        wave[i] = wave[i] / magnAvg;\n    }\n\n    return new Float32Array(wave);\n\n}\nexport function performIntegral(wave: { length: number, [index: number]: number }): Float32Array {\n    // Perform the integral on the wave. The synth function will perform the derivative to get the original wave back but with antialiasing.\n    let cumulative: number = 0.0;\n    let newWave: Float32Array = new Float32Array(wave.length);\n    for (let i: number = 0; i < wave.length; i++) {\n        newWave[i] = cumulative;\n        cumulative += wave[i];\n    }\n\n    return newWave;\n}\nexport function performIntegralOld(wave: { length: number, [index: number]: number }): void {\n\t// Old ver used in harmonics/picked string instruments, manipulates wave in place.\n\tlet cumulative: number = 0.0;\n\tfor (let i: number = 0; i < wave.length; i++) {\n\t\tconst temp = wave[i];\n\t\twave[i] = cumulative;\n\t\tcumulative += temp;\n\t}\n}\n\nexport function getPulseWidthRatio(pulseWidth: number): number {\n    // BeepBox formula for reference\n    //return Math.pow(0.5, (Config.pulseWidthRange - 1 - pulseWidth) * Config.pulseWidthStepPower) * 0.5;\n\n    return pulseWidth / (Config.pulseWidthRange * 2);\n}\n\n\n// The function arguments will be defined in FFT.ts, but I want\n// SynthConfig.ts to be at the top of the compiled JS so I won't directly\n// depend on FFT here. synth.ts will take care of importing FFT.ts.\n//function inverseRealFourierTransform(array: {length: number, [index: number]: number}, fullArrayLength: number): void;\n//function scaleElementsByFactor(array: {length: number, [index: number]: number}, factor: number): void;\nexport function getDrumWave(index: number, inverseRealFourierTransform: Function | null, scaleElementsByFactor: Function | null): Float32Array {\n    let wave: Float32Array | null = Config.chipNoises[index].samples;\n    if (wave == null) {\n        wave = new Float32Array(Config.chipNoiseLength + 1);\n        Config.chipNoises[index].samples = wave;\n\n\t\tif (index == 0) {\n\t\t\t// The \"retro\" drum uses a \"Linear Feedback Shift Register\" similar to the NES noise channel.\n\t\t\tlet drumBuffer: number = 1;\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\n\t\t\t\t\tnewBuffer += 1 << 14;\n\t\t\t\t}\n\t\t\t\tdrumBuffer = newBuffer;\n\t\t\t}\n\t\t} else if (index == 1) {\n\t\t\t// White noise is just random values for each sample.\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\twave[i] = Math.random() * 2.0 - 1.0;\n\t\t\t}\n\t\t} else if (index == 2) {\n\t\t\t// The \"clang\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\n\t\t\tlet drumBuffer: number = 1;\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\n\t\t\t\t\tnewBuffer += 2 << 14;\n\t\t\t\t}\n\t\t\t\tdrumBuffer = newBuffer;\n\t\t\t}\n\t\t} else if (index == 3) {\n\t\t\t// The \"buzz\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\n\t\t\tlet drumBuffer: number = 1;\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\n\t\t\t\t\tnewBuffer += 10 << 2;\n\t\t\t\t}\n\t\t\t\tdrumBuffer = newBuffer;\n\t\t\t}\n\t\t} else if (index == 4) {\n\t\t\t// \"hollow\" drums, designed in frequency space and then converted via FFT:\n\t\t\tdrawNoiseSpectrum(wave, Config.chipNoiseLength, 10, 11, 1, 1, 0);\n\t\t\tdrawNoiseSpectrum(wave, Config.chipNoiseLength, 11, 14, .6578, .6578, 0);\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\n\t\t} else if (index == 5) {\n\t\t\t// \"Shine\" drums from modbox!\n\t\t\tvar drumBuffer = 1;\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\n\t\t\t\t\tnewBuffer += 10 << 2;\n\t\t\t\t}\n\t\t\t\tdrumBuffer = newBuffer;\n\t\t\t}\n\t\t} else if (index == 6) {\n\t\t\t// \"Deep\" drums from modbox!\n\t\t\tdrawNoiseSpectrum(wave, Config.chipNoiseLength, 1, 10, 1, 1, 0);\n\t\t\tdrawNoiseSpectrum(wave, Config.chipNoiseLength, 20, 14, -2, -2, 0);\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\n\t\t} else if (index == 7) {\n\t\t\t// \"Cutter\" drums from modbox!\n\t\t\tvar drumBuffer = 1;\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\twave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1) - 8.0;\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\n\t\t\t\t\tnewBuffer += 15 << 2;\n\t\t\t\t}\n\t\t\t\tdrumBuffer = newBuffer;\n\t\t\t}\n\t\t} else if (index == 8) {\n\t\t\t// \"Metallic\" drums from modbox!\n\t\t\tvar drumBuffer = 1;\n\t\t\tfor (var i = 0; i < 32768; i++) {\n\t\t\t\twave[i] = (drumBuffer & 1) / 2.0 - 0.5;\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\n\t\t\t\t\tnewBuffer -= 10 << 2;\n\t\t\t\t}\n\t\t\t\tdrumBuffer = newBuffer;\n            }\n        } else if (index == 9) {\n            // a noise more like old static than white noise\n            let drumBuffer: number = 1;\n            for (let i: number = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.1;\n                let newBuffer: number = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 8 ^ 2 << 16;\n                }\n                drumBuffer = newBuffer;\n            }\n\t\t}\n\t\t\t\t\telse if (index == 10) {\n                for (let i = 0; i < Config.chipNoiseLength; i++) {\n                    wave[i] = Math.round(Math.random());\n                }\n            }\n\t\t\t else if (index == 11) {\n                var drumBuffer = 1;\n                for (var i = 0; i < 32768; i++) {\n                    wave[i] = Math.round((drumBuffer & 1));\n                    var newBuffer = drumBuffer >> 1;\n                    if (((drumBuffer + newBuffer) & 1) == 1) {\n                        newBuffer -= 10 << 2;\n                    }\n                    drumBuffer = newBuffer;\n                }\n            }\n\t\t\telse if (index == 12) {\n                for (let i = 0; i < Config.chipNoiseLength; i++) {\n                   var ultraboxnewchipnoiserand = Math.random();\n\t\t\t\t   wave[i] = Math.pow(ultraboxnewchipnoiserand, Math.clz32(ultraboxnewchipnoiserand));\n                }\n            }\n\t\t\telse if (index == 13) {\n\t\t\t\tvar b0 = 0, b1 = 0, b2 = 0, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\t\n\t\t\t\tfor (let i = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\t\tvar white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\twave[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\twave[i] *= 0.44;\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t\t// from https://github.com/zacharydenton/noise.js, MIT license soooo\n                }\n            }\n\t\t\telse if (index == 14) {\n\t\t\t\tvar lastOut = 0.0;\n\t\t\t\t\n                for (let i = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\t\tvar white = Math.random() * 2 - 1;\n\t\t\t\t\twave[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = wave[i];\n\t\t\t\t\twave[i] *= 14;\n\t\t\t\t\t// this is also from noise.js\n                }\n            }\n\t\t//\telse if (index == 15) {\n\t\t//\t\tconst doomRandArray = [0, 8, 109, 220, 222, 241, 149, 107, 75, 248, 254, 140, 16, 66 , 74, 21, 211, 47, 80, 242, 154, 27, 205, 128, 161, 89, 77, 36 , 95, 110, 85, 48, 212, 140, 211, 249, 22, 79, 200, 50, 28, 188 , 52, 140, 202, 120, 68, 145, 62, 70, 184, 190, 91, 197, 152, 224 , 149, 104, 25, 178, 252, 182, 202, 182, 141, 197, 4, 81, 181, 242 , 145, 42, 39, 227, 156, 198, 225, 193, 219, 93, 122, 175, 249, 0 , 175, 143, 70, 239, 46, 246, 163, 53, 163, 109, 168, 135, 2, 235 , 25, 92, 20, 145, 138, 77, 69, 166, 78, 176, 173, 212, 166, 113 , 94, 161, 41, 50, 239, 49, 111, 164, 70, 60, 2, 37, 171, 75 , 136, 156, 11, 56, 42, 146, 138, 229, 73, 146, 77, 61, 98, 196 , 135, 106, 63, 197, 195, 86, 96, 203, 113, 101, 170, 247, 181, 113 , 80, 250, 108, 7, 255, 237, 129, 226, 79, 107, 112, 166, 103, 241 , 24, 223, 239, 120, 198, 58, 60, 82, 128, 3, 184, 66, 143, 224 , 145, 224, 81, 206, 163, 45, 63, 90, 168, 114, 59, 33, 159, 95 , 28, 139, 123, 98, 125, 196, 15, 70, 194, 253, 54, 14, 109, 226 , 71, 17, 161, 93, 186, 87, 244, 138, 20, 52, 123, 251, 26, 36 , 17, 46, 52, 231, 232, 76, 31, 221, 84, 37, 216, 165, 212, 106 , 197, 242, 98, 43, 39, 175, 254, 145, 190, 84, 118, 222, 187, 136 , 120, 163, 236, 249];\n\t\t//\t\tconst randomSeed = Math.floor(Math.random() * 256);\n\t\t//\t\tvar amountOfLoops = 0;\n\t\t//\t\tvar newWaveValue = 0;\n       //         for (let i = 0; i < Config.chipNoiseLength; i++) {\n\t\t//\t\t\tif (i / 256 > amountOfLoops) {amountOfLoops++;}\n\t\t//\t\t\tnewWaveValue = doomRandArray.at(i - amountOfLoops * 256 + randomSeed);\n\t\t//\t\t\tif (newWaveValue > 256) {newWaveValue += - 256;}\n\t\t//\t\t\twave[i] = newWaveValue * 0.0025;\n\t\t\t\t\t//this sucks\n\t\t\t\t\t//also the randomized starting point code I spent 5 minutes on does nothing (auditorily)\n        //        }\n            //}\n\t\t\n\t\telse {\n\t\t\tthrow new Error(\"Unrecognized drum index: \" + index);\n\t\t}\n\n        wave[Config.chipNoiseLength] = wave[0];\n    }\n\n    return wave;\n}\n\nexport function drawNoiseSpectrum(wave: Float32Array, waveLength: number, lowOctave: number, highOctave: number, lowPower: number, highPower: number, overallSlope: number): number {\n    const referenceOctave: number = 11;\n    const referenceIndex: number = 1 << referenceOctave;\n    const lowIndex: number = Math.pow(2, lowOctave) | 0;\n    const highIndex: number = Math.min(waveLength >> 1, Math.pow(2, highOctave) | 0);\n    const retroWave: Float32Array = getDrumWave(0, null, null);\n    let combinedAmplitude: number = 0.0;\n    for (let i: number = lowIndex; i < highIndex; i++) {\n\n        let lerped: number = lowPower + (highPower - lowPower) * (Math.log2(i) - lowOctave) / (highOctave - lowOctave);\n        let amplitude: number = Math.pow(2, (lerped - 1) * 7 + 1) * lerped;\n\n        amplitude *= Math.pow(i / referenceIndex, overallSlope);\n\n        combinedAmplitude += amplitude;\n\n        // Add two different sources of psuedo-randomness to the noise\n        // (individually they aren't random enough) but in a deterministic\n        // way so that live spectrum editing doesn't result in audible pops.\n        // Multiply all the sine wave amplitudes by 1 or -1 based on the\n        // LFSR retro wave (effectively random), and also rotate the phase\n        // of each sine wave based on the golden angle to disrupt the symmetry.\n        amplitude *= retroWave[i];\n        const radians: number = 0.61803398875 * i * i * Math.PI * 2.0;\n\n        wave[i] = Math.cos(radians) * amplitude;\n        wave[waveLength - i] = Math.sin(radians) * amplitude;\n    }\n\n    return combinedAmplitude;\n}\n\nfunction generateSineWave(): Float32Array {\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n        wave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\n    }\n    return wave;\n}\n\nfunction generateTriWave(): Float32Array {\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n        wave[i] = Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) / (Math.PI / 2);\n    }\n    return wave;\n}\n\nfunction generateTrapezoidWave(drive: number = 2): Float32Array {\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n        wave[i] = Math.max(-1.0, Math.min(1.0, Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) * drive));\n    }\n    return wave;\n}\n\nfunction generateSquareWave(phaseWidth: number = 0): Float32Array {\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n    const centerPoint: number = Config.sineWaveLength / 4;\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n        wave[i] = +((Math.abs(i - centerPoint) < phaseWidth * Config.sineWaveLength / 2)\n            || ((Math.abs(i - Config.sineWaveLength - centerPoint) < phaseWidth * Config.sineWaveLength / 2))) * 2 - 1;\n    }\n    return wave;\n}\n\nfunction generateSawWave(inverse: boolean = false): Float32Array {\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n        wave[i] = ((i + (Config.sineWaveLength / 4.0)) * 2.0 / Config.sineWaveLength) % 2 - 1;\n        wave[i] = inverse ? -wave[i] : wave[i];\n    }\n    return wave;\n}\n\n\t// function generateWhiteNoiseFmWave() {\n        // const wave = new Float32Array(Config.sineWaveLength + 1);\n        // for (let i = 0; i < Config.sineWaveLength + 1; i++) {\n            // wave[i] = Math.random() * 2.0 - 1.0;\n        // }\n        // return wave;\n    // }\n\t// function generateOneBitWhiteNoiseFmWave() {\n        // const wave = new Float32Array(Config.sineWaveLength + 1);\n        // for (let i = 0; i < Config.sineWaveLength + 1; i++) {\n            // wave[i] = Math.round(Math.random());\n        // }\n        // return wave;\n    // }\n\tfunction generateRoundedSineWave() {\n        const wave = new Float32Array(Config.sineWaveLength + 1);\n        for (let i = 0; i < Config.sineWaveLength + 1; i++) {\n            wave[i] = Math.round(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength));\n        }\n        return wave;\n\t}\n\nexport function getArpeggioPitchIndex(pitchCount: number, useFastTwoNoteArp: boolean, arpeggio: number): number {\n    let arpeggioPattern: ReadonlyArray<number> = Config.arpeggioPatterns[pitchCount - 1];\n    if (arpeggioPattern != null) {\n        if (pitchCount == 2 && useFastTwoNoteArp == false) {\n            arpeggioPattern = [0, 0, 1, 1];\n        }\n        return arpeggioPattern[arpeggio % arpeggioPattern.length];\n    } else {\n        return arpeggio % pitchCount;\n    }\n}\n\n// Pardon the messy type casting. This allows accessing array members by numerical index or string name.\nexport function toNameMap<T extends BeepBoxOption>(array: Array<Pick<T, Exclude<keyof T, \"index\">>>): DictionaryArray<T> {\n    const dictionary: Dictionary<T> = {};\n    for (let i: number = 0; i < array.length; i++) {\n        const value: any = array[i];\n        value.index = i;\n        dictionary[value.name] = <T>value;\n    }\n    const result: DictionaryArray<T> = <DictionaryArray<T>><any>array;\n    result.dictionary = dictionary;\n    return result;\n}\n\nexport function effectsIncludeTransition(effects: number): boolean {\n    return (effects & (1 << EffectType.transition)) != 0;\n}\nexport function effectsIncludeChord(effects: number): boolean {\n    return (effects & (1 << EffectType.chord)) != 0;\n}\nexport function effectsIncludePitchShift(effects: number): boolean {\n    return (effects & (1 << EffectType.pitchShift)) != 0;\n}\nexport function effectsIncludeDetune(effects: number): boolean {\n    return (effects & (1 << EffectType.detune)) != 0;\n}\nexport function effectsIncludeVibrato(effects: number): boolean {\n    return (effects & (1 << EffectType.vibrato)) != 0;\n}\nexport function effectsIncludeNoteFilter(effects: number): boolean {\n    return (effects & (1 << EffectType.noteFilter)) != 0;\n}\nexport function effectsIncludeDistortion(effects: number): boolean {\n    return (effects & (1 << EffectType.distortion)) != 0;\n}\nexport function effectsIncludeBitcrusher(effects: number): boolean {\n    return (effects & (1 << EffectType.bitcrusher)) != 0;\n}\nexport function effectsIncludePanning(effects: number): boolean {\n    return (effects & (1 << EffectType.panning)) != 0;\n}\nexport function effectsIncludeChorus(effects: number): boolean {\n    return (effects & (1 << EffectType.chorus)) != 0;\n}\nexport function effectsIncludeEcho(effects: number): boolean {\n    return (effects & (1 << EffectType.echo)) != 0;\n}\nexport function effectsIncludeReverb(effects: number): boolean {\n    return (effects & (1 << EffectType.reverb)) != 0;\n}\nexport function rawChipToIntegrated(raw: DictionaryArray<ChipWave>): DictionaryArray<ChipWave> {\n    const newArray: Array<ChipWave> = new Array<ChipWave>(raw.length);\n    const dictionary: Dictionary<ChipWave> = {};\n    for (let i: number = 0; i < newArray.length; i++) {\n        newArray[i] = Object.assign([], raw[i]);\n        const value: any = newArray[i];\n        value.index = i;\n        dictionary[value.name] = <ChipWave>value;\n    }\n    for (let key in dictionary) {\n        dictionary[key].samples = performIntegral(dictionary[key].samples);\n    }\n    const result: DictionaryArray<ChipWave> = <DictionaryArray<ChipWave>><any>newArray;\n    result.dictionary = dictionary;\n    return result;\n}","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { DictionaryArray, BeepBoxOption, InstrumentType, toNameMap, TypePresets } from \"../synth/SynthConfig\";\n\nexport interface PresetCategory extends BeepBoxOption {\n    readonly presets: DictionaryArray<Preset>;\n}\n\nexport interface Preset extends BeepBoxOption {\n    readonly isNoise?: boolean;\n    readonly isMod?: boolean;\n    readonly generalMidi?: boolean;\n    readonly midiProgram?: number;\n    readonly midiSubharmonicOctaves?: number;\n    readonly customType?: InstrumentType;\n    readonly settings?: any;\n    \n}\n\nexport const isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\n\nexport function prettyNumber(value: number): string {\n    return value.toFixed(2).replace(/\\.?0*$/, \"\");\n}\n\nexport class EditorConfig {\n    public static readonly version: string = \"1.1\"; // Using patch versions in display right now, maybe TODAY.\n    public static readonly versionDisplayName: string = \"AbyssBox: WackyBox Edition \" + EditorConfig.version;\n\n    public static readonly releaseNotesURL: string = \"./patch_notes.html\";\n\n    public static readonly isOnMac: boolean = /^Mac/i.test(navigator.platform) || /Mac OS X/i.test(navigator.userAgent) || /^(iPhone|iPad|iPod)/i.test(navigator.platform) || /(iPhone|iPad|iPod)/i.test(navigator.userAgent);\n    public static readonly ctrlSymbol: string = EditorConfig.isOnMac ? \"⌘\" : \"Ctrl+\";\n    public static readonly ctrlName: string = EditorConfig.isOnMac ? \"command\" : \"control\";\n\n    public static customSamples: string[] | null;\n\t//is this how you do it????\n\t\n    public static readonly presetCategories: DictionaryArray<PresetCategory> = toNameMap([\n        {\n            name: \"Custom Instruments\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: TypePresets[InstrumentType.chip], customType: InstrumentType.chip },\n                { name: TypePresets[InstrumentType.fm], customType: InstrumentType.fm },\n                { name: TypePresets[InstrumentType.noise], customType: InstrumentType.noise },\n                { name: TypePresets[InstrumentType.spectrum], customType: InstrumentType.spectrum },\n                { name: TypePresets[InstrumentType.drumset], customType: InstrumentType.drumset },\n                { name: TypePresets[InstrumentType.harmonics], customType: InstrumentType.harmonics },\n                { name: TypePresets[InstrumentType.pwm], customType: InstrumentType.pwm },\n                { name: TypePresets[InstrumentType.pickedString], customType: InstrumentType.pickedString },\n                { name: TypePresets[InstrumentType.supersaw], customType: InstrumentType.supersaw },\n                { name: TypePresets[InstrumentType.customChipWave], customType: InstrumentType.customChipWave },\n                { name: TypePresets[InstrumentType.fm6op], customType: InstrumentType.fm6op },\n            ])\n        },\n        {\n            name: \"Retro Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"square wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"square\", \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"triangle wave\", midiProgram: 71, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"triangle\", \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"square lead\", midiProgram: 80, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"square\", \"unison\": \"hum\", \"envelopes\": [] } },\n                { name: \"sawtooth lead 1\", midiProgram: 81, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"shimmer\", \"envelopes\": [] } },\n                { name: \"sawtooth lead 2\", midiProgram: 81, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }], \"effects\": [\"vibrato\", \"aliasing\"], \"vibrato\": \"light\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [] } },\n                { name: \"chip noise\", midiProgram: 116, isNoise: true, settings: { \"type\": \"noise\", \"transition\": \"hard\", \"effects\": [\"aliasing\"], \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"retro\" } },\n                { name: \"FM twang\", midiProgram: 32, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\n                { name: \"FM bass\", midiProgram: 36, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"20×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 }] } },\n                { name: \"FM flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\n                { name: \"FM organ\", midiProgram: 16, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"2×\", \"amplitude\": 14 }, { \"frequency\": \"1×\", \"amplitude\": 11 }, { \"frequency\": \"2×\", \"amplitude\": 11 }], \"envelopes\": [] } },\n                { name: \"NES Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"vibrato\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },\n                { name: \"Gameboy Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },\n                { name: \"VRC6 Sawtooth\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },\n                { name: \"Atari Square\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },\n                { name: \"Atari Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },\n                { name: \"Sunsoft Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [24, 24, 15, 15, 9, 9, -4, -4, 0, 0, -13, -13, -19, -19, -24, -24, -24, -24, -10, -10, 0, 0, -7, -7, -7, -7, 0, 0, 6, 6, -4, -4, 3, 3, -4, -4, 3, 3, 3, 3, 9, 9, 15, 15, 15, 15, 6, 6, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, 3, 3, 12, 12, 24, 24] } },\n                { name: \"FM sine\", midiProgram: 55, settings: { \"type\": \"FM\", \"transition\": \"seemless\", \"effects\": \"none\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            ]),\n        },\n        {\n            name: \"Keyboard Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"grand piano 1\", midiProgram: 0, generalMidi: true, settings: {\"type\":\"Picked String\",\"eqFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":148.65,\"linearGain\":0.7071},{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":2.8284}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"effects\":[\"note filter\",\"reverb\"],\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":0.125}],\"panDelay\":10,\"reverb\":68,\"fadeInSeconds\":0,\"fadeOutTicks\":48,\"harmonics\":[100,100,86,86,86,71,71,71,0,86,71,71,71,57,57,71,57,14,57,57,57,57,57,57,57,57,29,57],\"unison\":\"piano\",\"stringSustain\":79,\"envelopes\":[{\"target\":\"noteFilterAllFreqs\",\"envelope\":\"note size\"}]}},\n                { name: \"grand piano 2\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n\t\t        { name: \"grand piano 3\", midiProgram: 0, generalMidi: true, settings: {\"type\":\"Picked String\",\"eqFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":148.65,\"linearGain\":0.7071},{\"type\":\"peak\",\"cutoffHz\":1681.79,\"linearGain\":4},{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":0.1768},{\"type\":\"peak\",\"cutoffHz\":3363.59,\"linearGain\":4},{\"type\":\"peak\",\"cutoffHz\":2378.41,\"linearGain\":0.25}],\"effects\":[\"note filter\",\"reverb\"],\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":4756.83,\"linearGain\":0.3536},{\"type\":\"high-pass\",\"cutoffHz\":125,\"linearGain\":0.0884}],\"reverb\":67,\"fadeInSeconds\":0,\"fadeOutTicks\":48,\"harmonics\":[100,100,86,86,86,71,71,71,0,71,71,71,71,57,57,71,57,14,57,57,57,57,57,57,57,57,29,57],\"unison\":\"piano\",\"stringSustain\":86,\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"note size\",\"index\":0},{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":1},{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":1}] } },\n                { name: \"bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 1.4142 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 71, 71, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"piano\", \"stringSustain\": 86, \"envelopes\": [] } },\n                { name: \"electric grand\", midiProgram: 2, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"1/8 pulse\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n                { name: \"honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 43, 57, 57, 57, 43, 43, 43, 43], \"unison\": \"honky tonk\", \"stringSustain\": 71, \"envelopes\": [] } },\n                { name: \"electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n                { name: \"electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"16×\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\n                { name: \"harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 100, 86, 57, 86, 86, 86, 86, 57, 57, 71, 71, 86, 86, 71, 71, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71], \"unison\": \"none\", \"stringSustain\": 79, \"envelopes\": [] } },\n                { name: \"clavinet\", midiProgram: 7, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.3536 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }, { \"frequency\": \"8×\", \"amplitude\": 4 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 2\" }] } },\n                { name: \"dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [] } },\n\n            ])\n        },\n        {\n            name: \"Idiophone Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"celesta\", midiProgram: 8, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"3×\", \"amplitude\": 1, \"envelope\": \"twang 2\" }] } },\n                { name: \"glockenspiel\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 2, \"envelope\": \"twang 1\" }] } },\n                { name: \"music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0], \"unison\": \"none\", \"stringSustain\": 64, \"envelopes\": [] } },\n                { name: \"music box 2\", midiProgram: 10, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.7071 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"stringSustain\": 29, \"envelopes\": [] } },\n                { name: \"vibraphone\", midiProgram: 11, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\n                { name: \"marimba\", midiProgram: 12, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"kalimba\", midiProgram: 108, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"xylophone\", midiProgram: 13, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }] } },\n                { name: \"tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"chord\": \"strum\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14], \"unison\": \"shimmer\", \"stringSustain\": 86, \"envelopes\": [] } },\n                { name: \"bell synth\", midiProgram: 14, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"rain drop\", midiProgram: 96, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"tremolo1\" }] } },\n                { name: \"crystal\", midiProgram: 98, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }] } },\n                { name: \"tinkle bell\", midiProgram: 112, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 7, \"envelope\": \"custom\" }] } },\n                { name: \"agogo\", midiProgram: 113, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 11, \"envelope\": \"custom\" }] } },\n            ])\n        },\n        {\n            name: \"Guitar Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"nylon guitar\", midiProgram: 24, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n                { name: \"steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [] } },\n                { name: \"jazz guitar\", midiProgram: 26, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\n                { name: \"clean guitar\", midiProgram: 27, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },\n                { name: \"muted guitar\", midiProgram: 28, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }] } },\n            ])\n        },\n        {\n            name: \"Picked Bass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"acoustic bass\", midiProgram: 32, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },\n                { name: \"fingered bass\", midiProgram: 33, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },\n                { name: \"picked bass\", midiProgram: 34, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }] } },\n                { name: \"fretless bass\", midiProgram: 35, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },\n                { name: \"slap bass 1\", midiProgram: 36, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },\n                { name: \"slap bass 2\", midiProgram: 37, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n                { name: \"bass synth 1\", midiProgram: 38, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"twang 2\" }] } },\n                { name: \"bass synth 2\", midiProgram: 39, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 57, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"bass & lead\", midiProgram: 87, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 2\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\n                { name: \"dubstep yoi yoi\", midiProgram: 87, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.7071 }], \"effects\": [\"note filter\", \"bitcrusher\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 594.6, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 1.5, \"bitcrusherQuantization\": 0, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"wave\": \"sawtooth\", \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"flare 2\", \"index\": 0 }] } },\n            ])\n        },\n        {\n            name: \"Picked String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"pizzicato strings\", midiProgram: 45, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"steady\" }] } },\n                { name: \"harp\", midiProgram: 46, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\n                { name: \"sitar\", midiProgram: 104, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 57, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 3\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"16×\", \"amplitude\": 9, \"envelope\": \"swell 3\" }] } },\n                { name: \"banjo\", midiProgram: 105, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n                { name: \"ukulele\", midiProgram: 105, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n                { name: \"shamisen\", midiProgram: 106, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\n                { name: \"koto\", midiProgram: 107, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }] } },\n            ])\n        },\n        {\n            name: \"Distortion Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"overdrive guitar\", midiProgram: 29, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"distortion\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.7071 }], \"distortion\": 71, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\n                { name: \"distortion guitar\", midiProgram: 30, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.25 }], \"effects\": [\"note filter\", \"distortion\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 1 }], \"distortion\": 86, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\n                { name: \"charango synth\", midiProgram: 84, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 1 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13 }, { \"frequency\": \"~1×\", \"amplitude\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 6 }, { \"frequency\": \"3×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"guitar harmonics\", midiProgram: 31, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12 }, { \"frequency\": \"16×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 2 }, { \"frequency\": \"~1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 3 }] } },\n                { name: \"PWM overdrive\", midiProgram: 29, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1.4142 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 17.67767, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"punch\" }] } },\n                { name: \"PWM distortion\", midiProgram: 30, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 50, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"swell 1\" }] } },\n                { name: \"FM overdrive\", midiProgram: 29, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"~2×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"punch\" }] } },\n                { name: \"FM distortion\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 11 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"~2×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }] } },\n            ])\n        },\n        {\n            name: \"Bellows Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"drawbar organ 1\", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"drawbar organ 2\", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },\n                { name: \"percussive organ\", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→3 2→4\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\n                { name: \"rock organ\", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\n                { name: \"pipe organ\", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\n                { name: \"reed organ\", midiProgram: 20, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },\n                { name: \"accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"double saw\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\n                { name: \"bandoneon\", midiProgram: 23, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },\n                { name: \"bagpipe\", midiProgram: 109, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"punch\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },\n            ])\n        },\n        {\n            name: \"String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"violin 1\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9 }, { \"frequency\": \"3×\", \"amplitude\": 9 }, { \"frequency\": \"2×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"viola\", midiProgram: 41, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\n                { name: \"cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.0884 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 10 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"6×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }] } },\n                { name: \"contrabass\", midiProgram: 43, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\n                { name: \"fiddle\", midiProgram: 110, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\n                { name: \"tremolo strings\", midiProgram: 44, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\n                { name: \"strings\", midiProgram: 48, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\n                { name: \"slow strings\", midiProgram: 49, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }] } },\n                { name: \"strings synth 1\", midiProgram: 50, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"soft fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\n                { name: \"strings synth 2\", midiProgram: 51, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\n                { name: \"orchestra hit 1\", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 3\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"flare 3\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"flare 2\" }, { \"frequency\": \"8×\", \"amplitude\": 15, \"envelope\": \"flare 1\" }] } },\n                { name: \"violin 2\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"swell 1\" }] } },\n                { name: \"orchestra hit 2\", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }] } },\n                { name: \"supersaw string\",  midiProgram:  41, settings: {\"type\":\"supersaw\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":2828.43,\"linearGain\":1.4142},{\"type\":\"low-pass\",\"cutoffHz\":3363.59,\"linearGain\":0.1768}],\"effects\":[\"note filter\",\"reverb\"],\"noteFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":500,\"linearGain\":0.1768}],\"reverb\":33,\"fadeInSeconds\":0.0263,\"fadeOutTicks\":6,\"pulseWidth\":35.35534,\"dynamism\":83,\"spread\":8,\"shape\":50,\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":0}]}},\n                { name: \"supersaw string 2\", midiProgram: 41, settings: {\"type\":\"supersaw\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":2378.41,\"linearGain\":0.5},{\"type\":\"high-pass\",\"cutoffHz\":594.6,\"linearGain\":0.25},{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":2.8284},{\"type\":\"peak\",\"cutoffHz\":4756.83,\"linearGain\":2}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"envelopeSpeed\":12,\"discreteEnvelope\":false,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":2378.41,\"linearGain\":0.5},{\"type\":\"high-pass\",\"cutoffHz\":594.6,\"linearGain\":0.25},{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":2.8284},{\"type\":\"peak\",\"cutoffHz\":4756.83,\"linearGain\":2}],\"effects\":[\"note filter\",\"chorus\",\"reverb\"],\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":1}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":1}],\"chorus\":57,\"reverb\":42,\"fadeInSeconds\":0.0575,\"fadeOutTicks\":-6,\"pulseWidth\":50,\"dynamism\":67,\"spread\":58,\"shape\":0,\"envelopes\":[{\"target\":\"noteFilterAllFreqs\",\"envelope\":\"punch\"},{\"target\":\"pulseWidth\",\"envelope\":\"flare 2\"}]}},\n            \n            ])\n        },\n        {\n            name: \"Vocal Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 24, \"harmonics\": [100, 100, 86, 57, 29, 29, 57, 71, 57, 29, 14, 14, 14, 29, 43, 57, 43, 29, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 8 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1.4142 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"voice ooh\", midiProgram: 53, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"voice synth\", midiProgram: 54, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"medium fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"wave\": \"rounded\", \"interval\": \"union\", \"vibrato\": \"light\" } },\n                { name: \"vox synth lead\", midiProgram: 85, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n                { name: \"tiny robot\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 33, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"~1×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"yowie\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"tremolo5\", \"vibrato\": \"none\", \"algorithm\": \"1←2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"tremolo3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"mouse\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 13 }, { \"frequency\": \"5×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\n                { name: \"gumdrop\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"7×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"twang 1\" }] } },\n                { name: \"echo drop\", midiProgram: 102, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\n                { name: \"dark choir\", midiProgram: 85, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"spectrum\": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },\n            ])\n        },\n        {\n            name: \"Brass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"trumpet\", midiProgram: 56, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"trombone\", midiProgram: 57, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"tuba\", midiProgram: 58, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"muted trumpet\", midiProgram: 59, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13 }, { \"frequency\": \"1×\", \"amplitude\": 5 }, { \"frequency\": \"9×\", \"amplitude\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\n                { name: \"french horn\", midiProgram: 60, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"~1×\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 1\" }] } },\n                { name: \"brass section\", midiProgram: 61, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }] } },\n                { name: \"brass synth 1\", midiProgram: 62, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\n                { name: \"brass synth 2\", midiProgram: 63, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"flare 1\" }] } },\n                { name: \"pulse brass\", midiProgram: 62, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"pulseWidth\": 50, \"pulseEnvelope\": \"flare 3\", \"vibrato\": \"none\" } },\n            ])\n        },\n        {\n            name: \"Reed Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"soprano sax\", midiProgram: 64, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\n                { name: \"alto sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\n                { name: \"tenor sax\", midiProgram: 66, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\n                { name: \"baritone sax\", midiProgram: 67, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\n                { name: \"sax synth\", midiProgram: 64, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"shehnai\", midiProgram: 111, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"oboe\", midiProgram: 68, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"steady\" }] } },\n                { name: \"english horn\", midiProgram: 69, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"punch\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n                { name: \"bassoon\", midiProgram: 70, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"clarinet\", midiProgram: 71, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\n                { name: \"harmonica\", midiProgram: 22, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"~2×\", \"amplitude\": 2, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            ])\n        },\n        {\n            name: \"Flute Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"flute 1\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\n                { name: \"recorder\", midiProgram: 74, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\n                { name: \"whistle\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"ocarina\", midiProgram: 79, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"piccolo\", midiProgram: 72, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"punch\" }] } },\n                { name: \"shakuhachi\", midiProgram: 77, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }, { \"frequency\": \"20×\", \"amplitude\": 15, \"envelope\": \"steady\" }] } },\n                { name: \"pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14], \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"punch\" }] } },\n                { name: \"blown bottle\", midiProgram: 76, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"custom\" }] } },\n                { name: \"calliope\", midiProgram: 82, generalMidi: true, settings: { \"type\": \"spectrum\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },\n                { name: \"chiffer\", midiProgram: 83, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"spectrum\": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },\n                { name: \"breath noise\", midiProgram: 121, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"spectrum\": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }] } },\n                { name: \"flute 2\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\n            ])\n        },\n        {\n            name: \"Pad Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"new age pad\", midiProgram: 88, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 4 }, { \"frequency\": \"6×\", \"amplitude\": 3 }, { \"frequency\": \"13×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 3\" }] } },\n                { name: \"warm pad\", midiProgram: 89, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }] } },\n                { name: \"polysynth pad\", midiProgram: 90, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"honky tonk\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n                { name: \"space voice pad\", midiProgram: 91, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.1768 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"2×\", \"amplitude\": 8 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"11×\", \"amplitude\": 2 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\n                { name: \"bowed glass pad\", midiProgram: 92, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"2×\", \"amplitude\": 12 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }] } },\n                { name: \"metallic pad\", midiProgram: 93, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 13, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 9 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"11×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"sweep pad\", midiProgram: 95, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\n                { name: \"atmosphere\", midiProgram: 99, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"chorus\", \"reverb\"], \"chorus\": 100, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 10 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\n                { name: \"brightness\", midiProgram: 100, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14], \"unison\": \"octave\", \"stringSustain\": 86, \"envelopes\": [] } },\n                { name: \"goblins\", midiProgram: 101, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"4×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 3\" }] } },\n                { name: \"sci-fi\", midiProgram: 103, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13 }, { \"frequency\": \"2×\", \"amplitude\": 10 }, { \"frequency\": \"5×\", \"amplitude\": 5 }, { \"frequency\": \"11×\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo5\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"flutter pad\", midiProgram: 90, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13 }, { \"frequency\": \"5×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }] } },\n                { name: \"feedback pad\", midiProgram: 89, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 8 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"custom interval\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 15 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\n                { name: \"supersaw pad\", midiProgram: 93, settings: {\"type\":\"supersaw\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":0.1768}],\"effects\":[\"reverb\"],\"reverb\":100,\"fadeInSeconds\":0.0263,\"fadeOutTicks\":24,\"pulseWidth\":50,\"dynamism\":100,\"spread\":58,\"shape\":0,\"envelopes\":[]}},\n            ])\n        },\n        {\n            name: \"Drum Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"standard drumset\", midiProgram: 116, isNoise: true, settings: { \"type\": \"drumset\", \"effects\": \"reverb\", \"drums\": [{ \"filterEnvelope\": \"twang 1\", \"spectrum\": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { \"filterEnvelope\": \"decay 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },\n                { name: \"steel pan\", midiProgram: 114, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\", \"chorus\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"chorus\": 67, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 14 }, { \"frequency\": \"7×\", \"amplitude\": 3 }, { \"frequency\": \"3×\", \"amplitude\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 3 }] } },\n                { name: \"steel pan synth\", midiProgram: 114, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1 2 3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12 }, { \"frequency\": \"2×\", \"amplitude\": 15 }, { \"frequency\": \"4×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" }] } },\n                { name: \"timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"effects\": [\"pitch shift\", \"note filter\", \"reverb\"], \"pitchShiftSemitones\": 15, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }] } },\n                { name: \"dark strike\", midiProgram: 47, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n                { name: \"woodblock\", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },\n                { name: \"taiko drum\", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\n                { name: \"melodic drum\", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\n                { name: \"drum synth\", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"decay 1\", \"spectrum\": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\n                { name: \"tom-tom\", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },\n                { name: \"metal pipe\", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },\n                { name: \"synth kick\", midiProgram: 47, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"8×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n            ])\n        },\n        {\n            name: \"Novelty Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"guitar fret noise\", midiProgram: 120, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n                { name: \"fifth saw lead\", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1.4142 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n                { name: \"fifth swell\", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }] } },\n                { name: \"soundtrack\", midiProgram: 97, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\n                { name: \"reverse cymbal\", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"none\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },\n                { name: \"seashore\", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"transition\": \"soft fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },\n                { name: \"bird tweet\", midiProgram: 123, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"chord type\", \"vibrato\", \"reverb\"], \"chord\": \"strum\", \"vibrato\": \"heavy\", \"reverb\": 67, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"harmonics\": [0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"decay 1\" }] } },\n                { name: \"telephone ring\", midiProgram: 124, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 4 }, { \"frequency\": \"20×\", \"amplitude\": 1 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo4\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 1 }] } },\n                { name: \"helicopter\", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"spectrum\": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },\n                { name: \"applause\", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },\n                { name: \"gunshot\", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },\n                { name: \"scoot\", midiProgram: 92, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"double saw\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }] } },\n                { name: \"buzz saw\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"5×\", \"amplitude\": 13 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }, { \"frequency\": \"11×\", \"amplitude\": 12 }], \"envelopes\": [] } },\n                { name: \"mosquito\", midiProgram: 93, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"shaky\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"pulseWidth\": 4.41942, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"tremolo6\" }] } },\n                { name: \"breathing\", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"spectrum\": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },\n                { name: \"klaxon synth\", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"wave\": \"buzz\" } },\n                { name: \"theremin\", midiProgram: 40, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.7071 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"heavy\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"harmonics\": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"sonar ping\", midiProgram: 121, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"spectrum\": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n            ])\n        },\n\t\t\t{ name: \"UltraBox Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                //custom presets ultrabox\n               { name: \"nes white\", midiProgram: 116, generalMidi: true, isNoise: true, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\" ], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 0, \"wave\": \"1-bit white\", \"envelopes\": [] } }, \n\t\t\t\t { name: \"nes ping\", midiProgram: 116, generalMidi: true, isNoise: true, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\" ], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 0, \"wave\": \"1-bit metallic\", \"envelopes\": [] } }, \n\t\t\t\t{ name: \"distorted pulse vocal\", generalMidi: false, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 } ], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 } ], \"effects\": [ \"panning\", \"transition type\", \"pitch shift\", \"vibrato\", \"note filter\", \"bitcrusher\", \"echo\", \"reverb\" ], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [ { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 11.3137 } ], \"noteSubFilters0\": [ { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 11.3137 } ], \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 71, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 14, \"echoDelayBeats\": 0.167, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"1/8 pulse\", \"unison\": \"none\", \"envelopes\": [] } },\n              { name: \"dubsteb bwah\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 } ], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\", \"transition type\", \"chord type\" ], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"custom interval\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"operators\": [ { \"frequency\": \"2×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 } ], \"envelopes\": [ { \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 3 } ] } },\n { name: \"FM cool bass\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.7071 } ], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [ { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.7071 } ], \"effects\": [ \"panning\", \"transition type\", \"note filter\", \"reverb\" ], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 } ], \"noteSubFilters1\": [ { \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 } ], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [ { \"frequency\": \"2×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 } ], \"envelopes\": [ { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 } ] } },\n                { name: \"FM funky bass\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.1768 } ], \"eqFilterType\": true, \"eqSimpleCut\": 5, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\", \"transition type\", \"reverb\" ], \"transition\": \"normal\", \"clicklessTransition\": false, \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [ { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 } ], \"envelopes\": [ { \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"noteVolume\", \"envelope\": \"note size\" } ] } },\n                { name: \"mrow\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [], \"effects\": [ \"panning\", \"chord type\", \"reverb\" ], \"chord\": \"custom interval\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pan\": 0, \"panDelay\": 10, \"reverb\": 35, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"operators\": [ { \"frequency\": \"4×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 } ], \"envelopes\": [ { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" } ] } },\n                { name: \"talking bass\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"effects\": [ \"chord type\" ], \"chord\": \"custom interval\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 15, \"operators\": [ { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"2×\", \"amplitude\": 8 }, { \"frequency\": \"2×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 12 } ], \"envelopes\": [ { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"note size\" } ] } },\n                { name: \"synth marimba\", generalMidi: false, settings: { \"type\": \"Picked String\", \"volume\": 0, \"eqFilter\": [ { \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.5 } ], \"effects\": [ \"note filter\", \"echo\" ], \"noteFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 } ], \"echoSustain\": 71, \"echoDelayBeats\": 0.5, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"harmonics\": [ 86, 100, 29, 29, 0, 0, 0, 100, 0, 0, 0, 86, 29, 0, 14, 100, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 86 ], \"unison\": \"fifth\", \"stringSustain\": 7, \"envelopes\": [ { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" } ] } }, \n\t\t\t{ name: \"italian accordian\", generalMidi: false, settings: { \"type\": \"custom chip\", \"volume\": 0, \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 6000, \"linearGain\": 0.5 } ], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 1, \"eqSubFilters1\": [], \"effects\": [ \"panning\", \"chorus\", \"reverb\" ], \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 45, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"wave\": \"square\", \"unison\": \"honky tonk\", \"customChipWave\": { \"0\": -24, \"1\": -24, \"2\": -24, \"3\": -24, \"4\": -24, \"5\": -24, \"6\": -24, \"7\": -24, \"8\": -24, \"9\": -24, \"10\": -24, \"11\": -24, \"12\": -24, \"13\": -24, \"14\": -24, \"15\": -24, \"16\": 24, \"17\": 24, \"18\": 24, \"19\": 24, \"20\": 24, \"21\": 24, \"22\": 24, \"23\": 24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": -24, \"32\": -24, \"33\": -24, \"34\": -24, \"35\": -24, \"36\": -24, \"37\": -24, \"38\": -24, \"39\": -24, \"40\": 24, \"41\": 24, \"42\": 24, \"43\": 24, \"44\": 24, \"45\": 24, \"46\": 24, \"47\": 24, \"48\": -24, \"49\": -24, \"50\": -24, \"51\": -24, \"52\": -24, \"53\": -24, \"54\": -24, \"55\": -24, \"56\": -24, \"57\": -24, \"58\": -24, \"59\": -24, \"60\": -24, \"61\": -24, \"62\": -24, \"63\": -24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\n              { name: \"chip supersaw\", generalMidi: false, settings: { \"type\": \"custom chip\", \"volume\": 0, \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 } ], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\", \"transition type\", \"vibrato\", \"chorus\", \"reverb\" ], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"reverb\": 29, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"square\", \"unison\": \"dissonant\", \"customChipWave\": { \"0\": 22, \"1\": 22, \"2\": 16, \"3\": 6, \"4\": 0, \"5\": -3, \"6\": -8, \"7\": -10, \"8\": -13, \"9\": -16, \"10\": -19, \"11\": -19, \"12\": -20, \"13\": -22, \"14\": -22, \"15\": -24, \"16\": -24, \"17\": -24, \"18\": -24, \"19\": -24, \"20\": -24, \"21\": -24, \"22\": -24, \"23\": -24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": 24, \"32\": 24, \"33\": 16, \"34\": 9, \"35\": 6, \"36\": 4, \"37\": 2, \"38\": 0, \"39\": -1, \"40\": -3, \"41\": -4, \"42\": -4, \"43\": -6, \"44\": -6, \"45\": -6, \"46\": -6, \"47\": -5, \"48\": -5, \"49\": -4, \"50\": -2, \"51\": -2, \"52\": 1, \"53\": 4, \"54\": 6, \"55\": 8, \"56\": 10, \"57\": 12, \"58\": 14, \"59\": 16, \"60\": 18, \"61\": 19, \"62\": 22, \"63\": 24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\n               { name: \"fm supersaw\", generalMidi: false, settings: { \"type\": \"FM6op\", \"volume\": 0, \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 } ], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 } ], \"effects\": [ \"panning\", \"transition type\", \"pitch shift\", \"note filter\", \"chorus\", \"reverb\" ], \"transition\": \"continue\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"noteSubFilters1\": [ { \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 } ], \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1 2 3 4 5 6\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [ { \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 10, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"3×\", \"amplitude\": 7, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 9, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 6, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 } ], \"envelopes\": [] } },\n\t\t\t //THANKS ANSWEARING MACHINE\n\t\t\t { name: \"obama why\", generalMidi: false, settings:{ \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [], \"effects\": [ \"note filter\", \"panning\", \"reverb\" ], \"noteFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 } ], \"pan\": 0, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"harmonics\": [ 100, 86, 29, 29, 14, 14, 0, 14, 14, 43, 71, 100, 100, 86, 71, 71, 57, 57, 43, 43, 43, 43, 43, 0, 0, 0, 0, 0 ], \"unison\": \"octave\", \"envelopes\": [ { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" } ] } },\n\t\t\t //thanks to nobo ig? (this is from a beepcord inside joke)\n\t\t\t\n\t\t\t\n\t \n\t\t\t]) },\n            {   name: \"AbyssBox presets\", presets: <DictionaryArray<Preset>>toNameMap([ // weeb shit - me\n               { name: \"Demonic Bell\", generalMidi: false, settings:  {\"type\":\"Picked String\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":0.7071},{\"type\":\"high-pass\",\"cutoffHz\":353.55,\"linearGain\":0.7071},{\"type\":\"peak\",\"cutoffHz\":1414.21,\"linearGain\":0.0884}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":0.7071},{\"type\":\"high-pass\",\"cutoffHz\":353.55,\"linearGain\":0.7071},{\"type\":\"peak\",\"cutoffHz\":1414.21,\"linearGain\":0.0884}],\"effects\":[\"detune\",\"distortion\",\"bitcrusher\",\"echo\",\"reverb\"],\"detuneCents\":-52,\"distortion\":29,\"aliases\":false,\"bitcrusherOctave\":4.5,\"bitcrusherQuantization\":29,\"panDelay\":10,\"echoSustain\":43,\"echoDelayBeats\":1,\"reverb\":68,\"fadeInSeconds\":0,\"fadeOutTicks\":96,\"harmonics\":[43,71,71,100,86,100,43,86,71,57,86,29,14,71,14,14,57,14,14,43,14,14,43,14,14,43,14,14],\"unison\":\"shimmer\",\"stringSustain\":64,\"envelopes\":[]} },\n               { name: \"Spacey Triangle\", generalMidi: false, settings: {\"type\":\"chip\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":11.3137},{\"type\":\"high-pass\",\"cutoffHz\":176.78,\"linearGain\":4}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":11.3137},{\"type\":\"high-pass\",\"cutoffHz\":176.78,\"linearGain\":4}],\"effects\":[\"transition type\",\"vibrato\",\"distortion\",\"bitcrusher\",\"chorus\",\"echo\",\"reverb\"],\"transition\":\"normal\",\"clicklessTransition\":false,\"vibrato\":\"shaky\",\"vibratoDepth\":0.1,\"vibratoDelay\":0,\"vibratoSpeed\":10,\"vibratoType\":1,\"distortion\":29,\"aliases\":false,\"bitcrusherOctave\":5.5,\"bitcrusherQuantization\":14,\"panDelay\":10,\"chorus\":86,\"echoSustain\":43,\"echoDelayBeats\":1,\"reverb\":26,\"fadeInSeconds\":0,\"fadeOutTicks\":96,\"wave\":\"triangle\",\"unison\":\"dirty\",\"isUsingAdvancedLoopControls\":false,\"chipWaveLoopStart\":0,\"chipWaveLoopEnd\":32,\"chipWaveLoopMode\":0,\"chipWavePlayBackwards\":false,\"chipWaveStartOffset\":0,\"envelopes\":[]} },\n               { name: \"Harmonic Piano\", generalMidi: false, settings: {\"type\":\"harmonics\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":5656.85,\"linearGain\":0.3536},{\"type\":\"peak\",\"cutoffHz\":353.55,\"linearGain\":0.125},{\"type\":\"high-pass\",\"cutoffHz\":88.39,\"linearGain\":1}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":5656.85,\"linearGain\":0.3536},{\"type\":\"peak\",\"cutoffHz\":353.55,\"linearGain\":0.125},{\"type\":\"high-pass\",\"cutoffHz\":88.39,\"linearGain\":1}],\"effects\":[\"transition type\"],\"transition\":\"interrupt\",\"clicklessTransition\":false,\"panDelay\":10,\"fadeInSeconds\":0,\"fadeOutTicks\":-1,\"harmonics\":[100,57,57,57,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"unison\":\"none\",\"envelopes\":[]} },\n               { name: \"Organic Synth\", generalMidi: false, settings: {\"type\":\"FM\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":5656.85,\"linearGain\":0.1768}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":5656.85,\"linearGain\":0.1768}],\"effects\":[\"chord type\",\"reverb\"],\"chord\":\"simultaneous\",\"fastTwoNoteArp\":false,\"arpeggioSpeed\":12,\"panDelay\":10,\"reverb\":71,\"fadeInSeconds\":0.0263,\"fadeOutTicks\":96,\"algorithm\":\"(1 2 3)←4\",\"feedbackType\":\"1⟲ 2⟲ 3⟲\",\"feedbackAmplitude\":2,\"operators\":[{\"frequency\":\"1×\",\"amplitude\":15,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"5×\",\"amplitude\":3,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"8×\",\"amplitude\":7,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5}],\"envelopes\":[{\"target\":\"operatorAmplitude\",\"envelope\":\"twang 1\",\"index\":3},{\"target\":\"noteVolume\",\"envelope\":\"twang 2\"}]} },\n               { name: \"Nokia Ringtone\", generalMidi: false, settings: {\"type\":\"FM\",\"eqFilter\":[],\"effects\":[\"transition type\",\"chord type\"],\"transition\":\"interrupt\",\"chord\":\"custom interval\",\"fadeInSeconds\":0,\"fadeOutTicks\":-1,\"algorithm\":\"(1 2)←(3 4)\",\"feedbackType\":\"1→2\",\"feedbackAmplitude\":0,\"operators\":[{\"frequency\":\"1×\",\"amplitude\":2},{\"frequency\":\"1×\",\"amplitude\":15},{\"frequency\":\"1×\",\"amplitude\":15},{\"frequency\":\"1×\",\"amplitude\":15}],\"envelopes\":[]} },\n            ])},\n\n    ]);\n\n    public static valueToPreset(presetValue: number): Preset | null {\n        const categoryIndex: number = presetValue >> 6;\n        const presetIndex: number = presetValue & 0x3F;\n        return EditorConfig.presetCategories[categoryIndex].presets[presetIndex];\n    }\n\n    public static midiProgramToPresetValue(program: number): number | null {\n        for (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\n            const category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\n            for (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\n                const preset: Preset = category.presets[presetIndex];\n                if (preset.generalMidi && preset.midiProgram == program) return (categoryIndex << 6) + presetIndex;\n            }\n        }\n        return null;\n    }\n\n    public static nameToPresetValue(presetName: string): number | null {\n        for (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\n            const category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\n            for (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\n                const preset: Preset = category.presets[presetIndex];\n                if (preset.name == presetName) return (categoryIndex << 6) + presetIndex;\n            }\n        }\n        return null;\n    }\n\n    public static instrumentToPreset(instrument: InstrumentType): Preset | null {\n        return EditorConfig.presetCategories[0].presets.dictionary?.[TypePresets?.[instrument]];\n    }\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\n// interface shared by number[], Float32Array, and other typed arrays in JavaScript.\ninterface NumberArray {\n\tlength: number;\n\t[index: number]: number;\n}\n\n// A basic FFT operation scales the overall magnitude of elements by the\n// square root of the length of the array, √N. Performing a forward FFT and\n// then an inverse FFT results in the original array, but multiplied by N.\n// This helper function can be used to compensate for that. \nexport function scaleElementsByFactor(array: NumberArray, factor: number): void {\n\tfor (let i: number = 0; i < array.length; i++) {\n\t\tarray[i] *= factor;\n\t}\n}\n\nfunction isPowerOf2(n: number): boolean {\n\treturn !!n && !(n & (n - 1));\n}\n\nfunction countBits(n: number): number {\n\tif (!isPowerOf2(n)) throw new Error(\"FFT array length must be a power of 2.\");\n\treturn Math.round(Math.log(n) / Math.log(2));\n}\n\n// Rearranges the elements of the array, swapping the element at an index\n// with an element at an index that is the bitwise reverse of the first\n// index in base 2. Useful for computing the FFT.\nfunction reverseIndexBits(array: NumberArray, fullArrayLength: number): void {\n\tconst bitCount: number = countBits(fullArrayLength);\n\tif (bitCount > 16) throw new Error(\"FFT array length must not be greater than 2^16.\");\n\tconst finalShift: number = 16 - bitCount;\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\n\t\t// Dear Javascript: Please support bit order reversal intrinsics. Thanks! :D\n\t\tlet j: number;\n\t\tj = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\n\t\tj = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\n\t\tj = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\n\t\t\tj = ((j           >> 8) | ((j &   0xff) << 8)) >> finalShift;\n\t\tif (j > i) {\n\t\t\tlet temp: number = array[i];\n\t\t\tarray[i] = array[j];\n\t\t\tarray[j] = temp;\n\t\t}\n\t}\n}\n\n// Provided for educational purposes. Easier to read than\n// fastFourierTransform(), but computes the same result.\n// Takes two parallel arrays representing the real and imaginary elements,\n// respectively, and returns an array containing two new arrays, which\n// contain the complex result of the transform.\nexport function discreteFourierTransform(realArray: NumberArray, imagArray: NumberArray): number[][] {\n\tconst fullArrayLength: number = realArray.length;\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\n\tconst realOut: number[] = [];\n\tconst imagOut: number[] = [];\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\n\t\trealOut[i] = 0.0;\n\t\timagOut[i] = 0.0;\n\t\tfor (let j: number = 0; j < fullArrayLength; j++) {\n\t\t\tconst radians: number = -6.2831853 * j * i / fullArrayLength;\n\t\t\tconst c: number = Math.cos(radians);\n\t\t\tconst s: number = Math.sin(radians);\n\t\t\trealOut[i] += realArray[j] * c - imagArray[j] * s;\n\t\t\timagOut[i] += realArray[j] * s + imagArray[j] * c;\n\t\t}\n\t}\n\treturn [realOut, imagOut];\n}\n\n// Performs a Fourier transform in O(N log(N)) operations. Overwrites the\n// input real and imaginary arrays. Can be used for both forward and inverse\n// transforms: swap the order of the arguments for the inverse.\nexport function fastFourierTransform(realArray: NumberArray, imagArray: NumberArray): void {\n\tconst fullArrayLength: number = realArray.length;\n\tif (!isPowerOf2(fullArrayLength)) throw new Error(\"FFT array length must be a power of 2.\");\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\n\t\t\n\treverseIndexBits(realArray, fullArrayLength);\n\treverseIndexBits(imagArray, fullArrayLength);\n\t\t\n\t// First two passes, with strides of 2 and 4, can be combined and optimized.\n\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += 4) {\n\t\tconst startIndex1: number = startIndex + 1;\n\t\tconst startIndex2: number = startIndex + 2;\n\t\tconst startIndex3: number = startIndex + 3;\n\t\t\tconst real0: number = realArray[startIndex ];\n\t\tconst real1: number = realArray[startIndex1];\n\t\tconst real2: number = realArray[startIndex2];\n\t\tconst real3: number = realArray[startIndex3];\n\t\t\tconst imag0: number = imagArray[startIndex ];\n\t\tconst imag1: number = imagArray[startIndex1];\n\t\tconst imag2: number = imagArray[startIndex2];\n\t\tconst imag3: number = imagArray[startIndex3];\n\t\tconst realTemp0: number = real0 + real1;\n\t\tconst realTemp1: number = real0 - real1;\n\t\tconst realTemp2: number = real2 + real3;\n\t\tconst realTemp3: number = real2 - real3;\n\t\tconst imagTemp0: number = imag0 + imag1;\n\t\tconst imagTemp1: number = imag0 - imag1;\n\t\tconst imagTemp2: number = imag2 + imag3;\n\t\tconst imagTemp3: number = imag2 - imag3;\n\t\t\trealArray[startIndex ] = realTemp0 + realTemp2;\n\t\trealArray[startIndex1] = realTemp1 + imagTemp3;\n\t\trealArray[startIndex2] = realTemp0 - realTemp2;\n\t\trealArray[startIndex3] = realTemp1 - imagTemp3;\n\t\t\timagArray[startIndex ] = imagTemp0 + imagTemp2;\n\t\timagArray[startIndex1] = imagTemp1 - realTemp3;\n\t\timagArray[startIndex2] = imagTemp0 - imagTemp2;\n\t\timagArray[startIndex3] = imagTemp1 + realTemp3;\n\t}\n\t\t\n\tfor (let stride: number = 8; stride <= fullArrayLength; stride += stride) {\n\t\tconst halfLength: number = stride >>> 1;\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\n\t\t\tlet c: number = 1.0;\n\t\t\tlet s: number = 0.0;\n\t\t\tlet cPrev: number = cosIncrement;\n\t\t\tlet sPrev: number = sinIncrement;\n\t\t\tconst secondHalf: number = startIndex + halfLength;\n\t\t\tfor (let i: number = startIndex; i < secondHalf; i++) {\n\t\t\t\tconst j: number = i + halfLength;\n\t\t\t\tconst real0: number = realArray[i];\n\t\t\t\tconst imag0: number = imagArray[i];\n\t\t\t\tconst real1: number = realArray[j] * c - imagArray[j] * s;\n\t\t\t\tconst imag1: number = realArray[j] * s + imagArray[j] * c;\n\t\t\t\trealArray[i] = real0 + real1;\n\t\t\t\timagArray[i] = imag0 + imag1;\n\t\t\t\trealArray[j] = real0 - real1;\n\t\t\t\timagArray[j] = imag0 - imag1;\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\n\t\t\t\tcPrev = c;\n\t\t\t\tsPrev = s;\n\t\t\t\tc = cTemp;\n\t\t\t\ts = sTemp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Computes the Fourier transform from an array of real-valued time-domain\n// samples. The output is specially formatted for space efficieny: elements\n// 0 through N/2 represent cosine wave amplitudes in ascending frequency,\n// and elements N/2+1 through N-1 represent sine wave amplitudes in\n// descending frequency. Overwrites the input array.\nexport function forwardRealFourierTransform(array: NumberArray): void {\n\tconst fullArrayLength: number = array.length;\n\tconst totalPasses: number = countBits(fullArrayLength);\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\n\t\t\n\treverseIndexBits(array, fullArrayLength);\n\t\t\n\t// First and second pass.\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\n\t\tconst index1: number = index + 1;\n\t\tconst index2: number = index + 2;\n\t\tconst index3: number = index + 3;\n\t\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1];\n\t\tconst real2: number = array[index2];\n\t\tconst real3: number = array[index3];\n\t\t// no imaginary elements yet since the input is fully real.\n\t\tconst tempA: number = real0 + real1;\n\t\tconst tempB: number = real2 + real3;\n\t\t\tarray[index ] = tempA + tempB;\n\t\tarray[index1] = real0 - real1;\n\t\tarray[index2] = tempA - tempB;\n\t\tarray[index3] = real2 - real3;\n\t}\n\t\t\n\t// Third pass.\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\n\t\tconst index1: number = index + 1;\n\t\tconst index3: number = index + 3;\n\t\tconst index4: number = index + 4;\n\t\tconst index5: number = index + 5;\n\t\tconst index7: number = index + 7;\n\t\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1];\n\t\tconst imag3: number = array[index3];\n\t\tconst real4: number = array[index4];\n\t\tconst real5: number = array[index5];\n\t\tconst imag7: number = array[index7];\n\t\tconst tempA: number = (real5 - imag7) * sqrt2over2;\n\t\tconst tempB: number = (real5 + imag7) * sqrt2over2;\n\t\t\tarray[index ] = real0 + real4;\n\t\tarray[index1] = real1 + tempA;\n\t\tarray[index3] = real1 - tempA;\n\t\tarray[index4] = real0 - real4;\n\t\tarray[index5] = tempB - imag3;\n\t\tarray[index7] = tempB + imag3;\n\t}\n\t\t\n\t// Handle remaining passes.\n\tfor (let pass: number = 3; pass < totalPasses; pass++) {\n\t\tconst subStride: number = 1 << pass;\n\t\tconst midSubStride: number = subStride >> 1;\n\t\tconst stride: number = subStride << 1;\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\n\t\t\tconst startIndexA: number = startIndex;\n\t\t\tconst startIndexB: number = startIndexA + subStride;\n\t\t\tconst stopIndex: number = startIndexB + subStride;\n\t\t\tconst realStartA: number = array[startIndexA];\n\t\t\tconst realStartB: number = array[startIndexB];\n\t\t\tarray[startIndexA] = realStartA + realStartB;\n\t\t\tarray[startIndexB] = realStartA - realStartB;\n\t\t\tlet c: number = cosIncrement;\n\t\t\tlet s: number = -sinIncrement;\n\t\t\tlet cPrev: number = 1.0;\n\t\t\tlet sPrev: number = 0.0;\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\n\t\t\t\tconst indexA0: number = startIndexA + index;\n\t\t\t\tconst indexA1: number = startIndexB - index;\n\t\t\t\tconst indexB0: number = startIndexB + index;\n\t\t\t\t\tconst indexB1: number = stopIndex   - index;\n\t\t\t\tconst real0: number = array[indexA0];\n\t\t\t\tconst imag0: number = array[indexA1];\n\t\t\t\tconst real1: number = array[indexB0];\n\t\t\t\tconst imag1: number = array[indexB1];\n\t\t\t\tconst tempA: number = real1 * c + imag1 * s;\n\t\t\t\tconst tempB: number = real1 * s - imag1 * c;\n\t\t\t\tarray[indexA0] = real0 + tempA;\n\t\t\t\tarray[indexA1] = real0 - tempA;\n\t\t\t\t\tarray[indexB0] =-imag0 - tempB;\n\t\t\t\tarray[indexB1] = imag0 - tempB;\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\n\t\t\t\tcPrev = c;\n\t\t\t\tsPrev = s;\n\t\t\t\tc = cTemp;\n\t\t\t\ts = sTemp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Computes the inverse Fourier transform from a specially formatted array of\n// scalar values. Elements 0 through N/2 are expected to be the real values of\n// the corresponding complex elements, representing cosine wave amplitudes in\n// ascending frequency, and elements N/2+1 through N-1 correspond to the\n// imaginary values, representing sine wave amplitudes in descending frequency.\n// Generates real-valued time-domain samples. Overwrites the input array.\nexport function inverseRealFourierTransform(array: NumberArray, fullArrayLength: number): void {\n\tconst totalPasses: number = countBits(fullArrayLength);\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\n\n\t// Perform all but the last few passes in reverse.\n\tfor (let pass: number = totalPasses - 1; pass >= 2; pass--) {\n\t\tconst subStride: number = 1 << pass;\n\t\tconst midSubStride: number = subStride >> 1;\n\t\tconst stride: number = subStride << 1;\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\n\t\t\t\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\n\t\t\tconst startIndexA: number = startIndex;\n\t\t\tconst midIndexA: number = startIndexA + midSubStride;\n\t\t\tconst startIndexB: number = startIndexA + subStride;\n\t\t\tconst midIndexB: number = startIndexB + midSubStride;\n\t\t\tconst stopIndex: number = startIndexB + subStride;\n\t\t\tconst realStartA: number = array[startIndexA];\n\t\t\tconst imagStartB: number = array[startIndexB];\n\t\t\tarray[startIndexA] = realStartA + imagStartB;\n\t\t\tarray[midIndexA] *= 2;\n\t\t\tarray[startIndexB] = realStartA - imagStartB;\n\t\t\tarray[midIndexB] *= 2;\n\t\t\tlet c: number = cosIncrement;\n\t\t\tlet s: number = -sinIncrement;\n\t\t\tlet cPrev: number = 1.0;\n\t\t\tlet sPrev: number = 0.0;\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\n\t\t\t\tconst indexA0: number = startIndexA + index;\n\t\t\t\tconst indexA1: number = startIndexB - index;\n\t\t\t\tconst indexB0: number = startIndexB + index;\n\t\t\t\t\tconst indexB1: number = stopIndex   - index;\n\t\t\t\tconst real0: number = array[indexA0];\n\t\t\t\tconst real1: number = array[indexA1];\n\t\t\t\tconst imag0: number = array[indexB0];\n\t\t\t\tconst imag1: number = array[indexB1];\n\t\t\t\tconst tempA: number = real0 - real1;\n\t\t\t\tconst tempB: number = imag0 + imag1;\n\t\t\t\tarray[indexA0] = real0 + real1;\n\t\t\t\tarray[indexA1] = imag1 - imag0;\n\t\t\t\tarray[indexB0] = tempA * c - tempB * s;\n\t\t\t\tarray[indexB1] = tempB * c + tempA * s;\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\n\t\t\t\tcPrev = c;\n\t\t\t\tsPrev = s;\n\t\t\t\tc = cTemp;\n\t\t\t\ts = sTemp;\n\t\t\t}\n\t\t}\n\t}\n\t/*\n\t// Commented out this block (and compensated with an extra pass above)\n\t// because it's slower in my testing so far.\n\t// Pass with stride 8.\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\n\t\tconst index1: number = index + 1;\n\t\tconst index2: number = index + 2;\n\t\tconst index3: number = index + 3;\n\t\tconst index4: number = index + 4;\n\t\tconst index5: number = index + 5;\n\t\tconst index6: number = index + 6;\n\t\tconst index7: number = index + 7;\n\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1];\n\t\tconst real2: number = array[index2];\n\t\tconst real3: number = array[index3];\n\t\tconst imag4: number = array[index4];\n\t\tconst imag5: number = array[index5];\n\t\tconst imag6: number = array[index6];\n\t\tconst imag7: number = array[index7];\n\t\tconst tempA: number = real1 - real3;\n\t\tconst tempB: number = imag5 + imag7;\n\t\tarray[index ] = real0 + imag4;\n\t\tarray[index1] = real1 + real3;\n\t\tarray[index2] = real2 * 2;\n\t\tarray[index3] = imag7 - imag5;\n\t\tarray[index4] = real0 - imag4;\n\t\tarray[index5] = (tempA + tempB) * sqrt2over2;\n\t\tarray[index6] = imag6 * 2;\n\t\tarray[index7] = (tempB - tempA) * sqrt2over2;\n\t}\n\t*/\n\t// The final passes with strides 4 and 2, combined into one loop.\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\n\t\tconst index1: number = index + 1;\n\t\tconst index2: number = index + 2;\n\t\tconst index3: number = index + 3;\n\t\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1] * 2;\n\t\tconst imag2: number = array[index2];\n\t\tconst imag3: number = array[index3] * 2;\n\t\tconst tempA: number = real0 + imag2;\n\t\tconst tempB: number = real0 - imag2;\n\t\t\tarray[index ] = tempA + real1;\n\t\tarray[index1] = tempA - real1;\n\t\tarray[index2] = tempB + imag3;\n\t\tarray[index3] = tempB - imag3;\n\t}\n\t\t\n\treverseIndexBits(array, fullArrayLength);\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nexport class Deque<T> {\n\tprivate _capacity: number = 1;\n\tprivate _buffer: Array<T | undefined> = [undefined];\n\tprivate _mask: number = 0;\n\tprivate _offset: number = 0;\n\tprivate _count: number = 0;\n\n\tpublic pushFront(element: T): void {\n\t\tif (this._count >= this._capacity) this._expandCapacity();\n\t\tthis._offset = (this._offset - 1) & this._mask;\n\t\tthis._buffer[this._offset] = element;\n\t\tthis._count++;\n\t}\n\tpublic pushBack(element: T): void {\n\t\tif (this._count >= this._capacity) this._expandCapacity();\n\t\tthis._buffer[(this._offset + this._count) & this._mask] = element;\n\t\tthis._count++;\n\t}\n\tpublic popFront(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\tconst element: T = <T>this._buffer[this._offset];\n\t\tthis._buffer[this._offset] = undefined;\n\t\tthis._offset = (this._offset + 1) & this._mask;\n\t\tthis._count--;\n\t\treturn element;\n\t}\n\tpublic popBack(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\tthis._count--;\n\t\tconst index: number = (this._offset + this._count) & this._mask;\n\t\tconst element: T = <T>this._buffer[index];\n\t\tthis._buffer[index] = undefined;\n\t\treturn element;\n\t}\n\tpublic peakFront(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\treturn <T>this._buffer[this._offset];\n\t}\n\tpublic peakBack(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\treturn <T>this._buffer[(this._offset + this._count - 1) & this._mask];\n\t}\n\tpublic count(): number {\n\t\treturn this._count;\n\t}\n\tpublic set(index: number, element: T): void {\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\n\t\tthis._buffer[(this._offset + index) & this._mask] = element;\n\t}\n\tpublic get(index: number): T {\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\n\t\treturn <T>this._buffer[(this._offset + index) & this._mask];\n\t}\n\tpublic remove(index: number): void {\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\n\t\tif (index <= (this._count >> 1)) {\n\t\t\twhile (index > 0) {\n\t\t\t\tthis.set(index, this.get(index - 1));\n\t\t\t\tindex--;\n\t\t\t}\n\t\t\tthis.popFront();\n\t\t} else {\n\t\t\tindex++;\n\t\t\twhile (index < this._count) {\n\t\t\t\tthis.set(index - 1, this.get(index));\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\tthis.popBack();\n\t\t}\n\t}\n\tprivate _expandCapacity(): void {\n\t\tif (this._capacity >= 0x40000000) throw new Error(\"Capacity too big.\");\n\t\tthis._capacity = this._capacity << 1;\n\t\tconst oldBuffer: Array<T | undefined> = this._buffer;\n\t\tconst newBuffer: Array<T | undefined> = new Array(this._capacity);\n\t\tconst size: number = this._count | 0;\n\t\tconst offset: number = this._offset | 0;\n\t\tfor (let i = 0; i < size; i++) {\n\t\t\tnewBuffer[i] = oldBuffer[(offset + i) & this._mask];\n\t\t}\n\t\tfor (let i = size; i < this._capacity; i++) {\n\t\t\tnewBuffer[i] = undefined;\n\t\t}\n\t\tthis._offset = 0;\n\t\tthis._buffer = newBuffer;\n\t\tthis._mask = this._capacity - 1;\n\t}\n}","//A simple events system for effectively direct links without actualy linking files or references\nclass EventManager { \n    private activeEvents:string[] = [];\n    private listeners:any = {};\n\n    constructor() {\n        this.activeEvents = [];\n        this.listeners = {};\n    }\n\n\n    public raise(eventType: string, eventData: any, extraEventData?: any): void {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        this.activeEvents.push(eventType);\n        for (let i: number = 0; i < this.listeners[eventType].length; i++) {\n            this.listeners[eventType][i](eventData,extraEventData)\n        }\n        this.activeEvents.pop();\n    }\n\n    public listen(eventType:string,callback:Function): void {\n        if (this.listeners[eventType] == undefined) {\n            this.listeners[eventType] = []\n        }\n        this.listeners[eventType].push(callback)\n    }\n\n    public unlisten(eventType: string, callback: Function): void {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        const lisen = this.listeners[eventType].indexOf(callback);\n        if (lisen != -1) {\n            this.listeners[eventType].splice(lisen, 1);\n        }\n    }\n    public unlistenAll(eventType: string): void {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        this.listeners[eventType]=[];\n    }\n}\n\nexport const events:EventManager = new EventManager()","/*\nThis file contains code to compute digital audio filter coefficients based on\nthe desired type, cutoff frequency, and other parameters. You can use these\ncoefficients to apply the filter to audio samples. It also contains code to\nanalyze these filters, which is useful for graphically displaying their effects.\n\nAll of the filters in this file are known as \"Infinite Impulse Response\" or IIR\nfilters, because older output samples contribute feedback to newer output\nsamples and thus contribute to all future samples, although typically filters\nare design to reduce the contribution of older samples over time.\n\nLow-pass filters aka high-cut filters preserve audio signals below the cutoff\nfrequency, and attenuate audio signals above the cutoff frequency. High-pass\nfilters aka low-cut filters are the reverse. All-pass filters do not affect the\nvolume of the signal at all but induce phase changes above the cutoff frequency.\nPeak/Notch filters maintain the volume on either side of the cutoff frequency,\nbut raise or lower the volume at that frequency. \n\nThe number of old samples used in the filter determines the \"order\" of the\nfilter. First-order filters generally have shallower slopes, and second-order\nfilters generally have steeper slopes and can be configured to \"resonate\",\nmeaning they have a louder peak at the cutoff frequency. This file contains\nfirst-order filters and second-order filters, meaning one or two older samples\nare involved, as well as the current input sample.\n\nThe class FilterCoefficients is defined lower in this file. You can use it to\nset up a first order filter like this:\n\n\tconst cutoffRadiansPerSample: number = 2 * Math.PI * cutoffHz / sampleRate;\n\tconst filter: FilterCoefficients = new FilterCoefficients();\n\tfilter.lowPass1stOrderButterworth(cutoffRadiansPerSample);\n\t// output sample coefficients are conventionally called a0, a1, etc. Note\n\t// that a[0] is typically normalized to 1.0 and need not be used directly.\n\tconst a: number[] = filter.a;\n\t// input sample coefficients are conventionally called b0, b1, etc\n\tconst b: number[] = filter.b;\n\t// filter input samples, x[0] is the most recent, x[1] is the previous one, etc.\n\tconst x: number[] = [0, 0, 0];\n\t// filter output samples, y[0] will be computed by the filter based on input\n\t// samples and older output samples.\n\tconst y: number[] = [0, 0, 0];\n\nThen to apply the first-order filter to samples inside a loop, using the current\ninput sample (x[0]) as well as previous input and output samples, do this:\n\n\t// Compute the next output sample y[0]:\n\ty[0] = b[0] * x[0] + b[1] * x[1] - a[1] * y[1];\n\t// Remember the input and output samples for next time:\n\tx[1] = x[0];\n\ty[1] = y[0];\n\n2nd order filters are similar, but have more parameters and require more old\nsamples:\n\n\t// Compute the next output sample y[0]:\n\ty[0] = b[0] * x[0] + b[1] * x[1] + b[2] * x[2] - a[1] * y[1] - a[2] * y[2];\n\t// Remember the input and output samples for next time:\n\tx[2] = x[1];\n\tx[1] = x[0];\n\ty[2] = y[1];\n\ty[1] = y[0];\n\nYou can compose multiple filters into a higher order filter, although doing so\nreduces the numerical stability of the filter:\n\n\tfilter3.combination(filter1, filter2);\n\t// filter3.order will equal: filter1.order + filter2.order\n\t// The number of coefficients in filter3.a and filter3.b will be: order + 1\n\nThis file also contains a class called FrequencyResponse. You can use it to\ndetermine how much gain or attenuation a filter would apply to sounds at a\nspecific input frequency, as well as the phase offset:\n\n\tconst inputRadians: number = 2 * Math.PI * cutoffHz / sampleRate;\n\tconst response: FrequencyResponse = new FrequencyResponse();\n\tresponse.analyze(filter, inputRadians);\n\tconst gainResponse = response.magnitude();\n\tconst phaseResponse = response.angle();\n\nThat's basically all you need to know to use this code, but I'll also explain\nhow the analysis works.\n\nA first-order digital IIR filter is ordinarily implemented in a form like this:\n\n\toutput = inputCoeff * input + prevInputCoeff * prevInput - prevOutputCoeff * prevOutput;\n\nIf we adopt standard naming conventions for audio filters, this same code would\ninstead look like:\n\n\t// x0 = current input, x1 = prevInput, y0 = current output, y1 = prevOutput\n\ty0 = b0*x0 + b1*x1 - a1*y1;\n\nLeaving behind the world of code for a moment and entering the world of algebra,\nwe can rewrite this equation by moving all the output terms to the left side,\nand we can add a coefficient to the y0 term called a0 (which is typically\nnormalized to 1.0, which is why I didn't bother including it until now):\n\n\ta0*y0 + a1*y1 = b0*x0 + b1*x1\n\nThis is known as the symmetrical form of the filter, and it will help us analyze\nthe impact of the filter on an input audio signal. Here's a lesson that helped\nme understand the symmetrical form:\nhttps://web.archive.org/web/20200626183458/http://123.physics.ucdavis.edu/week_5_files/filters/digital_filter.pdf\n\nThe end of that lesson introduces a concept called the \"delay operator\" which\nlooks like \"z^-1\", which (magically) turns a sample into the previous sample\nwhen you multiply them. For example:\n\n\tx0 * z^-1 = x1\n\nThe lesson doesn't explain how it actually works. Audio signals aren't always\npredictable, which means that you generally can't do math on a single sample to\ncompute what the previous sample was. However, some audio signals ARE\npredictable, such as pure sine waves. Fortunately, all audio signals can be\nbroken down into a sum of independent sine waves. We can pick one sine wave at a\ntime, and use it to analyze the filter's impact on waves at that frequency. In\npractice, this tells us what the filter will do to unpredictable input samples\nthat contain a partial sine wave at that frequency.\n\nTechnically, you can't just use a single sine wave sample to determine the\nprevious sine wave sample, because each possible value is passed going upwards\nand downwards once per period and the direction is ambigous. This is where we\nneed to move into the complex number domain, where the real and imaginary\ncomponents can provide enough information to compute the previous position on\nthe input signal. So now instead of talking about sine waves, we're talking\nabout waves where the imaginary component is a sine wave and the real component\nis a cosine wave at the same frequency. Together, they trace around a unit\ncircle in the complex domain, and each sample is just a consistent rotation\napplied to the previous sample. The \"delay operator\" described above, z^-1, is\nthis same rotation applied in reverse, and it can be computed as:\n\n\tz^-1 = cos(radiansPerSample) - i * sin(radiansPerSample)\n\nMath nerds may be interested to know that \"Euler's formula\" was used here, but\nexplaining what that means is probably beyond the scope of this documentation\naside from noting that a complex number on the unit circle represents a 2D\nrotation that you can apply via multiplication.\n\nNow we can rewrite the symmetrical form using the delay operator and algebra:\n\n\ta0*y0 + a1*y0*z^-1 = b0*x0 + b1*x0*z^-1\n\ty0 * (a0 + a1*z^-1) = x0 * (b0 + b1*z^-1)\n\ty0 = x0 * (b0 + b1*z^-1) / (a0 + a1*z^-1)\n\ty0 / x0 = (b0 + b1*z^-1) / (a0 + a1*z^-1)\n\nThat last equation expresses the relationship between the input and output\nsignals (y0/x0) in terms of the filter coefficients and delay operator. At this\npoint, the specific values of the input and output samples don't even matter!\nThis is called the \"transfer function\", and it's conventionally named \"H(z)\":\n\n\tH(z) = (b0 + b1*z^-1) / (a0 + a1*z^-1)\n\nIf you plug in actual filter coefficients and express the delay operators as\ncomplex numbers with the appropriate trigonometry functions, the transfer\nfunction can be computed and produces a complex number that represents the\nrelationship between the input and output signals, whose magnitude represents\nthe volume gain (or attenuation) of signals at that frequency, and whose angle\nrepresents how much phase shift is applied by the filter to signals at that\nfrequency.\n\n(Note that in order to compute the transfer function, you'll need to do\nsomething about the complex number in the denominator. It turns out you can turn\nthe denominator into a real number by multiplying both the numerator and\ndenominator by the complex conjugate of the denominator, which is just the\ndenominator with the imaginary component negated.)\n\nFinally, I'll list some of the links that helped me understand filters and\nprovided some of the algorithms I that use here.\n\nHere's where I found accurate 2nd order low-pass, high-pass, and high-shelf\ndigital filters:\nhttps://web.archive.org/web/20120531011328/http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt\n\nThis page is how I found a link to the cookbook article above. It claims these\nfilters are Butterworth filters:\nhttp://web.archive.org/web/20191213120120/https://crypto.stanford.edu/~blynn/sound/analog.html\n\nI found the first-order digital Butterworth filter coefficients at:\nhttps://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\n\nThis meta-paper helped me understand how to make 2nd order peak/notch filters:\nhttps://web.archive.org/web/20170706085655/https://www.thesounddesign.com/MIO/EQ-Coefficients.pdf\n\nBeepBox originally used simpler low-pass filters that I adapted from SFXR:\nhttps://www.drpetter.se/project_sfxr.html\nFor low cutoff frequencies, the simpler filters and the Butterworth filters are\nnearly identical, but when closer to the nyquist frequency the simpler filters\ncreate extra resonance.\n*/\n\nexport class FilterCoefficients {\n\tpublic readonly a: number[] = [1.0]; // output coefficients (negated, keep a[0]=1)\n\tpublic readonly b: number[] = [1.0]; // input coefficients\n\tpublic order: number = 0;\n\t\n\tpublic linearGain0thOrder(linearGain: number): void {\n\t\t//a[0] = 1.0; // a0 should always be normalized to 1.0, no need to assign it directly.\n\t\tthis.b[0] = linearGain;\n\t\tthis.order = 0;\n\t}\n\t\n\tpublic lowPass1stOrderButterworth(cornerRadiansPerSample: number): void {\n\t\t// First-order Butterworth low-pass filter according to:\n\t\t// https://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\n\t\t// A butterworth filter is one where the amplitude response is equal to:\n\t\t// 1 / √(1 + (freq / cutoffFreq)^(2 * order))\n\t\tconst g: number = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\n\t\tconst a0: number = 1.0 + g;\n\t\tthis.a[1] = (1.0 - g) / a0;\n\t\tthis.b[1] = this.b[0] = 1 / a0;\n\t\tthis.order = 1;\n\t}\n\t\n\tpublic lowPass1stOrderSimplified(cornerRadiansPerSample: number): void {\n\t\t// The output of this filter is nearly identical to the 1st order\n\t\t// Butterworth low-pass above, except if the cutoff is set to nyquist/3,\n\t\t// then the output is the same as the input, and if the cutoff is higher\n\t\t// than that, then the output actually resonates at high frequencies\n\t\t// instead of attenuating.\n\t\t// I'm guessing this filter was converted from analog to digital using\n\t\t// the \"matched z-transform\" method instead of the \"bilinear transform\"\n\t\t// method. The difference is that the bilinear transform warps\n\t\t// frequencies so that the lowpass response of zero at analogue ∞hz maps\n\t\t// to the digital nyquist frequency, whereas the matched z-transform\n\t\t// preserves the frequency of the filter response but also adds the\n\t\t// reflected response from above the nyquist frequency.\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n\t\tthis.a[1] = g - 1.0;\n\t\tthis.b[0] = g;\n\t\tthis.b[1] = 0.0;\n\t\t/*\n\t\t// Alternatively:\n\t\tconst g: number = 1.0 / (2.0 * Math.sin(cornerRadiansPerSample / 2));\n\t\tconst a0: number = g;\n\t\tthis.a[1] = (1.0 - g) / a0;\n\t\tthis.b[0] = 1.0 / a0;\n\t\tthis.b[1] = 0.0 / a0;\n\t\t*/\n\t\tthis.order = 1;\n\t}\n\t\n\tpublic highPass1stOrderButterworth(cornerRadiansPerSample: number): void {\n\t\t// First-order Butterworth high-pass filter according to:\n\t\t// https://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\n\t\tconst g: number = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\n\t\tconst a0: number = 1.0 + g;\n\t\tthis.a[1] = (1.0 - g) / a0;\n\t\tthis.b[0] = g / a0;\n\t\tthis.b[1] = -g / a0;\n\t\tthis.order = 1;\n\t}\n\t/*\n\tpublic highPass1stOrderSimplified(cornerRadiansPerSample: number): void {\n\t\t// The output of this filter is nearly identical to the 1st order\n\t\t// Butterworth high-pass above, except it resonates when the cutoff\n\t\t// appoaches the nyquist.\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n\t\tthis.a[1] = g - 1.0;\n\t\tthis.b[0] = 1.0;\n\t\tthis.b[1] = -1.0;\n\t\tthis.order = 1;\n\t}\n\t*/\n\tpublic highShelf1stOrder(cornerRadiansPerSample: number, shelfLinearGain: number): void {\n\t\t// I had trouble figuring this one out because I couldn't find any\n\t\t// online algorithms that I understood. There are 3 degrees of freedom\n\t\t// and I could narrow down a couple of them based on the desired gain at\n\t\t// DC and nyquist, but getting the cutoff frequency correct took a\n\t\t// little bit of trial and error in my attempts to interpret page 53 of\n\t\t// this chapter: http://www.music.mcgill.ca/~ich/classes/FiltersChap2.pdf\n\t\t// Obviously I don't fully understand the bilinear transform yet!\n\t\tconst tan: number = Math.tan(cornerRadiansPerSample * 0.5);\n\t\tconst sqrtGain: number = Math.sqrt(shelfLinearGain);\n\t\tconst g: number = (tan * sqrtGain - 1) / (tan * sqrtGain + 1.0);\n\t\tconst a0: number = 1.0;\n\t\tthis.a[1] = g / a0;\n\t\tthis.b[0] = (1.0 + g + shelfLinearGain * (1.0 - g)) / (2.0 * a0);\n\t\tthis.b[1] = (1.0 + g - shelfLinearGain * (1.0 - g)) / (2.0 * a0);\n\t\tthis.order = 1;\n\t}\n\t\n\tpublic allPass1stOrderInvertPhaseAbove(cornerRadiansPerSample: number): void {\n\t\tconst g: number = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\n\t\tthis.a[1] = g;\n\t\tthis.b[0] = g;\n\t\tthis.b[1] = 1.0;\n\t\tthis.order = 1;\n\t}\n\t\n\t/*\n\t// I haven't found a practical use for this version of the all pass filter.\n\t// It seems to create a weird subharmonic when used in a delay feedback loop.\n\tpublic allPass1stOrderInvertPhaseBelow(cornerRadiansPerSample: number): void {\n\t\tconst g: number = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\n\t\tthis.a[1] = g;\n\t\tthis.b[0] = -g;\n\t\tthis.b[1] = -1.0;\n\t\tthis.order = 1;\n\t}\n\t*/\n\t\n\tpublic allPass1stOrderFractionalDelay(delay: number) {\n\t\t// Very similar to allPass1stOrderInvertPhaseAbove, but configured\n\t\t// differently and for a different purpose! Useful for interpolating\n\t\t// between samples in a delay line.\n\t\tconst g: number = (1.0 - delay) / (1.0 + delay);\n\t\tthis.a[1] = g;\n\t\tthis.b[0] = g;\n\t\tthis.b[1] = 1.0;\n\t\tthis.order = 1;\n\t}\n\t\n\tpublic lowPass2ndOrderButterworth(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\t// This is Butterworth if peakLinearGain=1/√2 according to:\n\t\t// http://web.archive.org/web/20191213120120/https://crypto.stanford.edu/~blynn/sound/analog.html\n\t\t// An interesting property is that if peakLinearGain=1/16 then the\n\t\t// output resembles a first-order lowpass at a cutoff 4 octaves lower,\n\t\t// although it gets distorted near the nyquist.\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) / (2.0 * peakLinearGain);\n\t\tconst cos: number = Math.cos(cornerRadiansPerSample);\n\t\tconst a0: number = 1.0 + alpha;\n\t\tthis.a[1] = -2.0*cos / a0;\n\t\tthis.a[2] = (1 - alpha) / a0;\n\t\tthis.b[2] = this.b[0] = (1 - cos) / (2.0*a0);\n\t\tthis.b[1] = (1 - cos) / a0;\n\t\tthis.order = 2;\n\t}\n\t\n\tpublic lowPass2ndOrderSimplified(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\t// This filter is adapted from the one in the SFXR source code:\n\t\t// https://www.drpetter.se/project_sfxr.html\n\t\t// The output is nearly identical to the resonant Butterworth low-pass\n\t\t// above, except it resonates too much when the cutoff appoaches the\n\t\t// nyquist. If the resonance is set to zero and the cutoff is set to\n\t\t// nyquist/3, then the output is the same as the input.\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample / 2.0);\n\t\tconst filterResonance: number = 1.0 - 1.0 / (2.0 * peakLinearGain);\n\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - g);\n\t\tthis.a[1] = 2.0*g + (g - 1.0) * g*feedback - 2.0;\n\t\tthis.a[2] = (g - 1.0) * (g - g*feedback - 1.0);\n\t\tthis.b[0] = g*g;\n\t\tthis.b[1] = 0;\n\t\tthis.b[2] = 0;\n\t\tthis.order = 2;\n\t}\n\t\n\tpublic highPass2ndOrderButterworth(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) / (2 * peakLinearGain);\n\t\tconst cos: number = Math.cos(cornerRadiansPerSample);\n\t\tconst a0: number = 1.0 + alpha;\n\t\tthis.a[1] = -2.0*cos / a0;\n\t\tthis.a[2] = (1.0 - alpha) / a0;\n\t\tthis.b[2] = this.b[0] = (1.0 + cos) / (2.0*a0);\n\t\tthis.b[1] = -(1.0 + cos) / a0;\n\t\tthis.order = 2;\n\t}\n\t/*\n\tpublic highPass2ndOrderSimplified(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n\t\tconst filterResonance: number = 1.0 - 1.0 / (2.0 * peakLinearGain);\n\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - g);\n\t\tthis.a[1] = 2.0*g + (g - 1.0) * g*feedback - 2.0;\n\t\tthis.a[2] = (g - 1.0) * (g - g*feedback - 1.0);\n\t\tthis.b[0] = 1.0;\n\t\tthis.b[1] = -2.0;\n\t\tthis.b[2] = 1.0;\n\t\tthis.order = 2;\n\t}\n\t*/\n\tpublic highShelf2ndOrder(cornerRadiansPerSample: number, shelfLinearGain: number, slope: number): void {\n\t\tconst A: number = Math.sqrt(shelfLinearGain);\n\t\tconst c: number = Math.cos(cornerRadiansPerSample);\n\t\tconst Aplus: number = A + 1.0;\n\t\tconst Aminus: number = A - 1.0;\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) * 0.5 * Math.sqrt((Aplus / A) * (1.0 / slope - 1.0) + 2.0);\n\t\tconst sqrtA2Alpha: number = 2.0 * Math.sqrt(A) * alpha;\n\t\tconst a0: number =   (Aplus  - Aminus * c + sqrtA2Alpha);\n\t\tthis.a[1] =  2 *     (Aminus - Aplus  * c              ) / a0;\n\t\tthis.a[2] =          (Aplus  - Aminus * c - sqrtA2Alpha) / a0;\n\t\tthis.b[0] =      A * (Aplus  + Aminus * c + sqrtA2Alpha) / a0;\n\t\tthis.b[1] = -2 * A * (Aminus + Aplus  * c              ) / a0;\n\t\tthis.b[2] =      A * (Aplus  + Aminus * c - sqrtA2Alpha) / a0;\n\t\tthis.order = 2;\n\t}\n\n\tpublic peak2ndOrder(cornerRadiansPerSample: number, peakLinearGain: number, bandWidthScale: number): void {\n\t\tconst sqrtGain: number = Math.sqrt(peakLinearGain);\n\t\tconst bandWidth: number = bandWidthScale * cornerRadiansPerSample / (sqrtGain >= 1 ? sqrtGain : 1/sqrtGain);\n\t\t//const bandWidth: number = bandWidthScale * cornerRadiansPerSample / Math.max(sqrtGain, 1.0);\n\t\tconst alpha: number = Math.tan(bandWidth * 0.5);\n\t\tconst a0: number = 1.0 + alpha / sqrtGain;\n\t\tthis.b[0] = (1.0 + alpha * sqrtGain) / a0;\n\t\tthis.b[1] = this.a[1] = -2.0 * Math.cos(cornerRadiansPerSample) / a0;\n\t\tthis.b[2] = (1.0 - alpha * sqrtGain) / a0;\n\t\tthis.a[2] = (1.0 - alpha / sqrtGain) / a0;\n\t\tthis.order = 2;\n\t}\n\t/*\n\t// Create a higher order filter by combining two lower order filters.\n\t// However, making high order filters in this manner results in instability.\n\t// It is recommended to apply the 2nd order filters (biquads) in sequence instead.\n\tpublic combination(filter1: FilterCoefficients, filter2: FilterCoefficients): void {\n\t\tthis.order = filter1.order + filter2.order;\n\t\tfor (let i: number = 0; i <= this.order; i++) {\n\t\t\tthis.a[i] = 0.0;\n\t\t\tthis.b[i] = 0.0;\n\t\t}\n\t\tfor (let i: number = 0; i <= filter1.order; i++) {\n\t\t\tfor (let j: number = 0; j <= filter2.order; j++) {\n\t\t\t\tthis.a[i + j] += filter1.a[i] * filter2.a[j];\n\t\t\t\tthis.b[i + j] += filter1.b[i] * filter2.b[j];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic scaledDifference(other: FilterCoefficients, scale: number): void {\n\t\tif (other.order != this.order) throw new Error();\n\t\tfor (let i: number = 0; i <= this.order; i++) {\n\t\t\tthis.a[i] = (this.a[i] - other.a[i]) * scale;\n\t\t\tthis.b[i] = (this.b[i] - other.b[i]) * scale;\n\t\t}\n\t}\n\t\n\tpublic copy(other: FilterCoefficients): void {\n\t\tthis.order = other.order;\n\t\tfor (let i: number = 0; i <= this.order; i++) {\n\t\t\tthis.a[i] = other.a[i];\n\t\t\tthis.b[i] = other.b[i];\n\t\t}\n\t}\n\t*/\n}\n\nexport class FrequencyResponse {\n\tpublic real: number = 0.0;\n\tpublic imag: number = 0.0;\n\tpublic denom: number = 1.0;\n\t\n\tpublic analyze(filter: FilterCoefficients, radiansPerSample: number): void {\n\t\tthis.analyzeComplex(filter, Math.cos(radiansPerSample), Math.sin(radiansPerSample));\n\t}\n\t\n\tpublic analyzeComplex(filter: FilterCoefficients, real: number, imag: number): void {\n\t\tconst a: number[] = filter.a;\n\t\tconst b: number[] = filter.b;\n\t\tconst realZ1: number = real;\n\t\tconst imagZ1: number = -imag;\n\t\tlet realNum: number = b[0] + b[1] * realZ1;\n\t\tlet imagNum: number = b[1] * imagZ1;\n\t\tlet realDenom: number = 1.0 + a[1] * realZ1;\n\t\tlet imagDenom: number = a[1] * imagZ1;\n\t\tlet realZ: number = realZ1;\n\t\tlet imagZ: number = imagZ1;\n\t\tfor (let i: number = 2; i <= filter.order; i++) {\n\t\t\tconst realTemp: number = realZ * realZ1 - imagZ * imagZ1;\n\t\t\tconst imagTemp: number = realZ * imagZ1 + imagZ * realZ1;\n\t\t\trealZ = realTemp;\n\t\t\timagZ = imagTemp;\n\t\t\trealNum += b[i] * realZ;\n\t\t\timagNum += b[i] * imagZ;\n\t\t\trealDenom += a[i] * realZ;\n\t\t\timagDenom += a[i] * imagZ;\n\t\t}\n\t\tthis.denom = realDenom * realDenom + imagDenom * imagDenom;\n\t\tthis.real = realNum * realDenom + imagNum * imagDenom;\n\t\tthis.imag = imagNum * realDenom - realNum * imagDenom;\n\t}\n\t\n\tpublic magnitude(): number {\n\t\treturn Math.sqrt(this.real * this.real + this.imag * this.imag) / this.denom;\n\t}\n\t\n\tpublic angle(): number {\n\t\treturn Math.atan2(this.imag, this.real);\n\t}\n}\n\nexport class DynamicBiquadFilter {\n\tpublic a1: number = 0.0;\n\tpublic a2: number = 0.0;\n\tpublic b0: number = 1.0;\n\tpublic b1: number = 0.0;\n\tpublic b2: number = 0.0;\n\tpublic a1Delta: number = 0.0;\n\tpublic a2Delta: number = 0.0;\n\tpublic b0Delta: number = 0.0;\n\tpublic b1Delta: number = 0.0;\n\tpublic b2Delta: number = 0.0;\n\tpublic output1: number = 0.0;\n\tpublic output2: number = 0.0;\n\t\n\t// Some filter types are more stable when interpolating between coefficients\n\t// if the \"b\" coefficient interpolation is multiplicative. Don't enable this\n\t// for filter types where the \"b\" coefficients might change sign!\n\tpublic useMultiplicativeInputCoefficients: boolean = false;\n\t\n\tpublic resetOutput(): void {\n\t\tthis.output1 = 0.0;\n\t\tthis.output2 = 0.0;\n\t}\n\t\n\tpublic loadCoefficientsWithGradient(start: FilterCoefficients, end: FilterCoefficients, deltaRate: number, useMultiplicativeInputCoefficients: boolean): void {\n\t\tif (start.order != 2 || end.order != 2) throw new Error();\n\t\tthis.a1 = start.a[1];\n\t\tthis.a2 = start.a[2];\n\t\tthis.b0 = start.b[0];\n\t\tthis.b1 = start.b[1];\n\t\tthis.b2 = start.b[2];\n\t\tthis.a1Delta = (end.a[1] - start.a[1]) * deltaRate;\n\t\tthis.a2Delta = (end.a[2] - start.a[2]) * deltaRate;\n\t\tif (useMultiplicativeInputCoefficients) {\n\t\t\tthis.b0Delta = Math.pow(end.b[0] / start.b[0], deltaRate);\n\t\t\tthis.b1Delta = Math.pow(end.b[1] / start.b[1], deltaRate);\n\t\t\tthis.b2Delta = Math.pow(end.b[2] / start.b[2], deltaRate);\n\t\t} else {\n\t\t\tthis.b0Delta = (end.b[0] - start.b[0]) * deltaRate;\n\t\t\tthis.b1Delta = (end.b[1] - start.b[1]) * deltaRate;\n\t\t\tthis.b2Delta = (end.b[2] - start.b[2]) * deltaRate;\n\t\t}\n\t\tthis.useMultiplicativeInputCoefficients = useMultiplicativeInputCoefficients;\n\t}\n}\n// Filters are typically designed as analog filters first, then converted to\n// digital filters using one of two methods: the \"matched z-transform\" or the\n// \"bilinear transform\". The \"bilinear transform\" does a better job of\n// preserving the magnitudes of the frequency response, but warps the frequency\n// range such that the nyquist frequency of the digital filter (π) maps to the\n// infinity frequency of the analog filter. You can use the below functions to\n// manually perform this warping in either direction.\nexport function warpNyquistToInfinity(radians: number): number {\n\treturn 2.0 * Math.tan(radians * 0.5);\n}\nexport function warpInfinityToNyquist(radians: number): number {\n\treturn 2.0 * Math.atan(radians * 0.5);\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { startLoadingSample, sampleLoadingState, SampleLoadingState, sampleLoadEvents, SampleLoadedEvent, SampleLoadingStatus, loadBuiltInSamples, Dictionary, DictionaryArray, toNameMap, FilterType, SustainType, EnvelopeType, InstrumentType, EffectType, EnvelopeComputeIndex, Transition, Unison, Chord, Vibrato, Envelope, AutomationTarget, Config, getDrumWave, drawNoiseSpectrum, getArpeggioPitchIndex, performIntegralOld, getPulseWidthRatio, effectsIncludeTransition, effectsIncludeChord, effectsIncludePitchShift, effectsIncludeDetune, effectsIncludeVibrato, effectsIncludeNoteFilter, effectsIncludeDistortion, effectsIncludeBitcrusher, effectsIncludePanning, effectsIncludeChorus, effectsIncludeEcho, effectsIncludeReverb, OperatorWave } from \"./SynthConfig\";\nimport { Preset, EditorConfig } from \"../editor/EditorConfig\";\nimport { scaleElementsByFactor, inverseRealFourierTransform } from \"./FFT\";\nimport { Deque } from \"./Deque\";\nimport { events } from \"../global/Events\";\nimport { FilterCoefficients, FrequencyResponse, DynamicBiquadFilter, warpInfinityToNyquist } from \"./filtering\";\n\ndeclare global {\n    interface Window {\n        AudioContext: any;\n        webkitAudioContext: any;\n    }\n}\n\nconst epsilon: number = (1.0e-24); // For detecting and avoiding float denormals, which have poor performance.\n\n// For performance debugging:\n//let samplesAccumulated: number = 0;\n//let samplePerformance: number = 0;\n\nexport function clamp(min: number, max: number, val: number): number {\n    max = max - 1;\n    if (val <= max) {\n        if (val >= min) return val;\n        else return min;\n    } else {\n        return max;\n    }\n}\n\nfunction validateRange(min: number, max: number, val: number): number {\n    if (min <= val && val <= max) return val;\n    throw new Error(`Value ${val} not in range [${min}, ${max}]`);\n}\n\nexport function parseFloatWithDefault<T>(s: string, defaultValue: T): number | T {\n    let result: number | T = parseFloat(s);\n    if (Number.isNaN(result)) result = defaultValue;\n    return result;\n}\n\nexport function parseIntWithDefault<T>(s: string, defaultValue: T): number | T {\n    let result: number | T = parseInt(s);\n    if (Number.isNaN(result)) result = defaultValue;\n    return result;\n}\n\nfunction encode32BitNumber(buffer: number[], x: number): void {\n    // 0b11_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 5)) & 0x3]);\n    //      111111_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 4)) & 0x3f]);\n    //             111111_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 3)) & 0x3f]);\n    //                    111111_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 2)) & 0x3f]);\n    //                           111111_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 1)) & 0x3f]);\n    //                                  111111\n    buffer.push(base64IntToCharCode[(x >>> (6 * 0)) & 0x3f]);\n}\n\n// @TODO: This is error-prone, because the caller has to remember to increment\n// charIndex by 6 afterwards.\nfunction decode32BitNumber(compressed: string, charIndex: number): number {\n    let x: number = 0;\n    // 0b11_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 5);\n    //      111111_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 4);\n    //             111111_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 3);\n    //                    111111_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 2);\n    //                           111111_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 1);\n    //                                  111111\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 0);\n    return x;\n}\n\nfunction encodeUnisonSettings(buffer: number[], v: number, s: number, o: number, e: number, i: number): void {\n    buffer.push(base64IntToCharCode[v]);\n    \n    // logically this should be done with bitshifts... but I don't know how to do that, so\n    buffer.push(base64IntToCharCode[Number((s > 0))]);\n    let cleanS = Math.round(Math.abs(s) * 1000);\n    let cleanSDivided = Math.floor(cleanS / 63);\n    buffer.push(base64IntToCharCode[cleanS % 63], base64IntToCharCode[cleanSDivided % 63], base64IntToCharCode[Math.floor(cleanSDivided / 63)]);\n\n    buffer.push(base64IntToCharCode[Number((o > 0))]);\n    let cleanO = Math.round(Math.abs(o) * 1000);\n    let cleanODivided = Math.floor(cleanO / 63);\n    buffer.push(base64IntToCharCode[cleanO % 63], base64IntToCharCode[cleanODivided % 63], base64IntToCharCode[Math.floor(cleanODivided / 63)]);\n    \n    buffer.push(base64IntToCharCode[Number((e > 0))]);\n    let cleanE = Math.round(Math.abs(e) * 1000);\n    buffer.push(base64IntToCharCode[cleanE % 63], base64IntToCharCode[Math.floor(cleanE / 63)]);\n\n    buffer.push(base64IntToCharCode[Number((i > 0))]);\n    let cleanI = Math.round(Math.abs(i) * 1000);\n    buffer.push(base64IntToCharCode[cleanI % 63], base64IntToCharCode[Math.floor(cleanI / 63)]);\n}\n\nfunction convertLegacyKeyToKeyAndOctave(rawKeyIndex: number): [number, number] {\n    let key: number = clamp(0, Config.keys.length, rawKeyIndex);\n    let octave: number = 0;\n    // This conversion code depends on C through B being\n    // available as keys, of course.\n    if (rawKeyIndex === 12) {\n        // { name: \"C+\", isWhiteKey: false, basePitch: 24 }\n        key = 0;\n        octave = 1;\n    } else if (rawKeyIndex === 13) {\n        // { name: \"G- (actually F#-)\", isWhiteKey: false, basePitch: 6 }\n        key = 6;\n        octave = -1;\n    } else if (rawKeyIndex === 14) {\n        // { name: \"C-\", isWhiteKey: true, basePitch: 0 }\n        key = 0;\n        octave = -1;\n    } else if (rawKeyIndex === 15) {\n        // { name: \"oh no (F-)\", isWhiteKey: true, basePitch: 5 }\n        key = 5;\n        octave = -1;\n    }\n    return [key, octave];\n}\n\nconst enum CharCode {\n    SPACE = 32,\n    HASH = 35,\n    PERCENT = 37,\n    AMPERSAND = 38,\n    PLUS = 43,\n    DASH = 45,\n    DOT = 46,\n    NUM_0 = 48,\n    NUM_1 = 49,\n    NUM_2 = 50,\n    NUM_3 = 51,\n    NUM_4 = 52,\n    NUM_5 = 53,\n    NUM_6 = 54,\n    NUM_7 = 55,\n    NUM_8 = 56,\n    NUM_9 = 57,\n    EQUALS = 61,\n    A = 65,\n    B = 66,\n    C = 67,\n    D = 68,\n    E = 69,\n    F = 70,\n    G = 71,\n    H = 72,\n    I = 73,\n    J = 74,\n    K = 75,\n    L = 76,\n    M = 77,\n    N = 78,\n    O = 79,\n    P = 80,\n    Q = 81,\n    R = 82,\n    S = 83,\n    T = 84,\n    U = 85,\n    V = 86,\n    W = 87,\n    X = 88,\n    Y = 89,\n    Z = 90,\n    UNDERSCORE = 95,\n    a = 97,\n    b = 98,\n    c = 99,\n    d = 100,\n    e = 101,\n    f = 102,\n    g = 103,\n    h = 104,\n    i = 105,\n    j = 106,\n    k = 107,\n    l = 108,\n    m = 109,\n    n = 110,\n    o = 111,\n    p = 112,\n    q = 113,\n    r = 114,\n    s = 115,\n    t = 116,\n    u = 117,\n    v = 118,\n    w = 119,\n    x = 120,\n    y = 121,\n    z = 122,\n    LEFT_CURLY_BRACE = 123,\n    RIGHT_CURLY_BRACE = 125,\n}\n\nconst enum SongTagCode {\n    beatCount           = CharCode.a, // added in BeepBox URL version 2\n\tbars                = CharCode.b, // added in BeepBox URL version 2\n\tvibrato             = CharCode.c, // added in BeepBox URL version 2, DEPRECATED\n\tfadeInOut           = CharCode.d, // added in BeepBox URL version 3 for transition, switched to fadeInOut in 9\n\tloopEnd             = CharCode.e, // added in BeepBox URL version 2\n\teqFilter            = CharCode.f, // added in BeepBox URL version 3\n\tbarCount            = CharCode.g, // added in BeepBox URL version 3\n\tunison              = CharCode.h, // added in BeepBox URL version 2\n\tinstrumentCount     = CharCode.i, // added in BeepBox URL version 3\n\tpatternCount        = CharCode.j, // added in BeepBox URL version 3\n\tkey                 = CharCode.k, // added in BeepBox URL version 2\n\tloopStart           = CharCode.l, // added in BeepBox URL version 2\n\treverb              = CharCode.m, // added in BeepBox URL version 5, DEPRECATED\n\tchannelCount        = CharCode.n, // added in BeepBox URL version 6\n\tchannelOctave       = CharCode.o, // added in BeepBox URL version 3\n\tpatterns            = CharCode.p, // added in BeepBox URL version 2\n\teffects             = CharCode.q, // added in BeepBox URL version 7\n\trhythm              = CharCode.r, // added in BeepBox URL version 2\n\tscale               = CharCode.s, // added in BeepBox URL version 2\n\ttempo               = CharCode.t, // added in BeepBox URL version 2\n\tpreset              = CharCode.u, // added in BeepBox URL version 7\n\tvolume              = CharCode.v, // added in BeepBox URL version 2\n\twave                = CharCode.w, // added in BeepBox URL version 2\n\tsupersaw            = CharCode.x, // added in BeepBox URL version 9 ([UB] was used for chip wave but is now DEPRECATED)\n\tfilterResonance     = CharCode.y, // added in BeepBox URL version 7, DEPRECATED, [UB] repurposed for chip wave loop controls\n\tdrumsetEnvelopes    = CharCode.z, // added in BeepBox URL version 7 for filter envelopes, still used for drumset envelopes\n\talgorithm           = CharCode.A, // added in BeepBox URL version 6\n\tfeedbackAmplitude   = CharCode.B, // added in BeepBox URL version 6\n\tchord               = CharCode.C, // added in BeepBox URL version 7, DEPRECATED\n\tdetune              = CharCode.D, // added in JummBox URL version 3(?) for detune, DEPRECATED\n\tenvelopes           = CharCode.E, // added in BeepBox URL version 6 for FM operator envelopes, repurposed in 9 for general envelopes.\n\tfeedbackType        = CharCode.F, // added in BeepBox URL version 6\n\tarpeggioSpeed       = CharCode.G, // added in JummBox URL version 3 for arpeggioSpeed, DEPRECATED\n\tharmonics           = CharCode.H, // added in BeepBox URL version 7\n\tstringSustain       = CharCode.I, // added in BeepBox URL version 9\n//\t                    = CharCode.J,\n//\t                    = CharCode.K,\n\tpan                 = CharCode.L, // added between 8 and 9, DEPRECATED\n\tcustomChipWave      = CharCode.M, // added in JummBox URL version 1(?) for customChipWave\n\tsongTitle           = CharCode.N, // added in JummBox URL version 1(?) for songTitle\n\tlimiterSettings     = CharCode.O, // added in JummBox URL version 3(?) for limiterSettings\n\toperatorAmplitudes  = CharCode.P, // added in BeepBox URL version 6\n\toperatorFrequencies = CharCode.Q, // added in BeepBox URL version 6\n\toperatorWaves       = CharCode.R, // added in JummBox URL version 4 for operatorWaves\n\tspectrum            = CharCode.S, // added in BeepBox URL version 7\n\tstartInstrument     = CharCode.T, // added in BeepBox URL version 6\n\tchannelNames        = CharCode.U, // added in JummBox URL version 4(?) for channelNames\n\tfeedbackEnvelope    = CharCode.V, // added in BeepBox URL version 6, DEPRECATED\n\tpulseWidth          = CharCode.W, // added in BeepBox URL version 7\n\taliases             = CharCode.X, // added in JummBox URL version 4 for aliases, DEPRECATED, [UB] repurposed for PWM decimal offset (DEPRECATED as well)\n//\t                    = CharCode.Y,\n//\t                    = CharCode.Z,\n//\t                    = CharCode.NUM_0,\n//\t                    = CharCode.NUM_1,\n//\t                    = CharCode.NUM_2,\n//\t                    = CharCode.NUM_3,\n//\t                    = CharCode.NUM_4,\n//\t                    = CharCode.NUM_5,\n//\t                    = CharCode.NUM_6,\n//\t                    = CharCode.NUM_7,\n//\t                    = CharCode.NUM_8,\n//\t                    = CharCode.NUM_9,\n//\t                    = CharCode.DASH,\n//\t                    = CharCode.UNDERSCORE,\n\n}\n\nconst base64IntToCharCode: ReadonlyArray<number> = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];\nconst base64CharCodeToInt: ReadonlyArray<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0]; // 62 could be represented by either \"-\" or \".\" for historical reasons. New songs should use \"-\".\n\nclass BitFieldReader {\n    private _bits: number[] = [];\n    private _readIndex: number = 0;\n\n    constructor(source: string, startIndex: number, stopIndex: number) {\n        for (let i: number = startIndex; i < stopIndex; i++) {\n            const value: number = base64CharCodeToInt[source.charCodeAt(i)];\n            this._bits.push((value >> 5) & 0x1);\n            this._bits.push((value >> 4) & 0x1);\n            this._bits.push((value >> 3) & 0x1);\n            this._bits.push((value >> 2) & 0x1);\n            this._bits.push((value >> 1) & 0x1);\n            this._bits.push(value & 0x1);\n        }\n    }\n\n    public read(bitCount: number): number {\n        let result: number = 0;\n        while (bitCount > 0) {\n            result = result << 1;\n            result += this._bits[this._readIndex++];\n            bitCount--;\n        }\n        return result;\n    }\n\n    public readLongTail(minValue: number, minBits: number): number {\n        let result: number = minValue;\n        let numBits: number = minBits;\n        while (this._bits[this._readIndex++]) {\n            result += 1 << numBits;\n            numBits++;\n        }\n        while (numBits > 0) {\n            numBits--;\n            if (this._bits[this._readIndex++]) {\n                result += 1 << numBits;\n            }\n        }\n        return result;\n    }\n\n    public readPartDuration(): number {\n        return this.readLongTail(1, 3);\n    }\n\n    public readLegacyPartDuration(): number {\n        return this.readLongTail(1, 2);\n    }\n\n    public readPinCount(): number {\n        return this.readLongTail(1, 0);\n    }\n\n    public readPitchInterval(): number {\n        if (this.read(1)) {\n            return -this.readLongTail(1, 3);\n        } else {\n            return this.readLongTail(1, 3);\n        }\n    }\n}\n\nclass BitFieldWriter {\n    private _index: number = 0;\n    private _bits: number[] = [];\n\n    public clear() {\n        this._index = 0;\n    }\n\n    public write(bitCount: number, value: number): void {\n        bitCount--;\n        while (bitCount >= 0) {\n            this._bits[this._index++] = (value >>> bitCount) & 1;\n            bitCount--;\n        }\n    }\n\n    public writeLongTail(minValue: number, minBits: number, value: number): void {\n        if (value < minValue) throw new Error(\"value out of bounds\");\n        value -= minValue;\n        let numBits: number = minBits;\n        while (value >= (1 << numBits)) {\n            this._bits[this._index++] = 1;\n            value -= 1 << numBits;\n            numBits++;\n        }\n        this._bits[this._index++] = 0;\n        while (numBits > 0) {\n            numBits--;\n            this._bits[this._index++] = (value >>> numBits) & 1;\n        }\n    }\n\n    public writePartDuration(value: number): void {\n        this.writeLongTail(1, 3, value);\n    }\n\n    public writePinCount(value: number): void {\n        this.writeLongTail(1, 0, value);\n    }\n\n    public writePitchInterval(value: number): void {\n        if (value < 0) {\n            this.write(1, 1); // sign\n            this.writeLongTail(1, 3, -value);\n        } else {\n            this.write(1, 0); // sign\n            this.writeLongTail(1, 3, value);\n        }\n    }\n\n    public concat(other: BitFieldWriter): void {\n        for (let i: number = 0; i < other._index; i++) {\n            this._bits[this._index++] = other._bits[i];\n        }\n    }\n\n    public encodeBase64(buffer: number[]): number[] {\n\n        for (let i: number = 0; i < this._index; i += 6) {\n            const value: number = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];\n            buffer.push(base64IntToCharCode[value]);\n        }\n        return buffer;\n    }\n\n    public lengthBase64(): number {\n        return Math.ceil(this._index / 6);\n    }\n}\n\nexport interface NotePin {\n    interval: number;\n    time: number;\n    size: number;\n}\n\nexport function makeNotePin(interval: number, time: number, size: number): NotePin {\n    return { interval: interval, time: time, size: size };\n}\n\nexport class Note {\n    public pitches: number[];\n    public pins: NotePin[];\n    public start: number;\n    public end: number;\n    public continuesLastPattern: boolean;\n\n    public constructor(pitch: number, start: number, end: number, size: number, fadeout: boolean = false) {\n        this.pitches = [pitch];\n        this.pins = [makeNotePin(0, 0, size), makeNotePin(0, end - start, fadeout ? 0 : size)];\n        this.start = start;\n        this.end = end;\n        this.continuesLastPattern = false;\n    }\n\n    public pickMainInterval(): number {\n        let longestFlatIntervalDuration: number = 0;\n        let mainInterval: number = 0;\n        for (let pinIndex: number = 1; pinIndex < this.pins.length; pinIndex++) {\n            const pinA: NotePin = this.pins[pinIndex - 1];\n            const pinB: NotePin = this.pins[pinIndex];\n            if (pinA.interval == pinB.interval) {\n                const duration: number = pinB.time - pinA.time;\n                if (longestFlatIntervalDuration < duration) {\n                    longestFlatIntervalDuration = duration;\n                    mainInterval = pinA.interval;\n                }\n            }\n        }\n        if (longestFlatIntervalDuration == 0) {\n            let loudestSize: number = 0;\n            for (let pinIndex: number = 0; pinIndex < this.pins.length; pinIndex++) {\n                const pin: NotePin = this.pins[pinIndex];\n                if (loudestSize < pin.size) {\n                    loudestSize = pin.size;\n                    mainInterval = pin.interval;\n                }\n            }\n        }\n        return mainInterval;\n    }\n\n    public clone(): Note {\n        const newNote: Note = new Note(-1, this.start, this.end, 3);\n        newNote.pitches = this.pitches.concat();\n        newNote.pins = [];\n        for (const pin of this.pins) {\n            newNote.pins.push(makeNotePin(pin.interval, pin.time, pin.size));\n        }\n        newNote.continuesLastPattern = this.continuesLastPattern;\n        return newNote;\n    }\n\n    public getEndPinIndex(part: number): number {\n        let endPinIndex: number;\n        for (endPinIndex = 1; endPinIndex < this.pins.length - 1; endPinIndex++) {\n            if (this.pins[endPinIndex].time + this.start > part) break;\n        }\n        return endPinIndex;\n    }\n}\n\nexport class Pattern {\n    public notes: Note[] = [];\n    public readonly instruments: number[] = [0];\n\n    public cloneNotes(): Note[] {\n        const result: Note[] = [];\n        for (const note of this.notes) {\n            result.push(note.clone());\n        }\n        return result;\n    }\n\n    public reset(): void {\n        this.notes.length = 0;\n        this.instruments[0] = 0;\n        this.instruments.length = 1;\n    }\n\n    public toJsonObject(song: Song, channel: Channel, isModChannel: boolean): any {\n        const noteArray: Object[] = [];\n        for (const note of this.notes) {\n            // Only one ins per pattern is enforced in mod channels.\n            let instrument: Instrument = channel.instruments[this.instruments[0]];\n            let mod: number = Math.max(0, Config.modCount - note.pitches[0] - 1);\n            let volumeCap: number = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\n            const pointArray: Object[] = [];\n            for (const pin of note.pins) {\n                let useVol: number = isModChannel ? Math.round(pin.size) : Math.round(pin.size * 100 / volumeCap);\n                pointArray.push({\n                    \"tick\": (pin.time + note.start) * Config.rhythms[song.rhythm].stepsPerBeat / Config.partsPerBeat,\n                    \"pitchBend\": pin.interval,\n                    \"volume\": useVol,\n                    \"forMod\": isModChannel,\n                });\n            }\n\n            const noteObject: any = {\n                \"pitches\": note.pitches,\n                \"points\": pointArray,\n            };\n            if (note.start == 0) {\n                noteObject[\"continuesLastPattern\"] = note.continuesLastPattern;\n            }\n            noteArray.push(noteObject);\n        }\n\n        const patternObject: any = { \"notes\": noteArray };\n        if (song.patternInstruments) {\n            patternObject[\"instruments\"] = this.instruments.map(i => i + 1);\n        }\n        return patternObject;\n    }\n\n    public fromJsonObject(patternObject: any, song: Song, channel: Channel, importedPartsPerBeat: number, isNoiseChannel: boolean, isModChannel: boolean): void {\n        if (song.patternInstruments) {\n            if (Array.isArray(patternObject[\"instruments\"])) {\n                const instruments: any[] = patternObject[\"instruments\"];\n                const instrumentCount: number = clamp(Config.instrumentCountMin, song.getMaxInstrumentsPerPatternForChannel(channel) + 1, instruments.length);\n                for (let j: number = 0; j < instrumentCount; j++) {\n                    this.instruments[j] = clamp(0, channel.instruments.length, (instruments[j] | 0) - 1);\n                }\n                this.instruments.length = instrumentCount;\n            } else {\n                this.instruments[0] = clamp(0, channel.instruments.length, (patternObject[\"instrument\"] | 0) - 1);\n                this.instruments.length = 1;\n            }\n        }\n\n        if (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\n            const maxNoteCount: number = Math.min(song.beatsPerBar * Config.partsPerBeat * (isModChannel ? Config.modCount : 1), patternObject[\"notes\"].length >>> 0);\n\n            // TODO: Consider supporting notes specified in any timing order, sorting them and truncating as necessary.\n            //let tickClock: number = 0;\n            for (let j: number = 0; j < patternObject[\"notes\"].length; j++) {\n                if (j >= maxNoteCount) break;\n\n                const noteObject = patternObject[\"notes\"][j];\n                if (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\n                    continue;\n                }\n\n                const note: Note = new Note(0, 0, 0, 0);\n                note.pitches = [];\n                note.pins = [];\n\n                for (let k: number = 0; k < noteObject[\"pitches\"].length; k++) {\n                    const pitch: number = noteObject[\"pitches\"][k] | 0;\n                    if (note.pitches.indexOf(pitch) != -1) continue;\n                    note.pitches.push(pitch);\n                    if (note.pitches.length >= Config.maxChordSize) break;\n                }\n                if (note.pitches.length < 1) continue;\n\n                //let noteClock: number = tickClock;\n                let startInterval: number = 0;\n                for (let k: number = 0; k < noteObject[\"points\"].length; k++) {\n                    const pointObject: any = noteObject[\"points\"][k];\n                    if (pointObject == undefined || pointObject[\"tick\"] == undefined) continue;\n                    const interval: number = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\n\n                    const time: number = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\n\n                    let instrument: Instrument = channel.instruments[this.instruments[0]];\n                    let mod: number = Math.max(0, Config.modCount - note.pitches[0] - 1);\n\n                    // Only one instrument per pattern allowed in mod channels.\n                    let volumeCap: number = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\n\n                    // The strange volume formula used for notes is not needed for mods. Some rounding errors were possible.\n                    // A \"forMod\" signifier was added to new JSON export to detect when the higher precision export was used in a file.\n                    let size: number;\n                    if (pointObject[\"volume\"] == undefined) {\n                        size = volumeCap;\n                    } else if (pointObject[\"forMod\"] == undefined) {\n                        size = Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\n                    }\n                    else {\n                        size = ((pointObject[\"forMod\"] | 0) > 0) ? Math.round(pointObject[\"volume\"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\n                    }\n\n                    if (time > song.beatsPerBar * Config.partsPerBeat) continue;\n                    if (note.pins.length == 0) {\n                        //if (time < noteClock) continue;\n                        note.start = time;\n                        startInterval = interval;\n                    } else {\n                        //if (time <= noteClock) continue;\n                    }\n                    //noteClock = time;\n\n                    note.pins.push(makeNotePin(interval - startInterval, time - note.start, size));\n                }\n                if (note.pins.length < 2) continue;\n\n                note.end = note.pins[note.pins.length - 1].time + note.start;\n\n                const maxPitch: number = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;\n                let lowestPitch: number = maxPitch;\n                let highestPitch: number = 0;\n                for (let k: number = 0; k < note.pitches.length; k++) {\n                    note.pitches[k] += startInterval;\n                    if (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\n                        note.pitches.splice(k, 1);\n                        k--;\n                    }\n                    if (note.pitches[k] < lowestPitch) lowestPitch = note.pitches[k];\n                    if (note.pitches[k] > highestPitch) highestPitch = note.pitches[k];\n                }\n                if (note.pitches.length < 1) continue;\n\n                for (let k: number = 0; k < note.pins.length; k++) {\n                    const pin: NotePin = note.pins[k];\n                    if (pin.interval + lowestPitch < 0) pin.interval = -lowestPitch;\n                    if (pin.interval + highestPitch > maxPitch) pin.interval = maxPitch - highestPitch;\n                    if (k >= 2) {\n                        if (pin.interval == note.pins[k - 1].interval &&\n                            pin.interval == note.pins[k - 2].interval &&\n                            pin.size == note.pins[k - 1].size &&\n                            pin.size == note.pins[k - 2].size) {\n                            note.pins.splice(k - 1, 1);\n                            k--;\n                        }\n                    }\n                }\n\n                if (note.start == 0) {\n                    note.continuesLastPattern = (noteObject[\"continuesLastPattern\"] === true);\n                } else {\n                    note.continuesLastPattern = false;\n                }\n\n                this.notes.push(note);\n            }\n        }\n    }\n}\n\nexport class Operator {\n    public frequency: number = 4;\n    public amplitude: number = 0;\n    public waveform: number = 0;\n    public pulseWidth: number = 0.5;\n\n    constructor(index: number) {\n        this.reset(index);\n    }\n\n    public reset(index: number): void {\n        this.frequency = 4; //defualt to 1x\n        this.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\n        this.waveform = 0;\n        this.pulseWidth = 5;\n    }\n\n    public copy(other: Operator): void {\n        this.frequency = other.frequency;\n        this.amplitude = other.amplitude;\n        this.waveform = other.waveform;\n        this.pulseWidth = other.pulseWidth;\n    }\n}\n\nexport class CustomAlgorithm {\n    public name: string = \"\";\n    public carrierCount: number = 0;\n    public modulatedBy: number[][] = [[], [], [], [], [], []];\n    public associatedCarrier: number[] = [];\n\n    constructor(){\n        this.fromPreset(1);\n    }\n\n    public set(carriers: number, modulation: number[][]) {\n        this.reset();\n        this.carrierCount = carriers;\n        for (let i = 0; i < this.modulatedBy.length; i++) {\n            this.modulatedBy[i] = modulation[i];\n            if (i < carriers) {\n                this.associatedCarrier[i] = i+1;\n            }\n            this.name += (i+1);\n            for (let j = 0; j < modulation[i].length;j++) {\n                this.name += modulation[i][j];\n                if (modulation[i][j] > carriers-1) {\n                    this.associatedCarrier[modulation[i][j] - 1] = i + 1;\n                }\n                this.name += \",\";\n            }\n            if (i < carriers) {\n                this.name += \"|\";\n            } else {\n                this.name += \".\";\n            }\n        }\n    }\n\n    public reset(): void {\n        this.name = \"\"\n        this.carrierCount = 1;\n        this.modulatedBy = [[2, 3, 4, 5, 6], [], [], [], [], []];\n        this.associatedCarrier = [1, 1, 1, 1, 1, 1];\n    }\n\n    public copy(other: CustomAlgorithm): void {\n        this.name = other.name;\n        this.carrierCount = other.carrierCount;\n        this.modulatedBy = other.modulatedBy;\n        this.associatedCarrier = other.associatedCarrier;\n    }\n\n    public fromPreset(other: number): void {\n        this.reset();\n        let preset = Config.algorithms6Op[other]\n        this.name = preset.name;\n        this.carrierCount = preset.carrierCount;\n        for (var i = 0; i < preset.modulatedBy.length; i++) {\n            this.modulatedBy[i] = Array.from(preset.modulatedBy[i]);\n            this.associatedCarrier[i] = preset.associatedCarrier[i];\n        }\n    }\n}\n\nexport class CustomFeedBack { //feels redunant\n    public name: string = \"\";\n    public indices: number[][] = [[], [], [], [], [], []];\n\n    constructor() {\n        this.fromPreset(1);\n    }\n\n    public set(inIndices: number[][]) {\n        this.reset();\n        for (let i = 0; i < this.indices.length; i++) {\n            this.indices[i] = inIndices[i];\n            for (let j = 0; j < inIndices[i].length; j++) {\n                this.name += inIndices[i][j];\n                this.name += \",\";\n            }\n            this.name += \".\";\n        }\n    }\n\n    public reset(): void {\n        this.reset;\n        this.name = \"\";\n        this.indices = [[1], [], [], [], [], []];\n    }\n\n    public copy(other: CustomFeedBack): void {\n        this.name = other.name;\n        this.indices = other.indices;\n    }\n\n    public fromPreset(other: number): void {\n        this.reset();\n        let preset = Config.feedbacks6Op[other]\n        for (var i = 0; i < preset.indices.length; i++) {\n            this.indices[i] = Array.from(preset.indices[i]);\n            for (let j = 0; j < preset.indices[i].length; j++) {\n                this.name += preset.indices[i][j];\n                this.name += \",\";\n            }\n            this.name += \".\";\n        }\n    }\n}\n\nexport class SpectrumWave {\n    public spectrum: number[] = [];\n    public hash: number = -1;\n\n    constructor(isNoiseChannel: boolean) {\n        this.reset(isNoiseChannel);\n    }\n\n    public reset(isNoiseChannel: boolean): void {\n        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n            if (isNoiseChannel) {\n                this.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\n            } else {\n                const isHarmonic: boolean = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;\n                this.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\n            }\n        }\n        this.markCustomWaveDirty();\n    }\n\n    public markCustomWaveDirty(): void {\n        const hashMult: number = Synth.fittingPowerOfTwo(Config.spectrumMax + 2) - 1;\n        let hash: number = 0;\n        for (const point of this.spectrum) hash = ((hash * hashMult) + point) >>> 0;\n        this.hash = hash;\n    }\n}\n\nclass SpectrumWaveState {\n    public wave: Float32Array | null = null;\n    private _hash: number = -1;\n\n    public getCustomWave(settings: SpectrumWave, lowestOctave: number): Float32Array {\n        if (this._hash == settings.hash) return this.wave!;\n        this._hash = settings.hash;\n\n        const waveLength: number = Config.spectrumNoiseLength;\n        if (this.wave == null || this.wave.length != waveLength + 1) {\n            this.wave = new Float32Array(waveLength + 1);\n        }\n        const wave: Float32Array = this.wave;\n\n        for (let i: number = 0; i < waveLength; i++) {\n            wave[i] = 0;\n        }\n\n        const highestOctave: number = 14;\n        const falloffRatio: number = 0.25;\n        // Nudge the 2/7 and 4/7 control points so that they form harmonic intervals.\n        const pitchTweak: number[] = [0, 1 / 7, Math.log2(5 / 4), 3 / 7, Math.log2(3 / 2), 5 / 7, 6 / 7];\n        function controlPointToOctave(point: number): number {\n            return lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\n        }\n\n        let combinedAmplitude: number = 1;\n        for (let i: number = 0; i < Config.spectrumControlPoints + 1; i++) {\n            const value1: number = (i <= 0) ? 0 : settings.spectrum[i - 1];\n            const value2: number = (i >= Config.spectrumControlPoints) ? settings.spectrum[Config.spectrumControlPoints - 1] : settings.spectrum[i];\n            const octave1: number = controlPointToOctave(i - 1);\n            let octave2: number = controlPointToOctave(i);\n            if (i >= Config.spectrumControlPoints) octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\n            if (value1 == 0 && value2 == 0) continue;\n\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\n        }\n        if (settings.spectrum[Config.spectrumControlPoints - 1] > 0) {\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, settings.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\n        }\n\n        inverseRealFourierTransform(wave, waveLength);\n        scaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\n\n        // Duplicate the first sample at the end for easier wrap-around interpolation.\n        wave[waveLength] = wave[0];\n\n        return wave;\n    }\n}\n\nexport class HarmonicsWave {\n    public harmonics: number[] = [];\n    public hash: number = -1;\n\n    constructor() {\n        this.reset();\n    }\n\n    public reset(): void {\n        for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n            this.harmonics[i] = 0;\n        }\n        this.harmonics[0] = Config.harmonicsMax;\n        this.harmonics[3] = Config.harmonicsMax;\n        this.harmonics[6] = Config.harmonicsMax;\n        this.markCustomWaveDirty();\n    }\n\n    public markCustomWaveDirty(): void {\n        const hashMult: number = Synth.fittingPowerOfTwo(Config.harmonicsMax + 2) - 1;\n        let hash: number = 0;\n        for (const point of this.harmonics) hash = ((hash * hashMult) + point) >>> 0;\n        this.hash = hash;\n    }\n}\n\nclass HarmonicsWaveState {\n    public wave: Float32Array | null = null;\n    private _hash: number = -1;\n    private _generatedForType: InstrumentType;\n\n    public getCustomWave(settings: HarmonicsWave, instrumentType: InstrumentType): Float32Array {\n        if (this._hash == settings.hash && this._generatedForType == instrumentType) return this.wave!;\n        this._hash = settings.hash;\n        this._generatedForType = instrumentType;\n\n        const harmonicsRendered: number = (instrumentType == InstrumentType.pickedString) ? Config.harmonicsRenderedForPickedString : Config.harmonicsRendered;\n\n        const waveLength: number = Config.harmonicsWavelength;\n        const retroWave: Float32Array = getDrumWave(0, null, null);\n\n        if (this.wave == null || this.wave.length != waveLength + 1) {\n            this.wave = new Float32Array(waveLength + 1);\n        }\n        const wave: Float32Array = this.wave;\n\n        for (let i: number = 0; i < waveLength; i++) {\n            wave[i] = 0;\n        }\n\n        const overallSlope: number = -0.25;\n        let combinedControlPointAmplitude: number = 1;\n\n        for (let harmonicIndex: number = 0; harmonicIndex < harmonicsRendered; harmonicIndex++) {\n            const harmonicFreq: number = harmonicIndex + 1;\n            let controlValue: number = harmonicIndex < Config.harmonicsControlPoints ? settings.harmonics[harmonicIndex] : settings.harmonics[Config.harmonicsControlPoints - 1];\n            if (harmonicIndex >= Config.harmonicsControlPoints) {\n                controlValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (harmonicsRendered - Config.harmonicsControlPoints);\n            }\n            const normalizedValue: number = controlValue / Config.harmonicsMax;\n            let amplitude: number = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\n            if (harmonicIndex < Config.harmonicsControlPoints) {\n                combinedControlPointAmplitude += amplitude;\n            }\n            amplitude *= Math.pow(harmonicFreq, overallSlope);\n\n            // Multiply all the sine wave amplitudes by 1 or -1 based on the LFSR\n            // retro wave (effectively random) to avoid egregiously tall spikes.\n            amplitude *= retroWave[harmonicIndex + 589];\n\n            wave[waveLength - harmonicFreq] = amplitude;\n        }\n\n        inverseRealFourierTransform(wave, waveLength);\n\n        // Limit the maximum wave amplitude.\n        const mult: number = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\n        for (let i: number = 0; i < wave.length; i++) wave[i] *= mult;\n\n        performIntegralOld(wave);\n\n        // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\n        wave[waveLength] = wave[0];\n\n        return wave;\n    }\n}\n\nexport class FilterControlPoint {\n    public freq: number = 0;\n    public gain: number = Config.filterGainCenter;\n    public type: FilterType = FilterType.peak;\n\n    public set(freqSetting: number, gainSetting: number): void {\n        this.freq = freqSetting;\n        this.gain = gainSetting;\n    }\n\n    public getHz(): number {\n        return FilterControlPoint.getHzFromSettingValue(this.freq);\n    }\n\n    public static getHzFromSettingValue(value: number): number {\n        return Config.filterFreqReferenceHz * Math.pow(2.0, (value - Config.filterFreqReferenceSetting) * Config.filterFreqStep);\n    }\n    public static getSettingValueFromHz(hz: number): number {\n        return Math.log2(hz / Config.filterFreqReferenceHz) / Config.filterFreqStep + Config.filterFreqReferenceSetting;\n    }\n    public static getRoundedSettingValueFromHz(hz: number): number {\n        return Math.max(0, Math.min(Config.filterFreqRange - 1, Math.round(FilterControlPoint.getSettingValueFromHz(hz))));\n    }\n\n    public getLinearGain(peakMult: number = 1.0): number {\n        const power: number = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\n        const neutral: number = (this.type == FilterType.peak) ? 0.0 : -0.5;\n        const interpolatedPower: number = neutral + (power - neutral) * peakMult;\n        return Math.pow(2.0, interpolatedPower);\n    }\n    public static getRoundedSettingValueFromLinearGain(linearGain: number): number {\n        return Math.max(0, Math.min(Config.filterGainRange - 1, Math.round(Math.log2(linearGain) / Config.filterGainStep + Config.filterGainCenter)));\n    }\n\n    public toCoefficients(filter: FilterCoefficients, sampleRate: number, freqMult: number = 1.0, peakMult: number = 1.0): void {\n        const cornerRadiansPerSample: number = 2.0 * Math.PI * Math.max(Config.filterFreqMinHz, Math.min(Config.filterFreqMaxHz, freqMult * this.getHz())) / sampleRate;\n        const linearGain: number = this.getLinearGain(peakMult);\n        switch (this.type) {\n            case FilterType.lowPass:\n                filter.lowPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\n                break;\n            case FilterType.highPass:\n                filter.highPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\n                break;\n            case FilterType.peak:\n                filter.peak2ndOrder(cornerRadiansPerSample, linearGain, 1.0);\n                break;\n            default:\n                throw new Error();\n        }\n    }\n\n    public getVolumeCompensationMult(): number {\n        const octave: number = (this.freq - Config.filterFreqReferenceSetting) * Config.filterFreqStep;\n        const gainPow: number = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\n        switch (this.type) {\n            case FilterType.lowPass:\n                const freqRelativeTo8khz: number = Math.pow(2.0, octave) * Config.filterFreqReferenceHz / 8000.0;\n                // Reverse the frequency warping from importing legacy simplified filters to imitate how the legacy filter cutoff setting affected volume.\n                const warpedFreq: number = (Math.sqrt(1.0 + 4.0 * freqRelativeTo8khz) - 1.0) / 2.0;\n                const warpedOctave: number = Math.log2(warpedFreq);\n                return Math.pow(0.5, 0.2 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, Math.max(-3.0, 0.595 * warpedOctave + 0.35 * Math.min(0.0, gainPow + 1.0))));\n            case FilterType.highPass:\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, 0.3 * (-octave - Math.log2(Config.filterFreqReferenceHz / 125.0)) + 0.2 * Math.min(0.0, gainPow + 1.0)));\n            case FilterType.peak:\n                const distanceFromCenter: number = octave + Math.log2(Config.filterFreqReferenceHz / 2000.0);\n                const freqLoudness: number = Math.pow(1.0 / (1.0 + Math.pow(distanceFromCenter / 3.0, 2.0)), 2.0);\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow) + 0.1 * freqLoudness * Math.min(0.0, gainPow));\n            default:\n                throw new Error();\n        }\n    }\n}\n\nexport class FilterSettings {\n    public readonly controlPoints: FilterControlPoint[] = [];\n    public controlPointCount: number = 0;\n\n    constructor() {\n        this.reset();\n    }\n\n    reset(): void {\n        this.controlPointCount = 0;\n    }\n\n    addPoint(type: FilterType, freqSetting: number, gainSetting: number): void {\n        let controlPoint: FilterControlPoint;\n        if (this.controlPoints.length <= this.controlPointCount) {\n            controlPoint = new FilterControlPoint();\n            this.controlPoints[this.controlPointCount] = controlPoint;\n        } else {\n            controlPoint = this.controlPoints[this.controlPointCount];\n        }\n        this.controlPointCount++;\n        controlPoint.type = type;\n        controlPoint.set(freqSetting, gainSetting);\n    }\n\n    public toJsonObject(): Object {\n        const filterArray: any[] = [];\n        for (let i: number = 0; i < this.controlPointCount; i++) {\n            const point: FilterControlPoint = this.controlPoints[i];\n            filterArray.push({\n                \"type\": Config.filterTypeNames[point.type],\n                \"cutoffHz\": Math.round(point.getHz() * 100) / 100,\n                \"linearGain\": Math.round(point.getLinearGain() * 10000) / 10000,\n            });\n        }\n        return filterArray;\n    }\n\n    public fromJsonObject(filterObject: any): void {\n        this.controlPoints.length = 0;\n        if (filterObject) {\n            for (const pointObject of filterObject) {\n                const point: FilterControlPoint = new FilterControlPoint();\n                point.type = Config.filterTypeNames.indexOf(pointObject[\"type\"]);\n                if (<any>point.type == -1) point.type = FilterType.peak;\n                if (pointObject[\"cutoffHz\"] != undefined) {\n                    point.freq = FilterControlPoint.getRoundedSettingValueFromHz(pointObject[\"cutoffHz\"]);\n                } else {\n                    point.freq = 0;\n                }\n                if (pointObject[\"linearGain\"] != undefined) {\n                    point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(pointObject[\"linearGain\"]);\n                } else {\n                    point.gain = Config.filterGainCenter;\n                }\n                this.controlPoints.push(point);\n            }\n        }\n        this.controlPointCount = this.controlPoints.length;\n    }\n\n    // Returns true if all filter control points match in number and type (but not freq/gain)\n    public static filtersCanMorph(filterA: FilterSettings, filterB: FilterSettings): boolean {\n        if (filterA.controlPointCount != filterB.controlPointCount)\n            return false;\n        for (let i: number = 0; i < filterA.controlPointCount; i++) {\n            if (filterA.controlPoints[i].type != filterB.controlPoints[i].type)\n                return false;\n        }\n        return true;\n    }\n\n    // Interpolate two FilterSettings, where pos=0 is filterA and pos=1 is filterB\n    public static lerpFilters(filterA: FilterSettings, filterB: FilterSettings, pos: number): FilterSettings {\n\n        let lerpedFilter: FilterSettings = new FilterSettings();\n\n        // One setting or another is null, return the other.\n        if (filterA == null) {\n            return filterA;\n        }\n        if (filterB == null) {\n            return filterB;\n        }\n\n        pos = Math.max(0, Math.min(1, pos));\n\n        // Filter control points match in number and type\n        if (this.filtersCanMorph(filterA, filterB)) {\n            for (let i: number = 0; i < filterA.controlPointCount; i++) {\n                lerpedFilter.controlPoints[i] = new FilterControlPoint();\n                lerpedFilter.controlPoints[i].type = filterA.controlPoints[i].type;\n                lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq + (filterB.controlPoints[i].freq - filterA.controlPoints[i].freq) * pos;\n                lerpedFilter.controlPoints[i].gain = filterA.controlPoints[i].gain + (filterB.controlPoints[i].gain - filterA.controlPoints[i].gain) * pos;\n            }\n\n            lerpedFilter.controlPointCount = filterA.controlPointCount;\n\n            return lerpedFilter;\n        }\n        else {\n            // Not allowing morph of unmatching filters for now. It's a hornet's nest of problems, and I had it implemented and mostly working and it didn't sound very interesting since the shape becomes \"mushy\" in between\n            return (pos >= 1) ? filterB : filterA;\n        }\n    }\n\n    public convertLegacySettings(legacyCutoffSetting: number, legacyResonanceSetting: number, legacyEnv: Envelope): void {\n        this.reset();\n\n        const legacyFilterCutoffMaxHz: number = 8000; // This was carefully calculated to correspond to no change in response when filtering at 48000 samples per second... when using the legacy simplified low-pass filter.\n        const legacyFilterMax: number = 0.95;\n        const legacyFilterMaxRadians: number = Math.asin(legacyFilterMax / 2.0) * 2.0;\n        const legacyFilterMaxResonance: number = 0.95;\n        const legacyFilterCutoffRange: number = 11;\n        const legacyFilterResonanceRange: number = 8;\n\n        const resonant: boolean = (legacyResonanceSetting > 1);\n        const firstOrder: boolean = (legacyResonanceSetting == 0);\n        const cutoffAtMax: boolean = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\n        const envDecays: boolean = (legacyEnv.type == EnvelopeType.flare || legacyEnv.type == EnvelopeType.twang || legacyEnv.type == EnvelopeType.decay || legacyEnv.type == EnvelopeType.noteSize);\n\n        const standardSampleRate: number = 48000;\n        const legacyHz: number = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\n        const legacyRadians: number = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\n\n        if (legacyEnv.type == EnvelopeType.none && !resonant && cutoffAtMax) {\n            // The response is flat and there's no envelopes, so don't even bother adding any control points.\n        } else if (firstOrder) {\n            // In general, a 1st order lowpass can be approximated by a 2nd order lowpass\n            // with a cutoff ~4 octaves higher (*16) and a gain of 1/16.\n            // However, BeepBox's original lowpass filters behaved oddly as they\n            // approach the nyquist frequency, so I've devised this curved conversion\n            // to guess at a perceptually appropriate new cutoff frequency and gain.\n            const extraOctaves: number = 3.5;\n            const targetRadians: number = legacyRadians * Math.pow(2.0, extraOctaves);\n            const curvedRadians: number = targetRadians / (1.0 + targetRadians / Math.PI);\n            const curvedHz: number = standardSampleRate * curvedRadians / (2.0 * Math.PI)\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            const finalHz: number = FilterControlPoint.getHzFromSettingValue(freqSetting);\n            const finalRadians: number = 2.0 * Math.PI * finalHz / standardSampleRate;\n\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\n            const response: FrequencyResponse = new FrequencyResponse();\n            response.analyze(legacyFilter, finalRadians);\n            const legacyFilterGainAtNewRadians: number = response.magnitude();\n\n            let logGain: number = Math.log2(legacyFilterGainAtNewRadians);\n            // Bias slightly toward 2^(-extraOctaves):\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\n            // Decaying envelopes move the cutoff frequency back into an area where the best approximation of the first order slope requires a lower gain setting.\n            if (envDecays) logGain = Math.min(logGain, -1.0);\n            const convertedGain: number = Math.pow(2.0, logGain);\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        } else {\n            const intendedGain: number = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\n            const invertedGain: number = 0.5 / intendedGain;\n            const maxRadians: number = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\n            const freqRatio: number = legacyRadians / maxRadians;\n            const targetRadians: number = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\n            const curvedRadians: number = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\n            let curvedHz: number;\n            if (envDecays) {\n                curvedHz = standardSampleRate * Math.min(curvedRadians, legacyRadians * Math.pow(2, 0.25)) / (2.0 * Math.PI);\n            } else {\n                curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            }\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n\n            let legacyFilterGain: number;\n            if (envDecays) {\n                legacyFilterGain = intendedGain;\n            } else {\n                const legacyFilter: FilterCoefficients = new FilterCoefficients();\n                legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\n                const response: FrequencyResponse = new FrequencyResponse();\n                response.analyze(legacyFilter, curvedRadians);\n                legacyFilterGain = response.magnitude();\n            }\n            if (!resonant) legacyFilterGain = Math.min(legacyFilterGain, Math.sqrt(0.5));\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        }\n\n        // Added for JummBox - making a 0 point filter does not truncate control points!\n        this.controlPoints.length = this.controlPointCount;\n    }\n\n    // Similar to above, but purpose-fit for quick conversions in synth calls.\n    public convertLegacySettingsForSynth(legacyCutoffSetting: number, legacyResonanceSetting: number, allowFirstOrder: boolean = false): void {\n        this.reset();\n\n        const legacyFilterCutoffMaxHz: number = 8000; // This was carefully calculated to correspond to no change in response when filtering at 48000 samples per second... when using the legacy simplified low-pass filter.\n        const legacyFilterMax: number = 0.95;\n        const legacyFilterMaxRadians: number = Math.asin(legacyFilterMax / 2.0) * 2.0;\n        const legacyFilterMaxResonance: number = 0.95;\n        const legacyFilterCutoffRange: number = 11;\n        const legacyFilterResonanceRange: number = 8;\n\n        const firstOrder: boolean = (legacyResonanceSetting == 0 && allowFirstOrder);\n        const standardSampleRate: number = 48000;\n        const legacyHz: number = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\n        const legacyRadians: number = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\n\n        if (firstOrder) {\n            // In general, a 1st order lowpass can be approximated by a 2nd order lowpass\n            // with a cutoff ~4 octaves higher (*16) and a gain of 1/16.\n            // However, BeepBox's original lowpass filters behaved oddly as they\n            // approach the nyquist frequency, so I've devised this curved conversion\n            // to guess at a perceptually appropriate new cutoff frequency and gain.\n            const extraOctaves: number = 3.5;\n            const targetRadians: number = legacyRadians * Math.pow(2.0, extraOctaves);\n            const curvedRadians: number = targetRadians / (1.0 + targetRadians / Math.PI);\n            const curvedHz: number = standardSampleRate * curvedRadians / (2.0 * Math.PI)\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            const finalHz: number = FilterControlPoint.getHzFromSettingValue(freqSetting);\n            const finalRadians: number = 2.0 * Math.PI * finalHz / standardSampleRate;\n\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\n            const response: FrequencyResponse = new FrequencyResponse();\n            response.analyze(legacyFilter, finalRadians);\n            const legacyFilterGainAtNewRadians: number = response.magnitude();\n\n            let logGain: number = Math.log2(legacyFilterGainAtNewRadians);\n            // Bias slightly toward 2^(-extraOctaves):\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\n            const convertedGain: number = Math.pow(2.0, logGain);\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        } else {\n            const intendedGain: number = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\n            const invertedGain: number = 0.5 / intendedGain;\n            const maxRadians: number = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\n            const freqRatio: number = legacyRadians / maxRadians;\n            const targetRadians: number = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\n            const curvedRadians: number = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\n            let curvedHz: number;\n\n            curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            const freqSetting: number = FilterControlPoint.getSettingValueFromHz(curvedHz);\n\n            let legacyFilterGain: number;\n\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\n            legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\n            const response: FrequencyResponse = new FrequencyResponse();\n            response.analyze(legacyFilter, curvedRadians);\n            legacyFilterGain = response.magnitude();\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        }\n\n    }\n}\n\nexport class EnvelopeSettings {\n    public target: number = 0;\n    public index: number = 0;\n    public envelope: number = 0;\n\n    constructor() {\n        this.reset();\n    }\n\n    reset(): void {\n        this.target = 0;\n        this.index = 0;\n        this.envelope = 0;\n    }\n\n    public toJsonObject(): Object {\n        const envelopeObject: any = {\n            \"target\": Config.instrumentAutomationTargets[this.target].name,\n            \"envelope\": Config.envelopes[this.envelope].name,\n        };\n        if (Config.instrumentAutomationTargets[this.target].maxCount > 1) {\n            envelopeObject[\"index\"] = this.index;\n        }\n        return envelopeObject;\n    }\n\n    public fromJsonObject(envelopeObject: any): void {\n        this.reset();\n\n        let target: AutomationTarget = Config.instrumentAutomationTargets.dictionary[envelopeObject[\"target\"]];\n        if (target == null) target = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\n        this.target = target.index;\n\n        let envelope: Envelope = Config.envelopes.dictionary[envelopeObject[\"envelope\"]];\n        if (envelope == null) envelope = Config.envelopes.dictionary[\"none\"];\n        this.envelope = envelope.index;\n\n        if (envelopeObject[\"index\"] != undefined) {\n            this.index = clamp(0, Config.instrumentAutomationTargets[this.target].maxCount, envelopeObject[\"index\"] | 0);\n        } else {\n            this.index = 0;\n        }\n    }\n}\n\n// Settings that were available to old versions of BeepBox but are no longer available in the\n// current version that need to be reinterpreted as a group to determine the best way to\n// represent them in the current version.\ninterface LegacySettings {\n    filterCutoff?: number;\n    filterResonance?: number;\n    filterEnvelope?: Envelope;\n    pulseEnvelope?: Envelope;\n    operatorEnvelopes?: Envelope[];\n    feedbackEnvelope?: Envelope;\n}\n\ninterface HeldMod {\n    volume: number;\n    channelIndex: number;\n    instrumentIndex: number;\n    setting: number;\n    holdFor: number;\n}\n\nexport class Instrument {\n    public type: InstrumentType = InstrumentType.chip;\n    public preset: number = 0;\n    public chipWave: number = 2;\n\t// advloop addition\n\tpublic isUsingAdvancedLoopControls: boolean = false;\n\tpublic chipWaveLoopStart: number = 0;\n\tpublic chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n\tpublic chipWaveLoopMode: number = 0; // 0: loop, 1: ping-pong, 2: once, 3: play loop once\n\tpublic chipWavePlayBackwards: boolean = false;\n        public chipWaveStartOffset: number = 0;\n        // advloop addition\n    public chipNoise: number = 1;\n    public eqFilter: FilterSettings = new FilterSettings();\n    public eqFilterType: boolean = false;\n    public eqFilterSimpleCut: number = Config.filterSimpleCutRange - 1;\n    public eqFilterSimplePeak: number = 0;\n    public noteFilter: FilterSettings = new FilterSettings();\n    public noteFilterType: boolean = false;\n    public noteFilterSimpleCut: number = Config.filterSimpleCutRange - 1;\n    public noteFilterSimplePeak: number = 0;\n    public eqSubFilters: (FilterSettings | null)[] = [];\n    public noteSubFilters: (FilterSettings | null)[] = [];\n    public tmpEqFilterStart: FilterSettings | null;\n    public tmpEqFilterEnd: FilterSettings | null;\n    public tmpNoteFilterStart: FilterSettings | null;\n    public tmpNoteFilterEnd: FilterSettings | null;\n    public envelopes: EnvelopeSettings[] = [];\n    public fadeIn: number = 0;\n    public fadeOut: number = Config.fadeOutNeutral;\n    public envelopeCount: number = 0;\n    public transition: number = Config.transitions.dictionary[\"normal\"].index;\n    public pitchShift: number = 0;\n    public detune: number = 0;\n    public vibrato: number = 0;\n    public interval: number = 0;\n    public vibratoDepth: number = 0;\n    public vibratoSpeed: number = 10;\n    public vibratoDelay: number = 0;\n    public vibratoType: number = 0;\n    public envelopeSpeed: number = 12;\n    public discreteEnvelope: boolean = false;\n    public unison: number = 0;\n    public unisonVoices: number = 1;\n    public unisonSpread: number = 0.0;\n    public unisonOffset: number = 0.0;\n    public unisonExpression: number = 1.4;\n    public unisonSign: number = 1.0;\n    public effects: number = 0;\n    public chord: number = 1;\n    public volume: number = 0;\n    public pan: number = Config.panCenter;\n    public panDelay: number = 10;\n    public arpeggioSpeed: number = 12;\n    public fastTwoNoteArp: boolean = false;\n    public legacyTieOver: boolean = false;\n    public clicklessTransition: boolean = false;\n    public aliases: boolean = false;\n    public pulseWidth: number = Config.pulseWidthRange;\n    public decimalOffset: number = 0;\n    public supersawDynamism: number = Config.supersawDynamismMax;\n\tpublic supersawSpread: number = Math.ceil(Config.supersawSpreadMax / 2.0);\n\tpublic supersawShape: number = 0;\n\tpublic stringSustain: number = 10;\n\tpublic stringSustainType: SustainType = SustainType.acoustic;\n    public distortion: number = 0;\n    public bitcrusherFreq: number = 0;\n    public bitcrusherQuantization: number = 0;\n    public chorus: number = 0;\n    public reverb: number = 0;\n    public echoSustain: number = 0;\n    public echoDelay: number = 0;\n    public algorithm: number = 0;\n    public feedbackType: number = 0;\n    public algorithm6Op: number = 1;\n    public feedbackType6Op: number = 1;//default to not custom\n    public customAlgorithm: CustomAlgorithm = new CustomAlgorithm(); //{ name: \"1←4(2←5 3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [5], [6], [], [], []] };\n    public customFeedbackType: CustomFeedBack = new CustomFeedBack(); //{ name: \"1↔4 2↔5 3↔6\", indices: [[3], [5], [6], [1], [2], [3]] };\n    public feedbackAmplitude: number = 0;\n    public customChipWave: Float32Array = new Float32Array(64);\n    public customChipWaveIntegral: Float32Array = new Float32Array(65); // One extra element for wrap-around in chipSynth.\n    public readonly operators: Operator[] = [];\n    public readonly spectrumWave: SpectrumWave;\n    public readonly harmonicsWave: HarmonicsWave = new HarmonicsWave();\n    public readonly drumsetEnvelopes: number[] = [];\n    public readonly drumsetSpectrumWaves: SpectrumWave[] = [];\n    public modChannels: number[] = [];\n    public modInstruments: number[] = [];\n    public modulators: number[] = [];\n    public modFilterTypes: number[] = [];\n    public invalidModulators: boolean[] = [];\n    constructor(isNoiseChannel: boolean, isModChannel: boolean) {\n\n        // @jummbus - My screed on how modulator arrays for instruments work, for the benefit of myself in the future, or whoever else.\n        //\n        // modulators[mod] is the index in Config.modulators to use, with \"none\" being the first entry.\n        //\n        // modChannels[mod] gives the index of a channel set for this mod. Two special values:\n        //   -2 \"none\"\n        //   -1 \"song\"\n        //   0+ actual channel index\n        //\n        // modInstruments[mod] gives the index of an instrument within the channel set for this mod. Again, two special values:\n        //   [0 ~ channel.instruments.length-1]     channel's instrument index\n        //   channel.instruments.length             \"all\"\n        //   channel.instruments.length+1           \"active\"\n        //\n        // modFilterTypes[mod] gives some info about the filter type: 0 is morph, 1+ is index in the dot selection array (dot 1 x, dot 1 y, dot 2 x...)\n        //   0  filter morph\n        //   1+ filter dot target, starting from dot 1 x and then dot 1 y, then repeating x, y for all dots in order. Note: odd values are always \"x\" targets, even are \"y\".\n\n        if (isModChannel) {\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                this.modChannels.push(-2);\n                this.modInstruments.push(0);\n                this.modulators.push(Config.modulators.dictionary[\"none\"].index);\n            }\n        }\n\n        this.spectrumWave = new SpectrumWave(isNoiseChannel);\n        for (let i: number = 0; i < Config.operatorCount+2; i++) {//hopefully won't break everything\n            this.operators[i] = new Operator(i);\n        }\n        for (let i: number = 0; i < Config.drumCount; i++) {\n            this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\n            this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\n        }\n\n        for (let i = 0; i < 64; i++) {\n            this.customChipWave[i] = 24 - Math.floor(i * (48 / 64));\n        }\n\n        let sum: number = 0.0;\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\n            sum += this.customChipWave[i];\n        }\n        const average: number = sum / this.customChipWave.length;\n\n        // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n        let cumulative: number = 0;\n        let wavePrev: number = 0;\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\n            cumulative += wavePrev;\n            wavePrev = this.customChipWave[i] - average;\n            this.customChipWaveIntegral[i] = cumulative;\n        }\n\n        // 65th, last sample is for anti-aliasing\n        this.customChipWaveIntegral[64] = 0.0;\n\n    }\n\n    public setTypeAndReset(type: InstrumentType, isNoiseChannel: boolean, isModChannel: boolean): void {\n        // Mod channels are forced to one type.\n        if (isModChannel) type = InstrumentType.mod;\n        this.type = type;\n        this.preset = type;\n        this.volume = 0;\n        this.effects = (1 << EffectType.panning); // Panning enabled by default in JB.\n        this.chorus = Config.chorusRange - 1;\n        this.reverb = 0;\n        this.echoSustain = Math.floor((Config.echoSustainRange - 1) * 0.5);\n        this.echoDelay = Math.floor((Config.echoDelayRange - 1) * 0.5);\n        this.eqFilter.reset();\n        this.eqFilterType = false;\n        this.eqFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.eqFilterSimplePeak = 0;\n        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n            this.eqSubFilters[i] = null;\n            this.noteSubFilters[i] = null;\n        }\n        this.noteFilter.reset();\n        this.noteFilterType = false;\n        this.noteFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.noteFilterSimplePeak = 0;\n        this.distortion = Math.floor((Config.distortionRange - 1) * 0.75);\n        this.bitcrusherFreq = Math.floor((Config.bitcrusherFreqRange - 1) * 0.5)\n        this.bitcrusherQuantization = Math.floor((Config.bitcrusherQuantizationRange - 1) * 0.5);\n        this.pan = Config.panCenter;\n        this.panDelay = 10;\n        this.pitchShift = Config.pitchShiftCenter;\n        this.detune = Config.detuneCenter;\n        this.vibrato = 0;\n        this.unison = 0;\n        this.stringSustain = 10;\n        this.stringSustainType = Config.enableAcousticSustain ? SustainType.acoustic : SustainType.bright;\n        this.clicklessTransition = false;\n        this.arpeggioSpeed = 12;\n        this.envelopeSpeed = 12;\n        this.discreteEnvelope = false;\n        this.legacyTieOver = false;\n        this.aliases = false;\n        this.fadeIn = 0;\n        this.fadeOut = Config.fadeOutNeutral;\n        this.transition = Config.transitions.dictionary[\"normal\"].index;\n        this.envelopeCount = 0;\n        switch (type) {\n            case InstrumentType.chip:\n                this.chipWave = 2;\n                // TODO: enable the chord effect?\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n\t\t\t\t\t\t\t\t // advloop addition\n                    this.isUsingAdvancedLoopControls = false;\n                    this.chipWaveLoopStart = 0;\n                    this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n                    this.chipWaveLoopMode = 0;\n                    this.chipWavePlayBackwards = false;\n                    this.chipWaveStartOffset = 0;\n                    // advloop addition\n                break;\n            case InstrumentType.customChipWave:\n                this.chipWave = 2;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                for (let i: number = 0; i < 64; i++) {\n                    this.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));\n                }\n\n                let sum: number = 0.0;\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\n                    sum += this.customChipWave[i];\n                }\n                const average: number = sum / this.customChipWave.length;\n\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n                let cumulative: number = 0;\n                let wavePrev: number = 0;\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = this.customChipWave[i] - average;\n                    this.customChipWaveIntegral[i] = cumulative;\n                }\n\n                this.customChipWaveIntegral[64] = 0.0;\n                break;\n            case InstrumentType.fm:\n                this.chord = Config.chords.dictionary[\"custom interval\"].index;\n                this.algorithm = 0;\n                this.feedbackType = 0;\n                this.feedbackAmplitude = 0;\n                for (let i: number = 0; i < this.operators.length; i++) {\n                    this.operators[i].reset(i);\n                }\n                break;\n            case InstrumentType.fm6op:\n                this.transition = 1;\n                this.vibrato = 0;\n                this.effects = 1;\n                this.chord = 3;\n                this.algorithm = 0;\n                this.feedbackType = 0;\n                this.algorithm6Op = 1;\n                this.feedbackType6Op = 1;\n                this.customAlgorithm.fromPreset(1);\n                this.feedbackAmplitude = 0;\n                for (let i: number = 0; i < this.operators.length; i++) {\n                    this.operators[i].reset(i);\n                }\n                break;\n            case InstrumentType.noise:\n                this.chipNoise = 1;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                break;\n            case InstrumentType.spectrum:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                this.spectrumWave.reset(isNoiseChannel);\n                break;\n            case InstrumentType.drumset:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                for (let i: number = 0; i < Config.drumCount; i++) {\n                    this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\n                    if (this.drumsetSpectrumWaves[i] == undefined) {\n                        this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\n                    }\n                    this.drumsetSpectrumWaves[i].reset(isNoiseChannel);\n                }\n                break;\n            case InstrumentType.harmonics:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                this.harmonicsWave.reset();\n                break;\n            case InstrumentType.pwm:\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                this.pulseWidth = Config.pulseWidthRange;\n                this.decimalOffset = 0;\n                break;\n            case InstrumentType.pickedString:\n                this.chord = Config.chords.dictionary[\"strum\"].index;\n                this.harmonicsWave.reset();\n                break;\n            case InstrumentType.mod:\n                this.transition = 0;\n                this.vibrato = 0;\n                this.interval = 0;\n                this.effects = 0;\n                this.chord = 0;\n                this.modChannels = [];\n                this.modInstruments = [];\n                this.modulators = [];\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                    this.modChannels.push(-2);\n                    this.modInstruments.push(0);\n                    this.modulators.push(Config.modulators.dictionary[\"none\"].index);\n                    this.invalidModulators[mod] = false;\n                    this.modFilterTypes[mod] = 0;\n                }\n                break;\n            case InstrumentType.supersaw:\n\t\t\t\tthis.chord = Config.chords.dictionary[\"arpeggio\"].index;\n\t\t\t\tthis.supersawDynamism = Config.supersawDynamismMax;\n\t\t\t\tthis.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n\t\t\t\tthis.supersawShape = 0;\n\t\t\t\tthis.pulseWidth = Config.pulseWidthRange - 1;\n                this.decimalOffset = 0;\n\t\t\t\tbreak;\n            default:\n                throw new Error(\"Unrecognized instrument type: \" + type);\n        }\n        // Chip/noise instruments had arpeggio and FM had custom interval but neither\n        // explicitly saved the chorus setting beforeSeven so enable it here. The effects\n        // will otherwise get overridden when reading SongTagCode.startInstrument.\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n            // Enable chord if it was used.\n            this.effects = (this.effects | (1 << EffectType.chord));\n        }\n    }\n\n    // (only) difference for JummBox: Returns whether or not the note filter was chosen for filter conversion.\n    public convertLegacySettings(legacySettings: LegacySettings, forceSimpleFilter: boolean): void {\n        let legacyCutoffSetting: number | undefined = legacySettings.filterCutoff;\n        let legacyResonanceSetting: number | undefined = legacySettings.filterResonance;\n        let legacyFilterEnv: Envelope | undefined = legacySettings.filterEnvelope;\n        let legacyPulseEnv: Envelope | undefined = legacySettings.pulseEnvelope;\n        let legacyOperatorEnvelopes: Envelope[] | undefined = legacySettings.operatorEnvelopes;\n        let legacyFeedbackEnv: Envelope | undefined = legacySettings.feedbackEnvelope;\n\n        // legacy defaults:\n        if (legacyCutoffSetting == undefined) legacyCutoffSetting = (this.type == InstrumentType.chip) ? 6 : 10;\n        if (legacyResonanceSetting == undefined) legacyResonanceSetting = 0;\n        if (legacyFilterEnv == undefined) legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\n        if (legacyPulseEnv == undefined) legacyPulseEnv = Config.envelopes.dictionary[(this.type == InstrumentType.pwm) ? \"twang 2\" : \"none\"];\n        if (legacyOperatorEnvelopes == undefined) legacyOperatorEnvelopes = [Config.envelopes.dictionary[(this.type == InstrumentType.fm) ? \"note size\" : \"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"]];\n        if (legacyFeedbackEnv == undefined) legacyFeedbackEnv = Config.envelopes.dictionary[\"none\"];\n\n        // The \"punch\" envelope is special: it goes *above* the chosen cutoff. But if the cutoff was already at the max, it couldn't go any higher... except in the current version of BeepBox I raised the max cutoff so it *can* but then it sounds different, so to preserve the original sound let's just remove the punch envelope.\n        const legacyFilterCutoffRange: number = 11;\n        const cutoffAtMax: boolean = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\n        if (cutoffAtMax && legacyFilterEnv.type == EnvelopeType.punch) legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\n\n        const carrierCount: number = Config.algorithms[this.algorithm].carrierCount;\n        let noCarriersControlledByNoteSize: boolean = true;\n        let allCarriersControlledByNoteSize: boolean = true;\n        let noteSizeControlsSomethingElse: boolean = (legacyFilterEnv.type == EnvelopeType.noteSize) || (legacyPulseEnv.type == EnvelopeType.noteSize);\n        if (this.type == InstrumentType.fm) {\n            noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyFeedbackEnv.type == EnvelopeType.noteSize);\n            for (let i: number = 0; i < legacyOperatorEnvelopes.length; i++) {\n                if (i < carrierCount) {\n                    if (legacyOperatorEnvelopes[i].type != EnvelopeType.noteSize) {\n                        allCarriersControlledByNoteSize = false;\n                    } else {\n                        noCarriersControlledByNoteSize = false;\n                    }\n                } else {\n                    noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyOperatorEnvelopes[i].type == EnvelopeType.noteSize);\n                }\n            }\n        }\n\n        this.envelopeCount = 0;\n\n        if (this.type == InstrumentType.fm) {\n            if (allCarriersControlledByNoteSize && noteSizeControlsSomethingElse) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteVolume\"].index, 0, Config.envelopes.dictionary[\"note size\"].index);\n            } else if (noCarriersControlledByNoteSize && !noteSizeControlsSomethingElse) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"none\"].index, 0, Config.envelopes.dictionary[\"note size\"].index);\n            }\n        }\n\n        if (legacyFilterEnv.type == EnvelopeType.none) {\n            this.noteFilter.reset();\n            this.noteFilterType = false;\n            this.eqFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\n            this.effects &= ~(1 << EffectType.noteFilter);\n            if (forceSimpleFilter || this.eqFilterType) {\n                this.eqFilterType = true;\n                this.eqFilterSimpleCut = legacyCutoffSetting;\n                this.eqFilterSimplePeak = legacyResonanceSetting;\n            }\n        } else {\n            this.eqFilter.reset();\n\n            this.eqFilterType = false;\n            this.noteFilterType = false;\n            this.noteFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\n            this.effects |= 1 << EffectType.noteFilter;\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteFilterAllFreqs\"].index, 0, legacyFilterEnv.index);\n            if (forceSimpleFilter || this.noteFilterType) {\n                this.noteFilterType = true;\n                this.noteFilterSimpleCut = legacyCutoffSetting;\n                this.noteFilterSimplePeak = legacyResonanceSetting;\n            }\n        }\n\n        if (legacyPulseEnv.type != EnvelopeType.none) {\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"pulseWidth\"].index, 0, legacyPulseEnv.index);\n        }\n\n        for (let i: number = 0; i < legacyOperatorEnvelopes.length; i++) {\n            if (i < carrierCount && allCarriersControlledByNoteSize) continue;\n            if (legacyOperatorEnvelopes[i].type != EnvelopeType.none) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"operatorAmplitude\"].index, i, legacyOperatorEnvelopes[i].index);\n            }\n        }\n\n        if (legacyFeedbackEnv.type != EnvelopeType.none) {\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"feedbackAmplitude\"].index, 0, legacyFeedbackEnv.index);\n        }\n    }\n\n    public toJsonObject(): Object {\n        const instrumentObject: any = {\n            \"type\": Config.instrumentTypeNames[this.type],\n            \"volume\": this.volume,\n            \"eqFilter\": this.eqFilter.toJsonObject(),\n            \"eqFilterType\": this.eqFilterType,\n            \"eqSimpleCut\": this.eqFilterSimpleCut,\n            \"eqSimplePeak\": this.eqFilterSimplePeak,\n            \"envelopeSpeed\": this.envelopeSpeed,\n            \"discreteEnvelope\": this.discreteEnvelope\n        };\n\n        if (this.preset != this.type) {\n            instrumentObject[\"preset\"] = this.preset;\n        }\n\n        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n            if (this.eqSubFilters[i] != null)\n                instrumentObject[\"eqSubFilters\" + i] = this.eqSubFilters[i]!.toJsonObject();\n        }\n\n        const effects: string[] = [];\n        for (const effect of Config.effectOrder) {\n            if (this.effects & (1 << effect)) {\n                effects.push(Config.effectNames[effect]);\n            }\n        }\n        instrumentObject[\"effects\"] = effects;\n\n\n        if (effectsIncludeTransition(this.effects)) {\n            instrumentObject[\"transition\"] = Config.transitions[this.transition].name;\n            instrumentObject[\"clicklessTransition\"] = this.clicklessTransition;\n        }\n        if (effectsIncludeChord(this.effects)) {\n            instrumentObject[\"chord\"] = this.getChord().name;\n            instrumentObject[\"fastTwoNoteArp\"] = this.fastTwoNoteArp;\n            instrumentObject[\"arpeggioSpeed\"] = this.arpeggioSpeed;\n        }\n        if (effectsIncludePitchShift(this.effects)) {\n            instrumentObject[\"pitchShiftSemitones\"] = this.pitchShift;\n        }\n        if (effectsIncludeDetune(this.effects)) {\n            instrumentObject[\"detuneCents\"] = Synth.detuneToCents(this.detune);\n        }\n        if (effectsIncludeVibrato(this.effects)) {\n            if (this.vibrato == -1) {\n                this.vibrato = 5;\n            }\n            if (this.vibrato != 5) {\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\n            } else {\n                instrumentObject[\"vibrato\"] = \"custom\";\n            }\n            instrumentObject[\"vibratoDepth\"] = this.vibratoDepth;\n            instrumentObject[\"vibratoDelay\"] = this.vibratoDelay;\n            instrumentObject[\"vibratoSpeed\"] = this.vibratoSpeed;\n            instrumentObject[\"vibratoType\"] = this.vibratoType;\n        }\n        if (effectsIncludeNoteFilter(this.effects)) {\n            instrumentObject[\"noteFilterType\"] = this.noteFilterType;\n            instrumentObject[\"noteSimpleCut\"] = this.noteFilterSimpleCut;\n            instrumentObject[\"noteSimplePeak\"] = this.noteFilterSimplePeak;\n            instrumentObject[\"noteFilter\"] = this.noteFilter.toJsonObject();\n\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                if (this.noteSubFilters[i] != null)\n                    instrumentObject[\"noteSubFilters\" + i] = this.noteSubFilters[i]!.toJsonObject();\n            }\n        }\n        if (effectsIncludeDistortion(this.effects)) {\n            instrumentObject[\"distortion\"] = Math.round(100 * this.distortion / (Config.distortionRange - 1));\n            instrumentObject[\"aliases\"] = this.aliases;\n        }\n        if (effectsIncludeBitcrusher(this.effects)) {\n            instrumentObject[\"bitcrusherOctave\"] = (Config.bitcrusherFreqRange - 1 - this.bitcrusherFreq) * Config.bitcrusherOctaveStep;\n            instrumentObject[\"bitcrusherQuantization\"] = Math.round(100 * this.bitcrusherQuantization / (Config.bitcrusherQuantizationRange - 1));\n        }\n        if (effectsIncludePanning(this.effects)) {\n            instrumentObject[\"pan\"] = Math.round(100 * (this.pan - Config.panCenter) / Config.panCenter);\n            instrumentObject[\"panDelay\"] = this.panDelay;\n        }\n        if (effectsIncludeChorus(this.effects)) {\n            instrumentObject[\"chorus\"] = Math.round(100 * this.chorus / (Config.chorusRange - 1));\n        }\n        if (effectsIncludeEcho(this.effects)) {\n            instrumentObject[\"echoSustain\"] = Math.round(100 * this.echoSustain / (Config.echoSustainRange - 1));\n            instrumentObject[\"echoDelayBeats\"] = Math.round(1000 * (this.echoDelay + 1) * Config.echoDelayStepTicks / (Config.ticksPerPart * Config.partsPerBeat)) / 1000;\n        }\n        if (effectsIncludeReverb(this.effects)) {\n            instrumentObject[\"reverb\"] = Math.round(100 * this.reverb / (Config.reverbRange - 1));\n        }\n\n        if (this.type != InstrumentType.drumset) {\n            instrumentObject[\"fadeInSeconds\"] = Math.round(10000 * Synth.fadeInSettingToSeconds(this.fadeIn)) / 10000;\n            instrumentObject[\"fadeOutTicks\"] = Synth.fadeOutSettingToTicks(this.fadeOut);\n        }\n\n        if (this.type == InstrumentType.harmonics || this.type == InstrumentType.pickedString) {\n            instrumentObject[\"harmonics\"] = [];\n            for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n                instrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\n            }\n        }\n\n        if (this.type == InstrumentType.noise) {\n            instrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\n        } else if (this.type == InstrumentType.spectrum) {\n            instrumentObject[\"spectrum\"] = [];\n            for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                instrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\n            }\n        } else if (this.type == InstrumentType.drumset) {\n            instrumentObject[\"drums\"] = [];\n            for (let j: number = 0; j < Config.drumCount; j++) {\n                const spectrum: number[] = [];\n                for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                    spectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\n                }\n                instrumentObject[\"drums\"][j] = {\n                    \"filterEnvelope\": this.getDrumsetEnvelope(j).name,\n                    \"spectrum\": spectrum,\n                };\n            }\n        } else if (this.type == InstrumentType.chip) {\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\n            // should this unison pushing code be turned into a function..?\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;   \n            // these don't need to be pushed if custom unisons aren't being used\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n\n\t\t\t\t\t\t// advloop addition\n                instrumentObject[\"isUsingAdvancedLoopControls\"] = this.isUsingAdvancedLoopControls;\n                instrumentObject[\"chipWaveLoopStart\"] = this.chipWaveLoopStart;\n                instrumentObject[\"chipWaveLoopEnd\"] = this.chipWaveLoopEnd;\n                instrumentObject[\"chipWaveLoopMode\"] = this.chipWaveLoopMode;\n                instrumentObject[\"chipWavePlayBackwards\"] = this.chipWavePlayBackwards;\n                instrumentObject[\"chipWaveStartOffset\"] = this.chipWaveStartOffset;\n                // advloop addition\n        } else if (this.type == InstrumentType.pwm) {\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\n            instrumentObject[\"decimalOffset\"] = this.decimalOffset;\n        } else if (this.type == InstrumentType.supersaw) {\n\t\t\tinstrumentObject[\"pulseWidth\"] = this.pulseWidth;\n            instrumentObject[\"decimalOffset\"] = this.decimalOffset;\n\t\t\tinstrumentObject[\"dynamism\"] = Math.round(100 * this.supersawDynamism / Config.supersawDynamismMax);\n\t\t\tinstrumentObject[\"spread\"] = Math.round(100 * this.supersawSpread / Config.supersawSpreadMax);\n\t\t\tinstrumentObject[\"shape\"] = Math.round(100 * this.supersawShape / Config.supersawShapeMax);\n\t\t} else if (this.type == InstrumentType.pickedString) {\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            instrumentObject[\"stringSustain\"] = Math.round(100 * this.stringSustain / (Config.stringSustainRange - 1));\n            if (Config.enableAcousticSustain) {\n\t\t\t\tinstrumentObject[\"stringSustainType\"] = Config.sustainTypeNames[this.stringSustainType];\n\t\t\t}\n        } else if (this.type == InstrumentType.harmonics) {\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        } else if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\n            const operatorArray: Object[] = [];\n            for (const operator of this.operators) {\n                operatorArray.push({\n                    \"frequency\": Config.operatorFrequencies[operator.frequency].name,\n                    \"amplitude\": operator.amplitude,\n                    \"waveform\": Config.operatorWaves[operator.waveform].name,\n                    \"pulseWidth\": operator.pulseWidth,\n                });\n            }\n            if(this.type == InstrumentType.fm){\n                instrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\n                instrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\n                instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\n                instrumentObject[\"operators\"] = operatorArray;\n            } else {\n                instrumentObject[\"algorithm\"] = Config.algorithms6Op[this.algorithm6Op].name;\n                instrumentObject[\"feedbackType\"] = Config.feedbacks6Op[this.feedbackType6Op].name;\n                instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\n                if(this.algorithm6Op == 0){\n                    const customAlgorithm: any = {};\n                    customAlgorithm[\"mods\"] = this.customAlgorithm.modulatedBy;\n                    customAlgorithm[\"carrierCount\"] = this.customAlgorithm.carrierCount;\n                    instrumentObject[\"customAlgorithm\"] = customAlgorithm;\n                }\n                if(this.feedbackType6Op == 0){\n                    const customFeedback: any = {};\n                    customFeedback[\"mods\"] = this.customFeedbackType.indices;\n                    instrumentObject[\"customFeedback\"] = customFeedback;\n                }\n\n                instrumentObject[\"operators\"] = operatorArray;\n            }\n        } else if (this.type == InstrumentType.customChipWave) {\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            instrumentObject[\"customChipWave\"] = new Float64Array(64);\n            instrumentObject[\"customChipWaveIntegral\"] = new Float64Array(65);\n            for (let i: number = 0; i < this.customChipWave.length; i++) {\n                instrumentObject[\"customChipWave\"][i] = this.customChipWave[i];\n                // Meh, waste of space and can be inaccurate. It will be recalc'ed when instrument loads.\n                //instrumentObject[\"customChipWaveIntegral\"][i] = this.customChipWaveIntegral[i];\n            }\n        } else if (this.type == InstrumentType.mod) {\n            instrumentObject[\"modChannels\"] = [];\n            instrumentObject[\"modInstruments\"] = [];\n            instrumentObject[\"modSettings\"] = [];\n            instrumentObject[\"modFilterTypes\"] = [];\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                instrumentObject[\"modChannels\"][mod] = this.modChannels[mod];\n                instrumentObject[\"modInstruments\"][mod] = this.modInstruments[mod];\n                instrumentObject[\"modSettings\"][mod] = this.modulators[mod];\n                instrumentObject[\"modFilterTypes\"][mod] = this.modFilterTypes[mod];\n            }\n        } else {\n            throw new Error(\"Unrecognized instrument type\");\n        }\n\n        const envelopes: any[] = [];\n        for (let i = 0; i < this.envelopeCount; i++) {\n            envelopes.push(this.envelopes[i].toJsonObject());\n        }\n        instrumentObject[\"envelopes\"] = envelopes;\n\n        return instrumentObject;\n    }\n\n\n    public fromJsonObject(instrumentObject: any, isNoiseChannel: boolean, isModChannel: boolean, useSlowerRhythm: boolean, useFastTwoNoteArp: boolean, legacyGlobalReverb: number = 0): void {\n        if (instrumentObject == undefined) instrumentObject = {};\n\n        let type: InstrumentType = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\n        if (<any>type == -1) type = isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip);\n        this.setTypeAndReset(type, isNoiseChannel, isModChannel);\n\n        this.effects &= ~(1 << EffectType.panning);\n\n        if (instrumentObject[\"preset\"] != undefined) {\n            this.preset = instrumentObject[\"preset\"] >>> 0;\n        }\n\n        if (instrumentObject[\"volume\"] != undefined) {\n            this.volume = clamp(-Config.volumeRange / 2, (Config.volumeRange / 2) + 1, instrumentObject[\"volume\"] | 0);\n        } else {\n            this.volume = 0;\n        }\n\n        if (instrumentObject[\"envelopeSpeed\"] != undefined) {\n            this.envelopeSpeed = clamp(0, Config.modulators.dictionary[\"envelope speed\"].maxRawVol + 1, instrumentObject[\"envelopeSpeed\"] | 0);\n        } else {\n            this.envelopeSpeed = 12;\n        }\n\n        if (instrumentObject[\"discreteEnvelope\"] != undefined) {\n            this.discreteEnvelope = instrumentObject[\"discreteEnvelope\"];\n        }\n        else {\n            this.discreteEnvelope = false;\n        }\n\n        if (Array.isArray(instrumentObject[\"effects\"])) {\n            let effects: number = 0;\n            for (let i: number = 0; i < instrumentObject[\"effects\"].length; i++) {\n                effects = effects | (1 << Config.effectNames.indexOf(instrumentObject[\"effects\"][i]));\n            }\n            this.effects = (effects & ((1 << EffectType.length) - 1));\n        } else {\n            // The index of these names is reinterpreted as a bitfield, which relies on reverb and chorus being the first effects!\n            const legacyEffectsNames: string[] = [\"none\", \"reverb\", \"chorus\", \"chorus & reverb\"];\n            this.effects = legacyEffectsNames.indexOf(instrumentObject[\"effects\"]);\n            if (this.effects == -1) this.effects = (this.type == InstrumentType.noise) ? 0 : 1;\n        }\n\n        this.transition = Config.transitions.dictionary[\"normal\"].index; // default value.\n        const transitionProperty: any = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"]; // the transition property used to be called envelope, so check that too.\n        if (transitionProperty != undefined) {\n            let transition: Transition | undefined = Config.transitions.dictionary[transitionProperty];\n            if (instrumentObject[\"fadeInSeconds\"] == undefined || instrumentObject[\"fadeOutTicks\"] == undefined) {\n                const legacySettings = (<any>{\n                    \"binary\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                    \"seamless\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                    \"sudden\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                    \"hard\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                    \"smooth\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"soft\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    // Note that the old slide transition has the same name as a new slide transition that is different.\n                    // Only apply legacy settings if the instrument JSON was created before, based on the presence\n                    // of the fade in/out fields.\n                    \"slide\": { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"cross fade\": { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\n                    \"hard fade\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\n                    \"medium fade\": { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\n                    \"soft fade\": { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\n                })[transitionProperty];\n                if (legacySettings != undefined) {\n                    transition = Config.transitions.dictionary[legacySettings.transition];\n                    // These may be overridden below.\n                    this.fadeIn = Synth.secondsToFadeInSetting(legacySettings.fadeInSeconds);\n                    this.fadeOut = Synth.ticksToFadeOutSetting(legacySettings.fadeOutTicks);\n                }\n            }\n            if (transition != undefined) this.transition = transition.index;\n\n            if (this.transition != Config.transitions.dictionary[\"normal\"].index) {\n                // Enable transition if it was used.\n                this.effects = (this.effects | (1 << EffectType.transition));\n            }\n        }\n\n        // Overrides legacy settings in transition above.\n        if (instrumentObject[\"fadeInSeconds\"] != undefined) {\n            this.fadeIn = Synth.secondsToFadeInSetting(+instrumentObject[\"fadeInSeconds\"]);\n        }\n        if (instrumentObject[\"fadeOutTicks\"] != undefined) {\n            this.fadeOut = Synth.ticksToFadeOutSetting(+instrumentObject[\"fadeOutTicks\"]);\n        }\n\n        {\n            // Note that the chord setting may be overridden by instrumentObject[\"chorus\"] below.\n            const chordProperty: any = instrumentObject[\"chord\"];\n            const legacyChordNames: Dictionary<string> = { \"harmony\": \"simultaneous\" };\n            const chord: Chord | undefined = Config.chords.dictionary[legacyChordNames[chordProperty]] || Config.chords.dictionary[chordProperty];\n            if (chord != undefined) {\n                this.chord = chord.index;\n            } else {\n                // Different instruments have different default chord types based on historical behaviour.\n                if (this.type == InstrumentType.noise) {\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                } else if (this.type == InstrumentType.pickedString) {\n                    this.chord = Config.chords.dictionary[\"strum\"].index;\n                } else if (this.type == InstrumentType.chip) {\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                } else if (this.type == InstrumentType.fm||this.type == InstrumentType.fm6op) {\n                    this.chord = Config.chords.dictionary[\"custom interval\"].index;\n                } else {\n                    this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                }\n            }\n        }\n\n        this.unison = Config.unisons.dictionary[\"none\"].index; // default value.\n        const unisonProperty: any = instrumentObject[\"unison\"] || instrumentObject[\"interval\"] || instrumentObject[\"chorus\"]; // The unison property has gone by various names in the past.\n        if (unisonProperty != undefined) {\n            const legacyChorusNames: Dictionary<string> = { \"union\": \"none\", \"fifths\": \"fifth\", \"octaves\": \"octave\" };\n            const unison: Unison | undefined = Config.unisons.dictionary[legacyChorusNames[unisonProperty]] || Config.unisons.dictionary[unisonProperty];\n            if (unison != undefined) this.unison = unison.index;\n            if (unisonProperty == \"custom\") this.unison = Config.unisons.length;\n        }\n        //clamp these???\n        this.unisonVoices = (instrumentObject[\"unisonVoices\"] == undefined) ? Config.unisons[this.unison].voices : instrumentObject[\"unisonVoices\"];\n        this.unisonSpread = (instrumentObject[\"unisonSpread\"] == undefined) ? Config.unisons[this.unison].spread : instrumentObject[\"unisonSpread\"];\n        this.unisonOffset = (instrumentObject[\"unisonOffset\"] == undefined) ? Config.unisons[this.unison].offset : instrumentObject[\"unisonOffset\"];\n        this.unisonExpression = (instrumentObject[\"unisonExpression\"] == undefined) ? Config.unisons[this.unison].expression : instrumentObject[\"unisonExpression\"];\n        this.unisonSign = (instrumentObject[\"unisonSign\"] == undefined) ? Config.unisons[this.unison].sign : instrumentObject[\"unisonSign\"];\n\n        if (instrumentObject[\"chorus\"] == \"custom harmony\") {\n            // The original chorus setting had an option that now maps to two different settings. Override those if necessary.\n            this.unison = Config.unisons.dictionary[\"hum\"].index;\n            this.chord = Config.chords.dictionary[\"custom interval\"].index;\n        }\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index && !Array.isArray(instrumentObject[\"effects\"])) {\n            // Enable chord if it was used.\n            this.effects = (this.effects | (1 << EffectType.chord));\n        }\n\n        if (instrumentObject[\"pitchShiftSemitones\"] != undefined) {\n            this.pitchShift = clamp(0, Config.pitchShiftRange, Math.round(+instrumentObject[\"pitchShiftSemitones\"]));\n        }\n        if (instrumentObject[\"detuneCents\"] != undefined) {\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, Math.round(Synth.centsToDetune(+instrumentObject[\"detuneCents\"])));\n        }\n\n        this.vibrato = Config.vibratos.dictionary[\"none\"].index; // default value.\n        const vibratoProperty: any = instrumentObject[\"vibrato\"] || instrumentObject[\"effect\"]; // The vibrato property was previously called \"effect\", not to be confused with the current \"effects\".\n        if (vibratoProperty != undefined) {\n\n            const legacyVibratoNames: Dictionary<string> = { \"vibrato light\": \"light\", \"vibrato delayed\": \"delayed\", \"vibrato heavy\": \"heavy\" };\n            const vibrato: Vibrato | undefined = Config.vibratos.dictionary[legacyVibratoNames[unisonProperty]] || Config.vibratos.dictionary[vibratoProperty];\n            if (vibrato != undefined)\n                this.vibrato = vibrato.index;\n            else if (vibratoProperty == \"custom\")\n                this.vibrato = Config.vibratos.length; // custom\n\n            if (this.vibrato == Config.vibratos.length) {\n                this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\n                this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\n                this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\n                this.vibratoType = instrumentObject[\"vibratoType\"];\n            }\n            else { // Set defaults for the vibrato profile\n                this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\n                this.vibratoDelay = Config.vibratos[this.vibrato].delayTicks / 2;\n                this.vibratoSpeed = 10; // default;\n                this.vibratoType = Config.vibratos[this.vibrato].type;\n            }\n\n            // Old songs may have a vibrato effect without explicitly enabling it.\n            if (vibrato != Config.vibratos.dictionary[\"none\"]) {\n                this.effects = (this.effects | (1 << EffectType.vibrato));\n            }\n        }\n\n        if (instrumentObject[\"pan\"] != undefined) {\n            this.pan = clamp(0, Config.panMax + 1, Math.round(Config.panCenter + (instrumentObject[\"pan\"] | 0) * Config.panCenter / 100));\n\n            // Old songs may have a panning effect without explicitly enabling it.\n            if (this.pan != Config.panCenter) {\n                this.effects = (this.effects | (1 << EffectType.panning));\n            }\n        } else {\n            this.pan = Config.panCenter;\n        }\n\n        if (instrumentObject[\"panDelay\"] != undefined) {\n            this.panDelay = (instrumentObject[\"panDelay\"] | 0);\n        } else {\n            this.panDelay = 10;\n        }\n\n        if (instrumentObject[\"detune\"] != undefined) {\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject[\"detune\"] | 0));\n        }\n        else if (instrumentObject[\"detuneCents\"] == undefined) {\n            this.detune = Config.detuneCenter;\n        }\n\n        if (instrumentObject[\"distortion\"] != undefined) {\n            this.distortion = clamp(0, Config.distortionRange, Math.round((Config.distortionRange - 1) * (instrumentObject[\"distortion\"] | 0) / 100));\n        }\n\n        if (instrumentObject[\"bitcrusherOctave\"] != undefined) {\n            this.bitcrusherFreq = Config.bitcrusherFreqRange - 1 - (+instrumentObject[\"bitcrusherOctave\"]) / Config.bitcrusherOctaveStep;\n        }\n        if (instrumentObject[\"bitcrusherQuantization\"] != undefined) {\n            this.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, Math.round((Config.bitcrusherQuantizationRange - 1) * (instrumentObject[\"bitcrusherQuantization\"] | 0) / 100));\n        }\n\n        if (instrumentObject[\"echoSustain\"] != undefined) {\n            this.echoSustain = clamp(0, Config.echoSustainRange, Math.round((Config.echoSustainRange - 1) * (instrumentObject[\"echoSustain\"] | 0) / 100));\n        }\n        if (instrumentObject[\"echoDelayBeats\"] != undefined) {\n            this.echoDelay = clamp(0, Config.echoDelayRange, Math.round((+instrumentObject[\"echoDelayBeats\"]) * (Config.ticksPerPart * Config.partsPerBeat) / Config.echoDelayStepTicks - 1.0));\n        }\n\n        if (!isNaN(instrumentObject[\"chorus\"])) {\n            this.chorus = clamp(0, Config.chorusRange, Math.round((Config.chorusRange - 1) * (instrumentObject[\"chorus\"] | 0) / 100));\n        }\n\n        if (instrumentObject[\"reverb\"] != undefined) {\n            this.reverb = clamp(0, Config.reverbRange, Math.round((Config.reverbRange - 1) * (instrumentObject[\"reverb\"] | 0) / 100));\n        } else {\n            this.reverb = legacyGlobalReverb;\n        }\n\n        if (instrumentObject[\"pulseWidth\"] != undefined) {\n            this.pulseWidth = clamp(1, Config.pulseWidthRange + 1, Math.round(instrumentObject[\"pulseWidth\"]));\n        } else {\n            this.pulseWidth = Config.pulseWidthRange;\n        }\n\n        if (instrumentObject[\"decimalOffset\"] != undefined) {\n            this.decimalOffset = clamp(0, 99 + 1, Math.round(instrumentObject[\"decimalOffset\"]));\n        } else {\n            this.decimalOffset = 0;\n        }\n\n        if (instrumentObject[\"dynamism\"] != undefined) {\n\t\t\tthis.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, Math.round(Config.supersawDynamismMax * (instrumentObject[\"dynamism\"] | 0) / 100));\n\t\t} else {\n\t\t\tthis.supersawDynamism = Config.supersawDynamismMax;\n\t\t}\n\t\tif (instrumentObject[\"spread\"] != undefined) {\n\t\t\tthis.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, Math.round(Config.supersawSpreadMax * (instrumentObject[\"spread\"] | 0) / 100));\n\t\t} else {\n\t\t\tthis.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n\t\t}\n\t\tif (instrumentObject[\"shape\"] != undefined) {\n\t\t\tthis.supersawShape = clamp(0, Config.supersawShapeMax + 1, Math.round(Config.supersawShapeMax * (instrumentObject[\"shape\"] | 0) / 100));\n\t\t} else {\n\t\t\tthis.supersawShape = 0;\n\t\t}\n        \n        if (instrumentObject[\"harmonics\"] != undefined) {\n            for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n                this.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\n            }\n            this.harmonicsWave.markCustomWaveDirty();\n        } else {\n            this.harmonicsWave.reset();\n        }\n\n        if (instrumentObject[\"spectrum\"] != undefined) {\n            for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                this.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\n            }\n        } else {\n            this.spectrumWave.reset(isNoiseChannel);\n        }\n\n        if (instrumentObject[\"stringSustain\"] != undefined) {\n            this.stringSustain = clamp(0, Config.stringSustainRange, Math.round((Config.stringSustainRange - 1) * (instrumentObject[\"stringSustain\"] | 0) / 100));\n        } else {\n            this.stringSustain = 10;\n        }\n        this.stringSustainType = Config.enableAcousticSustain ? Config.sustainTypeNames.indexOf(instrumentObject[\"stringSustainType\"]) : SustainType.bright;\n\t\tif (<any>this.stringSustainType == -1) this.stringSustainType = SustainType.bright;\n\n        if (this.type == InstrumentType.noise) {\n            this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\n            if (instrumentObject[\"wave\"] == \"pink noise\") this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == \"pink\");\n            if (instrumentObject[\"wave\"] == \"brownian noise\") this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == \"brownian\");\n            if (this.chipNoise == -1) this.chipNoise = 1;\n        }\n\n        const legacyEnvelopeNames: Dictionary<string> = { \"custom\": \"note size\", \"steady\": \"none\", \"pluck 1\": \"twang 1\", \"pluck 2\": \"twang 2\", \"pluck 3\": \"twang 3\" };\n        const getEnvelope = (name: any): Envelope | undefined => (legacyEnvelopeNames[name] != undefined) ? Config.envelopes.dictionary[legacyEnvelopeNames[name]] : Config.envelopes.dictionary[name];\n\n        if (this.type == InstrumentType.drumset) {\n            if (instrumentObject[\"drums\"] != undefined) {\n                for (let j: number = 0; j < Config.drumCount; j++) {\n                    const drum: any = instrumentObject[\"drums\"][j];\n                    if (drum == undefined) continue;\n\n                    this.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index; // default value.\n                    if (drum[\"filterEnvelope\"] != undefined) {\n                        const envelope: Envelope | undefined = getEnvelope(drum[\"filterEnvelope\"]);\n                        if (envelope != undefined) this.drumsetEnvelopes[j] = envelope.index;\n                    }\n                    if (drum[\"spectrum\"] != undefined) {\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                            this.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\n                        }\n                    }\n                }\n            }\n        }\n\n        if (this.type == InstrumentType.chip) {\n            const legacyWaveNames: Dictionary<number> = { \"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 4, \"sawtooth\": 5, \"double saw\": 6, \"double pulse\": 7, \"spiky\": 8, \"plateau\": 0 };\n           \t\t\t\t const modboxWaveNames: Dictionary<number> = { \"10% pulse\": 22, \"sunsoft bass\": 23, \"loud pulse\": 24, \"sax\": 25, \"guitar\": 26, \"atari bass\": 28, \"atari pulse\": 29, \"1% pulse\": 30, \"curved sawtooth\": 31, \"viola\": 32, \"brass\": 33, \"acoustic bass\": 34, \"lyre\": 35, \"ramp pulse\": 36, \"piccolo\": 37, \"squaretooth\": 38, \"flatline\": 39, \"pnryshk a (u5)\": 40, \"pnryshk b (riff)\": 41 };\n             \t const sandboxWaveNames: Dictionary<number> = { \"shrill lute\": 42, \"shrill bass\": 44, \"nes pulse\": 45, \"saw bass\": 46, \"euphonium\": 47, \"shrill pulse\": 48, \"r-sawtooth\": 49, \"recorder\": 50, \"narrow saw\": 51, \"deep square\": 52, \"ring pulse\": 53, \"double sine\": 54, \"contrabass\": 55, \"double bass\": 56 };\n\t\t\t const zefboxWaveNames: Dictionary<number> = {\"semi-square\": 63, \"deep square\": 64, \"squaretal\": 40, \"saw wide\": 65, \"saw narrow \": 66, \"deep sawtooth\": 67, \"sawtal\": 68, \"pulse\": 69, \"triple pulse\": 70, \"high pulse\": 71,\"deep pulse\": 72 };\n\t\t\t const miscWaveNames: Dictionary<number> = {\"test1\": 56, \"pokey 4bit lfsr\": 57, \"pokey 5step bass\": 58, \"isolated spiky\": 59, \"unnamed 1\": 60, \"unnamed 2\": 61, \"guitar string\": 75, \"intense\": 76, \"buzz wave\": 77, \"pokey square\": 57, \"pokey bass\": 58, \"banana wave\": 83, \"test 1\": 84, \"test 2\": 84, \"real snare\": 85, \"earthbound o. guitar\": 86 };\n\t\t\t const paandorasboxWaveNames: Dictionary<number> = {\"kick\": 87, \"snare\": 88, \"piano1\": 89, \"WOW\": 90, \"overdrive\": 91, \"trumpet\": 92, \"saxophone\": 93, \"orchestrahit\": 94, \"detached violin\": 95, \"synth\": 96, \"sonic3snare\": 97, \"come on\": 98, \"choir\": 99, \"overdriveguitar\": 100, \"flute\": 101, \"legato violin\": 102, \"tremolo violin\": 103, \"amen break\": 104, \"pizzicato violin\": 105, \"tim allen grunt\": 106, \"tuba\": 107, \"loopingcymbal\": 108, \"standardkick\": 109, \"standardsnare\": 110, \"closedhihat\": 111, \"foothihat\": 112, \"openhihat\": 113, \"crashcymbal\": 114, \"pianoC4\": 115, \"liver pad\": 116, \"marimba\": 117, \"susdotwav\": 118, \"wackyboxtts\": 119};\n\t\t\t// const paandorasbetaWaveNames = {\"contrabass\": 55, \"double bass\": 56 };\n\t\t//this.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\n            this.chipWave = -1;\n            const rawName: string = instrumentObject[\"wave\"];\n            for (const table of [\n                legacyWaveNames,\n                modboxWaveNames,\n                sandboxWaveNames,\n                zefboxWaveNames,\n                miscWaveNames,\n                paandorasboxWaveNames\n            ]) {\n                if (this.chipWave == -1 && table[rawName] != undefined && Config.chipWaves[table[rawName]] != undefined) {\n                    this.chipWave = table[rawName];\n                    break;\n                }\n            }\n            if (this.chipWave == -1) {\n                const potentialChipWaveIndex: number = Config.chipWaves.findIndex(wave => wave.name == rawName);\n                if (potentialChipWaveIndex != -1) this.chipWave = potentialChipWaveIndex;\n            }\n            // this.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : modboxWaveNames[instrumentObject[\"wave\"]] != undefined ? modboxWaveNames[instrumentObject[\"wave\"]] : sandboxWaveNames[instrumentObject[\"wave\"]] != undefined ? sandboxWaveNames[instrumentObject[\"wave\"]] : zefboxWaveNames[instrumentObject[\"wave\"]] != undefined ? zefboxWaveNames[instrumentObject[\"wave\"]] : miscWaveNames[instrumentObject[\"wave\"]] != undefined ? miscWaveNames[instrumentObject[\"wave\"]] : paandorasboxWaveNames[instrumentObject[\"wave\"]] != undefined ? paandorasboxWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]); \n\t\tif (this.chipWave == -1) this.chipWave = 1;\n        }\n\n        if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\n            if(this.type == InstrumentType.fm) {\n                this.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject[\"algorithm\"]);\n                if (this.algorithm == -1) this.algorithm = 0;\n                this.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"]);\n                if (this.feedbackType == -1) this.feedbackType = 0;\n            } else {\n                this.algorithm6Op = Config.algorithms6Op.findIndex(algorithm6Op => algorithm6Op.name == instrumentObject[\"algorithm\"]);\n                if (this.algorithm6Op == -1) this.algorithm6Op = 1;\n                if(this.algorithm6Op == 0){ \n                    this.customAlgorithm.set(instrumentObject[\"customAlgorithm\"][\"carrierCount\"], instrumentObject[\"customAlgorithm\"][\"mods\"]);\n                } else{\n                    this.customAlgorithm.fromPreset(this.algorithm6Op);\n                }\n                this.feedbackType6Op = Config.feedbacks6Op.findIndex(feedback6Op => feedback6Op.name == instrumentObject[\"feedbackType\"]);\n                if (this.feedbackType6Op == -1) this.feedbackType6Op = 1;\n                if(this.feedbackType6Op == 0) {\n                    this.customFeedbackType.set(instrumentObject[\"customFeedback\"][\"mods\"]);\n                }else{\n                    this.customFeedbackType.fromPreset(this.feedbackType6Op)\n                }\n            }\n            if (instrumentObject[\"feedbackAmplitude\"] != undefined) {\n                this.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\n            } else {\n                this.feedbackAmplitude = 0;\n            }\n\n            for (let j: number = 0; j < Config.operatorCount + (this.type == InstrumentType.fm6op?2:0); j++) {\n                const operator: Operator = this.operators[j];\n                let operatorObject: any = undefined;\n                if (instrumentObject[\"operators\"] != undefined) operatorObject = instrumentObject[\"operators\"][j];\n                if (operatorObject == undefined) operatorObject = {};\n\n                operator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject[\"frequency\"]);\n                if (operator.frequency == -1) operator.frequency = 0;\n                if (operatorObject[\"amplitude\"] != undefined) {\n                    operator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\n                } else {\n                    operator.amplitude = 0;\n                }\n                if (operatorObject[\"waveform\"] != undefined) {\n                    operator.waveform = Config.operatorWaves.findIndex(wave => wave.name == operatorObject[\"waveform\"]);\n                    if (operator.waveform == -1) {\n                        // GoldBox compatibility\n                        if (operatorObject[\"waveform\"] == \"square\") {\n                            operator.waveform = Config.operatorWaves.dictionary[\"pulse width\"].index;\n                            operator.pulseWidth = 5;\n                        } else {\n                            operator.waveform = 0;\n                        }\n\n                    }\n                } else {\n                    operator.waveform = 0;\n                }\n                if (operatorObject[\"pulseWidth\"] != undefined) {\n                    operator.pulseWidth = operatorObject[\"pulseWidth\"] | 0;\n                } else {\n                    operator.pulseWidth = 5;\n                }\n            }\n        }\n        else if (this.type == InstrumentType.customChipWave) {\n            if (instrumentObject[\"customChipWave\"]) {\n\n                for (let i: number = 0; i < 64; i++) {\n                    this.customChipWave[i] = instrumentObject[\"customChipWave\"][i];\n                }\n\n\n                let sum: number = 0.0;\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\n                    sum += this.customChipWave[i];\n                }\n                const average: number = sum / this.customChipWave.length;\n\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n                let cumulative: number = 0;\n                let wavePrev: number = 0;\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = this.customChipWave[i] - average;\n                    this.customChipWaveIntegral[i] = cumulative;\n                }\n\n                // 65th, last sample is for anti-aliasing\n                this.customChipWaveIntegral[64] = 0.0;\n            }\n        } else if (this.type == InstrumentType.mod) {\n            if (instrumentObject[\"modChannels\"] != undefined) {\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                    this.modChannels[mod] = instrumentObject[\"modChannels\"][mod];\n                    this.modInstruments[mod] = instrumentObject[\"modInstruments\"][mod];\n                    this.modulators[mod] = instrumentObject[\"modSettings\"][mod];\n                    // Due to an oversight, this isn't included in JSONs prior to JB 2.6.\n                    if (instrumentObject[\"modFilterTypes\"] != undefined)\n                    this.modFilterTypes[mod] = instrumentObject[\"modFilterTypes\"][mod];\n                }\n            }\n        }\n\n        if (this.type != InstrumentType.mod) {\n            // Arpeggio speed\n            if (this.chord == Config.chords.dictionary[\"arpeggio\"].index && instrumentObject[\"arpeggioSpeed\"] != undefined) {\n                this.arpeggioSpeed = instrumentObject[\"arpeggioSpeed\"];\n            }\n            else {\n                this.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12; // Decide whether to import arps as x3/4 speed\n            }\n\n            if (instrumentObject[\"fastTwoNoteArp\"] != undefined) {\n                this.fastTwoNoteArp = instrumentObject[\"fastTwoNoteArp\"];\n            }\n            else {\n                this.fastTwoNoteArp = useFastTwoNoteArp;\n            }\n\n            if (instrumentObject[\"clicklessTransition\"] != undefined) {\n                this.clicklessTransition = instrumentObject[\"clicklessTransition\"];\n            }\n            else {\n                this.clicklessTransition = false;\n            }\n\n            if (instrumentObject[\"aliases\"] != undefined) {\n                this.aliases = instrumentObject[\"aliases\"];\n            }\n            else {\n                this.aliases = false;\n            }\n\n            if (instrumentObject[\"noteFilterType\"] != undefined) {\n                this.noteFilterType = instrumentObject[\"noteFilterType\"];\n            }\n            if (instrumentObject[\"noteSimpleCut\"] != undefined) {\n                this.noteFilterSimpleCut = instrumentObject[\"noteSimpleCut\"];\n            }\n            if (instrumentObject[\"noteSimplePeak\"] != undefined) {\n                this.noteFilterSimplePeak = instrumentObject[\"noteSimplePeak\"];\n            }\n            if (instrumentObject[\"noteFilter\"] != undefined) {\n                this.noteFilter.fromJsonObject(instrumentObject[\"noteFilter\"]);\n            } else {\n                this.noteFilter.reset();\n            }\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                if (Array.isArray(instrumentObject[\"noteSubFilters\" + i])) {\n                    this.noteSubFilters[i] = new FilterSettings();\n                    this.noteSubFilters[i]!.fromJsonObject(instrumentObject[\"noteSubFilters\" + i]);\n                }\n            }\n            if (instrumentObject[\"eqFilterType\"] != undefined) {\n                this.eqFilterType = instrumentObject[\"eqFilterType\"];\n            }\n            if (instrumentObject[\"eqSimpleCut\"] != undefined) {\n                this.eqFilterSimpleCut = instrumentObject[\"eqSimpleCut\"];\n            }\n            if (instrumentObject[\"eqSimplePeak\"] != undefined) {\n                this.eqFilterSimplePeak = instrumentObject[\"eqSimplePeak\"];\n            }\n            if (Array.isArray(instrumentObject[\"eqFilter\"])) {\n                this.eqFilter.fromJsonObject(instrumentObject[\"eqFilter\"]);\n            } else {\n                this.eqFilter.reset();\n\n                const legacySettings: LegacySettings = {};\n\n                // Try converting from legacy filter settings.\n                const filterCutoffMaxHz: number = 8000;\n                const filterCutoffRange: number = 11;\n                const filterResonanceRange: number = 8;\n                if (instrumentObject[\"filterCutoffHz\"] != undefined) {\n                    legacySettings.filterCutoff = clamp(0, filterCutoffRange, Math.round((filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / filterCutoffMaxHz) / Math.LN2));\n                } else {\n                    legacySettings.filterCutoff = (this.type == InstrumentType.chip) ? 6 : 10;\n                }\n                if (instrumentObject[\"filterResonance\"] != undefined) {\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, Math.round((filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\n                } else {\n                    legacySettings.filterResonance = 0;\n                }\n\n                legacySettings.filterEnvelope = getEnvelope(instrumentObject[\"filterEnvelope\"]);\n                legacySettings.pulseEnvelope = getEnvelope(instrumentObject[\"pulseEnvelope\"]);\n                legacySettings.feedbackEnvelope = getEnvelope(instrumentObject[\"feedbackEnvelope\"]);\n                if (Array.isArray(instrumentObject[\"operators\"])) {\n                    legacySettings.operatorEnvelopes = [];\n                    for (let j: number = 0; j < Config.operatorCount; j++) {\n                        let envelope: Envelope | undefined;\n                        if (instrumentObject[\"operators\"][j] != undefined) {\n                            envelope = getEnvelope(instrumentObject[\"operators\"][j][\"envelope\"]);\n                        }\n                        legacySettings.operatorEnvelopes[j] = (envelope != undefined) ? envelope : Config.envelopes.dictionary[\"none\"];\n                    }\n                }\n\n                // Try converting from even older legacy filter settings.\n                if (instrumentObject[\"filter\"] != undefined) {\n                    const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\n                    const legacyToEnvelope: string[] = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\n                    const filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\n                    const oldFilterNames: Dictionary<number> = { \"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4 };\n                    let legacyFilter: number = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\n                    if (legacyFilter == -1) legacyFilter = 0;\n                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                    legacySettings.filterEnvelope = getEnvelope(legacyToEnvelope[legacyFilter]);\n                    legacySettings.filterResonance = 0;\n                }\n\n                this.convertLegacySettings(legacySettings, true);\n            }\n\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                if (Array.isArray(instrumentObject[\"eqSubFilters\" + i])) {\n                    this.eqSubFilters[i] = new FilterSettings();\n                    this.eqSubFilters[i]!.fromJsonObject(instrumentObject[\"eqSubFilters\" + i]);\n                }\n            }\n\n            if (Array.isArray(instrumentObject[\"envelopes\"])) {\n                const envelopeArray: any[] = instrumentObject[\"envelopes\"];\n                for (let i = 0; i < envelopeArray.length; i++) {\n                    if (this.envelopeCount >= Config.maxEnvelopeCount) break;\n                    const tempEnvelope: EnvelopeSettings = new EnvelopeSettings();\n                    tempEnvelope.fromJsonObject(envelopeArray[i]);\n                    this.addEnvelope(tempEnvelope.target, tempEnvelope.index, tempEnvelope.envelope);\n                }\n            }\n        }\n   \t\t // advloop addition\n            if (type === 0) {\n                if (instrumentObject[\"isUsingAdvancedLoopControls\"] != undefined) {\n                    this.isUsingAdvancedLoopControls = instrumentObject[\"isUsingAdvancedLoopControls\"];\n                    this.chipWaveLoopStart = instrumentObject[\"chipWaveLoopStart\"];\n                    this.chipWaveLoopEnd = instrumentObject[\"chipWaveLoopEnd\"];\n                    this.chipWaveLoopMode = instrumentObject[\"chipWaveLoopMode\"];\n                    this.chipWavePlayBackwards = instrumentObject[\"chipWavePlayBackwards\"];\n                    this.chipWaveStartOffset = instrumentObject[\"chipWaveStartOffset\"];\n                } else {\n                    this.isUsingAdvancedLoopControls = false;\n                    this.chipWaveLoopStart = 0;\n                    this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n                    this.chipWaveLoopMode = 0;\n                    this.chipWavePlayBackwards = false;\n                    this.chipWaveStartOffset = 0;\n                }\n            }\n\t}\t\n           // advloop addition\n\n        public getLargestControlPointCount(forNoteFilter: boolean) {\n        let largest: number;\n        if (forNoteFilter) {\n            largest = this.noteFilter.controlPointCount;\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                if (this.noteSubFilters[i] != null && this.noteSubFilters[i]!.controlPointCount > largest)\n                    largest = this.noteSubFilters[i]!.controlPointCount;\n            }\n        }\n        else {\n            largest = this.eqFilter.controlPointCount;\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                if (this.eqSubFilters[i] != null && this.eqSubFilters[i]!.controlPointCount > largest)\n                    largest = this.eqSubFilters[i]!.controlPointCount;\n            }\n        }\n        return largest;\n    }\n\n    public static frequencyFromPitch(pitch: number): number {\n        return 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);\n    }\n\n    public addEnvelope(target: number, index: number, envelope: number): void {\n        let makeEmpty: boolean = false;\n        if (!this.supportsEnvelopeTarget(target, index)) makeEmpty = true;\n        if (this.envelopeCount >= Config.maxEnvelopeCount) throw new Error();\n        while (this.envelopes.length <= this.envelopeCount) this.envelopes[this.envelopes.length] = new EnvelopeSettings();\n        const envelopeSettings: EnvelopeSettings = this.envelopes[this.envelopeCount];\n        envelopeSettings.target = makeEmpty ? Config.instrumentAutomationTargets.dictionary[\"none\"].index : target;\n        envelopeSettings.index = makeEmpty ? 0 : index;\n        envelopeSettings.envelope = envelope;\n        this.envelopeCount++;\n    }\n\n    public supportsEnvelopeTarget(target: number, index: number): boolean {\n        const automationTarget: AutomationTarget = Config.instrumentAutomationTargets[target];\n        if (automationTarget.computeIndex == null && automationTarget.name != \"none\") {\n\t\t\treturn false;\n\t\t}\n        if (index >= automationTarget.maxCount) {\n            return false;\n        }\n        if (automationTarget.compatibleInstruments != null && automationTarget.compatibleInstruments.indexOf(this.type) == -1) {\n            return false;\n        }\n        if (automationTarget.effect != null && (this.effects & (1 << automationTarget.effect)) == 0) {\n            return false;\n        }\n        if (automationTarget.isFilter) {\n            //if (automationTarget.perNote) {\n            let useControlPointCount: number = this.noteFilter.controlPointCount;\n            if (this.noteFilterType)\n                useControlPointCount = 1;\n            if (index >= useControlPointCount) return false;\n            //} else {\n            //\tif (index >= this.eqFilter.controlPointCount)   return false;\n            //}\n        }\n        return true;\n    }\n\n    public clearInvalidEnvelopeTargets(): void {\n        for (let envelopeIndex: number = 0; envelopeIndex < this.envelopeCount; envelopeIndex++) {\n            const target: number = this.envelopes[envelopeIndex].target;\n            const index: number = this.envelopes[envelopeIndex].index;\n            if (!this.supportsEnvelopeTarget(target, index)) {\n                this.envelopes[envelopeIndex].target = Config.instrumentAutomationTargets.dictionary[\"none\"].index;\n                this.envelopes[envelopeIndex].index = 0;\n            }\n        }\n    }\n\n    public getTransition(): Transition {\n        return effectsIncludeTransition(this.effects) ? Config.transitions[this.transition] :\n            (this.type == InstrumentType.mod ? Config.transitions.dictionary[\"interrupt\"] : Config.transitions.dictionary[\"normal\"]);\n    }\n\n    public getFadeInSeconds(): number {\n        return (this.type == InstrumentType.drumset) ? 0.0 : Synth.fadeInSettingToSeconds(this.fadeIn);\n    }\n\n    public getFadeOutTicks(): number {\n        return (this.type == InstrumentType.drumset) ? Config.drumsetFadeOutTicks : Synth.fadeOutSettingToTicks(this.fadeOut)\n    }\n\n    public getChord(): Chord {\n        return effectsIncludeChord(this.effects) ? Config.chords[this.chord] : Config.chords.dictionary[\"simultaneous\"];\n    }\n\n    public getDrumsetEnvelope(pitch: number): Envelope {\n        if (this.type != InstrumentType.drumset) throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\n        return Config.envelopes[this.drumsetEnvelopes[pitch]];\n    }\n}\n\nexport class Channel {\n    public octave: number = 0;\n    public readonly instruments: Instrument[] = [];\n    public readonly patterns: Pattern[] = [];\n    public readonly bars: number[] = [];\n    public muted: boolean = false;\n    public name: string = \"\";\n}\n\nexport class Song {\n    private static readonly _format: string = \"UltraBox\";\n    private static readonly _oldestBeepboxVersion: number = 2;\n    private static readonly _latestBeepboxVersion: number = 9;\n    private static readonly _oldestJummBoxVersion: number = 1;\n    private static readonly _latestJummBoxVersion: number = 6;\n    private static readonly _oldestGoldBoxVersion: number = 1;\n    private static readonly _latestGoldBoxVersion: number = 4;\n    private static readonly _oldestUltraBoxVersion: number = 1;\n    private static readonly _latestUltraBoxVersion: number = 5;\n    // One-character variant detection at the start of URL to distinguish variants such as JummBox, Or Goldbox. \"j\" and \"g\" respectively\n\t//also \"u\" is ultrabox lol\n    private static readonly _variant = 0x75; //\"u\" ~ ultrabox\n\n    public title: string;\n    public scale: number;\n    public scaleCustom: boolean[] = [];\n    public key: number;\n    public octave: number;\n    public tempo: number;\n    public reverb: number;\n    public beatsPerBar: number;\n    public barCount: number;\n    public patternsPerChannel: number;\n    public rhythm: number;\n    public layeredInstruments: boolean;\n    public patternInstruments: boolean;\n    public loopStart: number;\n    public loopLength: number;\n    public pitchChannelCount: number;\n    public noiseChannelCount: number;\n    public modChannelCount: number;\n    public readonly channels: Channel[] = [];\n    public limitDecay: number = 4.0;\n    public limitRise: number = 4000.0;\n    public compressionThreshold: number = 1.0;\n    public limitThreshold: number = 1.0;\n    public compressionRatio: number = 1.0;\n    public limitRatio: number = 1.0;\n    public masterGain: number = 1.0;\n    public inVolumeCap: number = 0.0;\n    public outVolumeCap: number = 0.0;\n\n    constructor(string?: string) {\n        if (string != undefined) {\n            this.fromBase64String(string);\n        } else {\n            this.initToDefault(true);\n        }\n    }\n\n    // Returns the ideal new note volume when dragging (max volume for a normal note, a \"neutral\" value for mod notes based on how they work)\n    public getNewNoteVolume = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\n            return 6;\n        else {\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\n            modCount = Config.modCount - modCount - 1;\n\n            let vol: number | undefined = Config.modulators[this.channels[modChannel].instruments[modInstrument].modulators[modCount]].newNoteVol;\n\n            // For tempo, actually use user defined tempo\n            let tempoIndex: number = Config.modulators.dictionary[\"tempo\"].index;\n            if (this.channels[modChannel].instruments[modInstrument].modulators[modCount] == tempoIndex) {\n                vol = this.tempo - Config.modulators[tempoIndex].convertRealFactor;\n            }\n\n            if (vol != undefined)\n                return vol;\n            else\n                return 6;\n        }\n    }\n\n\n    public getVolumeCap = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\n            return 6;\n        else {\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\n            modCount = Config.modCount - modCount - 1;\n\n            let instrument: Instrument = this.channels[modChannel].instruments[modInstrument];\n            let modulator = Config.modulators[instrument.modulators[modCount]];\n            let cap: number | undefined = modulator.maxRawVol;\n\n            if (cap != undefined) {\n                // For filters, cap is dependent on which filter setting is targeted\n                if (modulator.name == \"eq filter\" || modulator.name == \"note filter\") {\n                    // type 0: number of filter morphs\n                    // type 1/odd: number of filter x positions\n                    // type 2/even: number of filter y positions\n                    cap = Config.filterMorphCount - 1;\n                    if (instrument.modFilterTypes[modCount] > 0 && instrument.modFilterTypes[modCount] % 2) {\n                        cap = Config.filterFreqRange;\n                    } else if (instrument.modFilterTypes[modCount] > 0) {\n                        cap = Config.filterGainRange;\n                    }\n                }\n                return cap;\n            }\n            else\n                return 6;\n        }\n    }\n\n    public getVolumeCapForSetting = (isMod: boolean, modSetting: number, filterType?: number): number => {\n        if (!isMod)\n            return Config.noteSizeMax;\n        else {\n            let cap: number | undefined = Config.modulators[modSetting].maxRawVol;\n            if (cap != undefined) {\n\n                // For filters, cap is dependent on which filter setting is targeted\n                if (filterType != undefined && (Config.modulators[modSetting].name == \"eq filter\" || Config.modulators[modSetting].name == \"note filter\")) {\n                    // type 0: number of filter morphs\n                    // type 1/odd: number of filter x positions\n                    // type 2/even: number of filter y positions\n                    cap = Config.filterMorphCount - 1;\n                    if (filterType > 0 && filterType % 2) {\n                        cap = Config.filterFreqRange;\n                    } else if (filterType > 0) {\n                        cap = Config.filterGainRange;\n                    }\n                }\n\n                return cap;\n            }\n            else\n                return Config.noteSizeMax;\n        }\n    }\n\n    public getChannelCount(): number {\n        return this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;\n    }\n\n    public getMaxInstrumentsPerChannel(): number {\n        return Math.max(\n            this.layeredInstruments ? Config.layeredInstrumentCountMax : Config.instrumentCountMin,\n            this.patternInstruments ? Config.patternInstrumentCountMax : Config.instrumentCountMin);\n    }\n\n    public getMaxInstrumentsPerPattern(channelIndex: number): number {\n        return this.getMaxInstrumentsPerPatternForChannel(this.channels[channelIndex]);\n    }\n\n    public getMaxInstrumentsPerPatternForChannel(channel: Channel): number {\n        return this.layeredInstruments\n            ? Math.min(Config.layeredInstrumentCountMax, channel.instruments.length)\n            : 1;\n    }\n\n    public getChannelIsNoise(channelIndex: number): boolean {\n        return (channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount);\n    }\n\n    public getChannelIsMod(channelIndex: number): boolean {\n        return (channelIndex >= this.pitchChannelCount + this.noiseChannelCount);\n    }\n\n    public initToDefault(andResetChannels: boolean = true): void {\n        this.scale = 0;\n        //this.scaleCustom = [true, false, true, true, false, false, false, true, true, false, true, true];\n\tthis.scaleCustom = [true, false, false, false, false, false, false, false, false, false, false, false];\n        this.key = 0;\n        this.octave = 0;\n        this.loopStart = 0;\n        this.loopLength = 4;\n        this.tempo = 120;\n        this.reverb = 0;\n        this.beatsPerBar = 8;\n        this.barCount = 16;\n        this.patternsPerChannel = 8;\n        this.rhythm = 3;\n        this.layeredInstruments = false;\n        this.patternInstruments = false;\n\n        this.title = \"Untitled\";\n        document.title = EditorConfig.versionDisplayName;\n\n        if (andResetChannels) {\n            this.pitchChannelCount = 3;\n            this.noiseChannelCount = 1;\n            this.modChannelCount = 0;\n            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                const isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\n                const isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\n                if (this.channels.length <= channelIndex) {\n                    this.channels[channelIndex] = new Channel();\n                }\n                const channel: Channel = this.channels[channelIndex];\n                channel.octave = Math.max(3 - channelIndex, 0); // [3, 2, 1, 0]; Descending octaves with drums at zero in last channel.\n\n                for (let pattern: number = 0; pattern < this.patternsPerChannel; pattern++) {\n                    if (channel.patterns.length <= pattern) {\n                        channel.patterns[pattern] = new Pattern();\n                    } else {\n                        channel.patterns[pattern].reset();\n                    }\n                }\n                channel.patterns.length = this.patternsPerChannel;\n\n                for (let instrument: number = 0; instrument < Config.instrumentCountMin; instrument++) {\n                    if (channel.instruments.length <= instrument) {\n                        channel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);\n                    }\n                    channel.instruments[instrument].setTypeAndReset(isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip), isNoiseChannel, isModChannel);\n                }\n                channel.instruments.length = Config.instrumentCountMin;\n\n                for (let bar: number = 0; bar < this.barCount; bar++) {\n                    channel.bars[bar] = bar < 4 ? 1 : 0;\n                }\n                channel.bars.length = this.barCount;\n            }\n            this.channels.length = this.getChannelCount();\n        }\n    }\n\n    public toBase64String(): string {\n        let bits: BitFieldWriter;\n        let buffer: number[] = [];\n\n        buffer.push(Song._variant);\n                 //   buffer.push(base64IntToCharCode[Song._latestGoldBoxVersion]);\n\t\t buffer.push(base64IntToCharCode[Song._latestUltraBoxVersion]);\n\n        // Length of the song name string\n        buffer.push(SongTagCode.songTitle);\n        var encodedSongTitle: string = encodeURIComponent(this.title);\n        buffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);\n\n        // Actual encoded string follows\n        for (let i: number = 0; i < encodedSongTitle.length; i++) {\n            buffer.push(encodedSongTitle.charCodeAt(i));\n        }\n\n        buffer.push(SongTagCode.channelCount, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);\n        buffer.push(SongTagCode.scale, base64IntToCharCode[this.scale]);\n        if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n            for (var i = 1; i < Config.pitchesPerOctave; i++) {\n                buffer.push(base64IntToCharCode[this.scaleCustom[i]?1:0]) // ineffiecent? yes, all we're going to do for now? hell yes\n            }\n        }\n        buffer.push(SongTagCode.key, base64IntToCharCode[this.key], base64IntToCharCode[this.octave - Config.octaveMin]);\n        buffer.push(SongTagCode.loopStart, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\n        buffer.push(SongTagCode.loopEnd, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\n        buffer.push(SongTagCode.tempo, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);\n        buffer.push(SongTagCode.beatCount, base64IntToCharCode[this.beatsPerBar - 1]);\n        buffer.push(SongTagCode.barCount, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\n        buffer.push(SongTagCode.patternCount, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\n        buffer.push(SongTagCode.rhythm, base64IntToCharCode[this.rhythm]);\n\n        // Push limiter settings, but only if they aren't the default!\n        buffer.push(SongTagCode.limiterSettings);\n        if (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {\n            buffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]); // 0 ~ 1.15 uneven, mapped to 0 ~ 20\n            buffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]); // 0 ~ 10 uneven, mapped to 0 ~ 20\n            buffer.push(base64IntToCharCode[this.limitDecay]); // directly 1 ~ 30\n            buffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]); // 2000 ~ 10000 by 250, mapped to 0 ~ 32\n            buffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]); // 0 ~ 1.1 by 0.05, mapped to 0 ~ 22\n            buffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]); // 0 ~ 2 by 0.05, mapped to 0 ~ 40\n            buffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]); // 0 ~ 5 by 0.02, mapped to 0 ~ 250\n        }\n        else {\n            buffer.push(base64IntToCharCode[0x3f]); // Not using limiter\n        }\n\n        buffer.push(SongTagCode.channelNames);\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\n            // Length of the channel name string\n            var encodedChannelName: string = encodeURIComponent(this.channels[channel].name);\n            buffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);\n\n            // Actual encoded string follows\n            for (let i: number = 0; i < encodedChannelName.length; i++) {\n                buffer.push(encodedChannelName.charCodeAt(i));\n            }\n        }\n\n        buffer.push(SongTagCode.instrumentCount, base64IntToCharCode[(<any>this.layeredInstruments << 1) | <any>this.patternInstruments]);\n        if (this.layeredInstruments || this.patternInstruments) {\n            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                buffer.push(base64IntToCharCode[this.channels[channelIndex].instruments.length - Config.instrumentCountMin]);\n            }\n        }\n\n        buffer.push(SongTagCode.channelOctave);\n        for (let channelIndex: number = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\n            buffer.push(base64IntToCharCode[this.channels[channelIndex].octave]);\n        }\n\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                const instrument: Instrument = this.channels[channelIndex].instruments[i];\n                buffer.push(SongTagCode.startInstrument, base64IntToCharCode[instrument.type]);\n                buffer.push(SongTagCode.volume, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);\n                buffer.push(SongTagCode.preset, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\n\n                buffer.push(SongTagCode.eqFilter);\n                buffer.push(base64IntToCharCode[+instrument.eqFilterType]);\n                if (instrument.eqFilterType) {\n                    buffer.push(base64IntToCharCode[instrument.eqFilterSimpleCut]);\n                    buffer.push(base64IntToCharCode[instrument.eqFilterSimplePeak]);\n                }\n                else {\n                    if (instrument.eqFilter == null) {\n                        // Push null filter settings\n                        buffer.push(base64IntToCharCode[0]);\n                        console.log(\"Null EQ filter settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\n                    } else {\n                        buffer.push(base64IntToCharCode[instrument.eqFilter.controlPointCount]);\n                        for (let j: number = 0; j < instrument.eqFilter.controlPointCount; j++) {\n                            const point: FilterControlPoint = instrument.eqFilter.controlPoints[j];\n                            buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                        }\n                    }\n\n                    // Push subfilters as well. Skip Index 0, is a copy of the base filter.\n                    let usingSubFilterBitfield: number = 0;\n                    for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                        usingSubFilterBitfield |= (+(instrument.eqSubFilters[j + 1] != null) << j);\n                    }\n                    // Put subfilter usage into 2 chars (12 bits)\n                    buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n                    // Put subfilter info in for all used subfilters\n                    for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                        if (usingSubFilterBitfield & (1 << j)) {\n                            buffer.push(base64IntToCharCode[instrument.eqSubFilters[j + 1]!.controlPointCount]);\n                            for (let k: number = 0; k < instrument.eqSubFilters[j + 1]!.controlPointCount; k++) {\n                                const point: FilterControlPoint = instrument.eqSubFilters[j + 1]!.controlPoints[k];\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                            }\n                        }\n                    }\n                }\n\n                // The list of enabled effects is represented as a 12-bit bitfield using two six-bit characters.\n                buffer.push(SongTagCode.effects, base64IntToCharCode[instrument.effects >> 6], base64IntToCharCode[instrument.effects & 63]);\n                if (effectsIncludeNoteFilter(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[+instrument.noteFilterType]);\n                    if (instrument.noteFilterType) {\n                        buffer.push(base64IntToCharCode[instrument.noteFilterSimpleCut]);\n                        buffer.push(base64IntToCharCode[instrument.noteFilterSimplePeak]);\n                    }\n                    else {\n                        if (instrument.noteFilter == null) {\n                            // Push null filter settings\n                            buffer.push(base64IntToCharCode[0]);\n                            console.log(\"Null note filter settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\n                        }\n                        else {\n                            buffer.push(base64IntToCharCode[instrument.noteFilter.controlPointCount]);\n                            for (let j: number = 0; j < instrument.noteFilter.controlPointCount; j++) {\n                                const point: FilterControlPoint = instrument.noteFilter.controlPoints[j];\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                            }\n                        }\n\n                        // Push subfilters as well. Skip Index 0, is a copy of the base filter.\n                        let usingSubFilterBitfield: number = 0;\n                        for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                            usingSubFilterBitfield |= (+(instrument.noteSubFilters[j + 1] != null) << j);\n                        }\n                        // Put subfilter usage into 2 chars (12 bits)\n                        buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n                        // Put subfilter info in for all used subfilters\n                        for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                            if (usingSubFilterBitfield & (1 << j)) {\n                                buffer.push(base64IntToCharCode[instrument.noteSubFilters[j + 1]!.controlPointCount]);\n                                for (let k: number = 0; k < instrument.noteSubFilters[j + 1]!.controlPointCount; k++) {\n                                    const point: FilterControlPoint = instrument.noteSubFilters[j + 1]!.controlPoints[k];\n                                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                                }\n                            }\n                        }\n                    }\n                }\n                if (effectsIncludeTransition(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.transition]);\n                }\n                if (effectsIncludeChord(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.chord]);\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\n                    if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index) {\n                        buffer.push(base64IntToCharCode[instrument.arpeggioSpeed]);\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\n                    }\n                }\n                if (effectsIncludePitchShift(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.pitchShift]);\n                }\n                if (effectsIncludeDetune(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3F]);\n                }\n                if (effectsIncludeVibrato(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.vibrato]);\n                    // Custom vibrato settings\n                    if (instrument.vibrato == Config.vibratos.length) {\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDelay)]);\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\n                    }\n                }\n                if (effectsIncludeDistortion(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.distortion]);\n                    // Aliasing is tied into distortion for now\n                    buffer.push(base64IntToCharCode[+instrument.aliases]);\n                }\n                if (effectsIncludeBitcrusher(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.bitcrusherFreq], base64IntToCharCode[instrument.bitcrusherQuantization]);\n                }\n                if (effectsIncludePanning(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.pan >> 6], base64IntToCharCode[instrument.pan & 0x3f]);\n                    buffer.push(base64IntToCharCode[instrument.panDelay]);\n                }\n                if (effectsIncludeChorus(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.chorus]);\n                }\n                if (effectsIncludeEcho(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.echoSustain], base64IntToCharCode[instrument.echoDelay]);\n                }\n                if (effectsIncludeReverb(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.reverb]);\n                }\n\n                if (instrument.type != InstrumentType.drumset) {\n                    buffer.push(SongTagCode.fadeInOut, base64IntToCharCode[instrument.fadeIn], base64IntToCharCode[instrument.fadeOut]);\n                    // Transition info follows transition song tag\n                    buffer.push(base64IntToCharCode[+instrument.clicklessTransition]);\n                }\n\n                if (instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString) {\n                    buffer.push(SongTagCode.harmonics);\n                    const harmonicsBits: BitFieldWriter = new BitFieldWriter();\n                    for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n                        harmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\n                    }\n                    harmonicsBits.encodeBase64(buffer);\n                }\n\n                if (instrument.type == InstrumentType.chip) {\n                   \t\t\t\t\t\tif (instrument.chipWave > 186) {\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);\t\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[3]);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (instrument.chipWave > 124) {\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);\t\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[2]);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (instrument.chipWave > 62) {\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);\t\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[1]);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave]);\t\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[0]);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbuffer.push(104, base64IntToCharCode[instrument.unison]);\n                        if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n\n\t\t\t\t\t\t// Repurposed for chip wave loop controls.\n\t\t\t\t\t\tbuffer.push(SongTagCode.filterResonance);\n\t\t\t\t\t\t// The encoding here is as follows:\n\t\t\t\t\t\t// 0b11111_1\n\t\t\t\t\t\t//         ^-- isUsingAdvancedLoopControls\n\t\t\t\t\t\t//   ^^^^^---- chipWaveLoopMode\n\t\t\t\t\t\t// This essentially allocates 32 different loop modes,\n\t\t\t\t\t\t// which should be plenty.\n\t\t\t\t\t\tconst encodedLoopMode: number = (\n\t\t\t\t\t\t\t(clamp(0, 31 + 1, instrument.chipWaveLoopMode) << 1)\n\t\t\t\t\t\t\t| (instrument.isUsingAdvancedLoopControls ? 1 : 0)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[encodedLoopMode]);\n\t\t\t\t\t\t// The same encoding above is used here, but with the release mode\n\t\t\t\t\t\t// (which isn't implemented currently), and the backwards toggle.\n\t\t\t\t\t\tconst encodedReleaseMode: number = (\n\t\t\t\t\t\t\t(clamp(0, 31 + 1, 0) << 1)\n\t\t\t\t\t\t\t| (instrument.chipWavePlayBackwards ? 1 : 0)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[encodedReleaseMode]);\n\t\t\t\t\t\tencode32BitNumber(buffer, instrument.chipWaveLoopStart);\n\t\t\t\t\t\tencode32BitNumber(buffer, instrument.chipWaveLoopEnd);\n\t\t\t\t\t\tencode32BitNumber(buffer, instrument.chipWaveStartOffset);\n\n                } else if (instrument.type == InstrumentType.fm || instrument.type == InstrumentType.fm6op) {\n                    if (instrument.type == InstrumentType.fm) {\n                        buffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm]);\n                        buffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType]);\n                    } else {\n                        buffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm6Op]);\n                        if (instrument.algorithm6Op == 0) {\n                            buffer.push(SongTagCode.chord, base64IntToCharCode[instrument.customAlgorithm.carrierCount]);\n                            buffer.push(SongTagCode.effects);\n                            for (let o: number = 0; o < instrument.customAlgorithm.modulatedBy.length; o++) {\n                                for (let j: number = 0; j < instrument.customAlgorithm.modulatedBy[o].length; j++) {\n                                    buffer.push(base64IntToCharCode[instrument.customAlgorithm.modulatedBy[o][j]]);\n                                }\n                                buffer.push(SongTagCode.operatorWaves);\n                            }\n                            buffer.push(SongTagCode.effects);\n                        }\n                        buffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType6Op]);\n                        if (instrument.feedbackType6Op == 0) {\n                            buffer.push(SongTagCode.effects);\n                            for (let o: number = 0; o < instrument.customFeedbackType.indices.length; o++) {\n                                for (let j: number = 0; j < instrument.customFeedbackType.indices[o].length; j++) {\n                                    buffer.push(base64IntToCharCode[instrument.customFeedbackType.indices[o][j]]);\n                                }\n                                buffer.push(SongTagCode.operatorWaves);\n                            }\n                            buffer.push(SongTagCode.effects);\n                        }\n                    }\n                    buffer.push(SongTagCode.feedbackAmplitude, base64IntToCharCode[instrument.feedbackAmplitude]);\n\n                    buffer.push(SongTagCode.operatorFrequencies);\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op?6:Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\n                    }\n                    buffer.push(SongTagCode.operatorAmplitudes);\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\n                    }\n                    buffer.push(SongTagCode.operatorWaves);\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].waveform]);\n                        // Push pulse width if that type is used\n                        if (instrument.operators[o].waveform == 2) {\n                            buffer.push(base64IntToCharCode[instrument.operators[o].pulseWidth]);\n                        }\n                    }\n                } else if (instrument.type == InstrumentType.customChipWave) {\n                    if (instrument.chipWave > 186) {\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);\t\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[3]);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (instrument.chipWave > 124) {\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);\t\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[2]);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (instrument.chipWave > 62) {\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);\t\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[1]);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave]);\t\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[0]);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbuffer.push(104, base64IntToCharCode[instrument.unison]);\n                        if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                    buffer.push(SongTagCode.customChipWave);\n                    // Push custom wave values\n                    for (let j: number = 0; j < 64; j++) {\n                        buffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24) as number]);\n                    }\n                } else if (instrument.type == InstrumentType.noise) {\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipNoise]);\n                } else if (instrument.type == InstrumentType.spectrum) {\n                    buffer.push(SongTagCode.spectrum);\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                        spectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\n                    }\n                    spectrumBits.encodeBase64(buffer);\n                } else if (instrument.type == InstrumentType.drumset) {\n                    buffer.push(SongTagCode.drumsetEnvelopes);\n                    for (let j: number = 0; j < Config.drumCount; j++) {\n                        buffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\n                    }\n\n                    buffer.push(SongTagCode.spectrum);\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\n                    for (let j: number = 0; j < Config.drumCount; j++) {\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                            spectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\n                        }\n                    }\n                    spectrumBits.encodeBase64(buffer);\n                } else if (instrument.type == InstrumentType.harmonics) {\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                } else if (instrument.type == InstrumentType.pwm) {\n                    buffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth]);\n                    buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]); \n                } else if (instrument.type == InstrumentType.supersaw) {\n\t\t\t\t\tbuffer.push(SongTagCode.supersaw, base64IntToCharCode[instrument.supersawDynamism], base64IntToCharCode[instrument.supersawSpread], base64IntToCharCode[instrument.supersawShape]);\n\t\t\t\t\tbuffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth]);\n                    buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]);\n\t\t\t\t} else if (instrument.type == InstrumentType.pickedString) {\n                    if (Config.stringSustainRange > 0x20 || SustainType.length > 2) {\n\t\t\t\t\t\tthrow new Error(\"Not enough bits to represent sustain value and type in same base64 character.\");\n\t\t\t\t\t}\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                    buffer.push(SongTagCode.stringSustain, base64IntToCharCode[instrument.stringSustain | (instrument.stringSustainType << 5)]);\n                } else if (instrument.type == InstrumentType.mod) {\n                    // Handled down below. Could be moved, but meh.\n                } else {\n                    throw new Error(\"Unknown instrument type.\");\n                }\n\n                buffer.push(SongTagCode.envelopes, base64IntToCharCode[instrument.envelopeCount]);\n                // Added in JB v6: Options for envelopes come next.\n                buffer.push(base64IntToCharCode[instrument.envelopeSpeed]);\n                buffer.push(base64IntToCharCode[+instrument.discreteEnvelope]);\n                for (let envelopeIndex: number = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].target]);\n                    if (Config.instrumentAutomationTargets[instrument.envelopes[envelopeIndex].target].maxCount > 1) {\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].index]);\n                    }\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].envelope]);\n                }\n            }\n        }\n\n        buffer.push(SongTagCode.bars);\n        bits = new BitFieldWriter();\n        let neededBits: number = 0;\n        while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) for (let i: number = 0; i < this.barCount; i++) {\n            bits.write(neededBits, this.channels[channelIndex].bars[i]);\n        }\n        bits.encodeBase64(buffer);\n\n        buffer.push(SongTagCode.patterns);\n        bits = new BitFieldWriter();\n        const shapeBits: BitFieldWriter = new BitFieldWriter();\n        const bitsPerNoteSize: number = Song.getNeededBits(Config.noteSizeMax);\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            const channel: Channel = this.channels[channelIndex];\n            const maxInstrumentsPerPattern: number = this.getMaxInstrumentsPerPattern(channelIndex);\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n            const isModChannel: boolean = this.getChannelIsMod(channelIndex);\n            const neededInstrumentCountBits: number = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\n            const neededInstrumentIndexBits: number = Song.getNeededBits(channel.instruments.length - 1);\n\n            // Some info about modulator settings immediately follows in mod channels.\n            if (isModChannel) {\n                const neededModInstrumentIndexBits: number = Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\n                for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n\n                    let instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\n\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\n                        const modChannel: number = instrument.modChannels[mod];\n                        const modInstrument: number = instrument.modInstruments[mod];\n                        const modSetting: number = instrument.modulators[mod];\n                        const modFilter: number = instrument.modFilterTypes[mod];\n\n                        // Still using legacy \"mod status\" format, but doing it manually as it's only used in the URL now.\n                        // 0 - For pitch/noise\n                        // 1 - (used to be For noise, not needed)\n                        // 2 - For song\n                        // 3 - None\n\n                        let status: number = Config.modulators[modSetting].forSong ? 2 : 0;\n                        if (modSetting == Config.modulators.dictionary[\"none\"].index)\n                            status = 3;\n\n                        bits.write(2, status);\n\n                        // Channel/Instrument is only used if the status isn't \"song\" or \"none\".\n                        if (status == 0 || status == 1) {\n                            bits.write(8, modChannel);\n                            bits.write(neededModInstrumentIndexBits, modInstrument);\n                        }\n\n                        // Only used if setting isn't \"none\".\n                        if (status != 3) {\n                            bits.write(6, modSetting);\n                        }\n\n                        // Write mod filter info, only if this is a filter mod\n                        if (Config.modulators[instrument.modulators[mod]].name == \"eq filter\" || Config.modulators[instrument.modulators[mod]].name == \"note filter\") {\n                            bits.write(6, modFilter);\n                        }\n                    }\n                }\n            }\n            const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : channel.octave * Config.pitchesPerOctave;\n            let lastPitch: number = (isNoiseChannel ? 4 : octaveOffset);\n            const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\n            const recentShapes: string[] = [];\n            for (let i: number = 0; i < recentPitches.length; i++) {\n                recentPitches[i] += octaveOffset;\n            }\n            for (const pattern of channel.patterns) {\n                if (this.patternInstruments) {\n                    const instrumentCount: number = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, pattern.instruments.length);\n                    bits.write(neededInstrumentCountBits, instrumentCount - Config.instrumentCountMin);\n                    for (let i: number = 0; i < instrumentCount; i++) {\n                        bits.write(neededInstrumentIndexBits, pattern.instruments[i]);\n                    }\n                }\n\n                if (pattern.notes.length > 0) {\n                    bits.write(1, 1);\n\n                    let curPart: number = 0;\n                    for (const note of pattern.notes) {\n\n                        // For mod channels, a negative offset may be necessary.\n                        if (note.start < curPart && isModChannel) {\n                            bits.write(2, 0); // rest, then...\n                            bits.write(1, 1); // negative offset\n                            bits.writePartDuration(curPart - note.start);\n                        }\n\n                        if (note.start > curPart) {\n                            bits.write(2, 0); // rest\n                            if (isModChannel) bits.write(1, 0); // positive offset, only needed for mod channels\n                            bits.writePartDuration(note.start - curPart);\n                        }\n\n                        shapeBits.clear();\n\n                        // Old format was:\n                        // 0: 1 pitch, 10: 2 pitches, 110: 3 pitches, 111: 4 pitches\n                        // New format is:\n                        //      0: 1 pitch\n                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\n                        if (note.pitches.length == 1) {\n                            shapeBits.write(1, 0);\n                        } else {\n                            shapeBits.write(1, 1);\n                            shapeBits.write(3, note.pitches.length - 2);\n                        }\n\n                        shapeBits.writePinCount(note.pins.length - 1);\n\n                        if (!isModChannel) {\n                            shapeBits.write(bitsPerNoteSize, note.pins[0].size); // volume\n                        }\n                        else {\n                            shapeBits.write(9, note.pins[0].size); // Modulator value. 9 bits for now = 512 max mod value?\n                        }\n\n                        let shapePart: number = 0;\n                        let startPitch: number = note.pitches[0];\n                        let currentPitch: number = startPitch;\n                        const pitchBends: number[] = [];\n                        for (let i: number = 1; i < note.pins.length; i++) {\n                            const pin: NotePin = note.pins[i];\n                            const nextPitch: number = startPitch + pin.interval;\n                            if (currentPitch != nextPitch) {\n                                shapeBits.write(1, 1);\n                                pitchBends.push(nextPitch);\n                                currentPitch = nextPitch;\n                            } else {\n                                shapeBits.write(1, 0);\n                            }\n                            shapeBits.writePartDuration(pin.time - shapePart);\n                            shapePart = pin.time;\n                            if (!isModChannel) {\n                                shapeBits.write(bitsPerNoteSize, pin.size);\n                            } else {\n                                shapeBits.write(9, pin.size);\n                            }\n                        }\n\n                        const shapeString: string = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\n                        const shapeIndex: number = recentShapes.indexOf(shapeString);\n                        if (shapeIndex == -1) {\n                            bits.write(2, 1); // new shape\n                            bits.concat(shapeBits);\n                        } else {\n                            bits.write(1, 1); // old shape\n                            bits.writeLongTail(0, 0, shapeIndex);\n                            recentShapes.splice(shapeIndex, 1);\n                        }\n                        recentShapes.unshift(shapeString);\n                        if (recentShapes.length > 10) recentShapes.pop();\n\n                        const allPitches: number[] = note.pitches.concat(pitchBends);\n                        for (let i: number = 0; i < allPitches.length; i++) {\n                            const pitch: number = allPitches[i];\n                            const pitchIndex: number = recentPitches.indexOf(pitch);\n                            if (pitchIndex == -1) {\n                                let interval: number = 0;\n                                let pitchIter: number = lastPitch;\n                                if (pitchIter < pitch) {\n                                    while (pitchIter != pitch) {\n                                        pitchIter++;\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval++;\n                                    }\n                                } else {\n                                    while (pitchIter != pitch) {\n                                        pitchIter--;\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval--;\n                                    }\n                                }\n                                bits.write(1, 0);\n                                bits.writePitchInterval(interval);\n                            } else {\n                                bits.write(1, 1);\n                                bits.write(4, pitchIndex);\n                                recentPitches.splice(pitchIndex, 1);\n                            }\n                            recentPitches.unshift(pitch);\n                            if (recentPitches.length > 16) recentPitches.pop();\n\n                            if (i == note.pitches.length - 1) {\n                                lastPitch = note.pitches[0];\n                            } else {\n                                lastPitch = pitch;\n                            }\n                        }\n\n                        if (note.start == 0) {\n                            bits.write(1, note.continuesLastPattern ? 1 : 0);\n                        }\n\n                        curPart = note.end;\n                    }\n\n                    if (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\n                        bits.write(2, 0); // rest\n                        if (isModChannel) bits.write(1, 0); // positive offset\n                        bits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);\n                    }\n                } else {\n                    bits.write(1, 0);\n                }\n            }\n        }\n        let stringLength: number = bits.lengthBase64();\n        let digits: number[] = [];\n        while (stringLength > 0) {\n            digits.unshift(base64IntToCharCode[stringLength & 0x3f]);\n            stringLength = stringLength >> 6;\n        }\n        buffer.push(base64IntToCharCode[digits.length]);\n        Array.prototype.push.apply(buffer, digits); // append digits to buffer.\n        bits.encodeBase64(buffer);\n\t    \n        const maxApplyArgs: number = 64000;\n\t    \t\t\t            let customSamplesStr = \"\";\n            if(EditorConfig.customSamples != undefined && EditorConfig.customSamples.length > 0){\n              customSamplesStr = \"|\" + EditorConfig.customSamples.join(\"|\")\n              \n          }\n\t\t  //samplemark\n        if (buffer.length < maxApplyArgs) {\n            // Note: Function.apply may break for long argument lists. \n                            return String.fromCharCode.apply(null, buffer) + customSamplesStr;\n\t\t\t\t//samplemark\n        } else {\n            let result: string = \"\";\n            for (let i: number = 0; i < buffer.length; i += maxApplyArgs) {\n                result += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\n            }\n                          return result + customSamplesStr;\n\t\t\t   //samplemark\n        }\n    }\n\n    private static _envelopeFromLegacyIndex(legacyIndex: number): Envelope {\n        // I swapped the order of \"custom\"/\"steady\", now \"none\"/\"note size\".\n        if (legacyIndex == 0) legacyIndex = 1; else if (legacyIndex == 1) legacyIndex = 0;\n        return Config.envelopes[clamp(0, Config.envelopes.length, legacyIndex)];\n    }\n\n    public fromBase64String(compressed: string): void {\n        if (compressed == null || compressed == \"\") {\n            Song._clearSamples();\n\n            this.initToDefault(true);\n            return;\n        }\n        let charIndex: number = 0;\n        // skip whitespace.\n        while (compressed.charCodeAt(charIndex) <= CharCode.SPACE) charIndex++;\n        // skip hash mark.\n        if (compressed.charCodeAt(charIndex) == CharCode.HASH) charIndex++;\n        // if it starts with curly brace, treat it as JSON.\n        if (compressed.charCodeAt(charIndex) == CharCode.LEFT_CURLY_BRACE) {\n            this.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)));\n            return;\n        }\n\n        const variantTest: number = compressed.charCodeAt(charIndex);\n        let fromBeepBox: boolean;\n        let fromJummBox: boolean;\n        let fromGoldBox: boolean;\n\t    let fromUltraBox: boolean;\n        // let fromMidbox: boolean;\n        // let fromDogebox2: boolean;\n        // let fromAbyssBox: boolean;\n\n        // Detect variant here. If version doesn't match known variant, assume it is a vanilla string which does not report variant.\n        if (variantTest == 0x6A) { //\"j\"\n            fromBeepBox = false;\n            fromJummBox = true;\n            fromGoldBox = false;\n\t        fromUltraBox = false;\n            charIndex++;\n        } else if (variantTest == 0x67) { //\"g\"\n            fromBeepBox = false;\n            fromJummBox = false;\n            fromGoldBox = true;\n\t        fromUltraBox = false;\n            charIndex++;\n        } else if (variantTest == 0x75) { //\"u\"\n                fromBeepBox = false;\n                fromJummBox = false;\n                fromGoldBox = false;\n\t\t        fromUltraBox = true;\n                charIndex++;\n            } else {\n            fromBeepBox = true;\n            fromJummBox = false;\n            fromGoldBox = false;\n\t        fromUltraBox = false;\n        }\n\n        const version: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n        if (fromBeepBox && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion)) return;\n        if (fromJummBox && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion)) return;\n        if (fromGoldBox && (version == -1 || version > Song._latestGoldBoxVersion || version < Song._oldestGoldBoxVersion)) return;\n\t    if (fromUltraBox && (version == -1 || version > Song._latestUltraBoxVersion || version < Song._oldestUltraBoxVersion)) return;\n        const beforeTwo: boolean = version < 2;\n        const beforeThree: boolean = version < 3;\n        const beforeFour: boolean = version < 4;\n        const beforeFive: boolean = version < 5;\n        const beforeSix: boolean = version < 6;\n        const beforeSeven: boolean = version < 7;\n        const beforeEight: boolean = version < 8;\n        const beforeNine: boolean = version < 9;\n        this.initToDefault((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)));\n        const forceSimpleFilter: boolean = (fromBeepBox && beforeNine || fromJummBox && beforeFive);\n\n        let willLoadLegacySamplesForOldSongs: boolean = false;\n\n        if (fromUltraBox || fromGoldBox) {\n            compressed = compressed.replaceAll(\"%7C\", \"|\")\n                var compressed_array = compressed.split(\"|\");\n                compressed = compressed_array.shift()!;\n                if(EditorConfig.customSamples == null || EditorConfig.customSamples.join(\", \") != compressed_array.join(\", \")) {\n\n                    Song._restoreChipWaveListToDefault();\n\n                    let willLoadLegacySamples = false;\n                    let willLoadNintariboxSamples = false;\n                    let willLoadMarioPaintboxSamples = false;\n                    const customSampleUrls = [];\n                    const customSamplePresets: Preset[] = [];\n                    sampleLoadingState.statusTable = {};\n                    sampleLoadingState.urlTable = {};\n                    sampleLoadingState.totalSamples = 0;\n                    sampleLoadingState.samplesLoaded = 0;\n                    sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n                        sampleLoadingState.totalSamples,\n                        sampleLoadingState.samplesLoaded\n                    ));\n                    for (const url of compressed_array) {\n                        if (url.toLowerCase() === \"legacysamples\") {\n                            if (!willLoadLegacySamples) {\n                                willLoadLegacySamples = true;\n                                customSampleUrls.push(url);\n                                loadBuiltInSamples(0);\n                            }\n                        } \n                        else if (url.toLowerCase() === \"nintariboxsamples\") {\n                            if (!willLoadNintariboxSamples) {\n                                willLoadNintariboxSamples = true;\n                                customSampleUrls.push(url);\n                                loadBuiltInSamples(1);\n                            }\n                        }\n                        else if (url.toLowerCase() === \"mariopaintboxsamples\") {\n                            if (!willLoadMarioPaintboxSamples) {\n                                willLoadMarioPaintboxSamples = true;\n                                customSampleUrls.push(url);\n                                loadBuiltInSamples(2);\n                            }\n                        }\n                        \n                        else {\n                            // UB version 2 URLs and below will be using the old syntax, so we do need to parse it in that case.\n                            // UB version 3 URLs should only have the new syntax, though, unless the user has edited the URL manually.\n                            const parseOldSyntax: boolean = beforeThree;\n                            const ok: boolean = Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);\n                            if (!ok) {\n                                continue;\n                            }\n                        }\n                    }\n                    if (customSampleUrls.length > 0) {\n                        EditorConfig.customSamples = customSampleUrls;\n                    }\n                    if (customSamplePresets.length > 0) {\n                        const customSamplePresetsMap: DictionaryArray<Preset> = toNameMap(customSamplePresets);\n                        EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {\n                            name: \"Custom Sample Presets\",\n                            presets: customSamplePresetsMap,\n                            index: EditorConfig.presetCategories.length,\n                        };\n                        // EditorConfig.presetCategories.splice(1, 0, {\n                             // name: \"Custom Sample Presets\",\n                             // presets: customSamplePresets,\n                             // index: EditorConfig.presetCategories.length,\n                        // });\n                    }\n\n               \n                }\n                //samplemark\n        }\n\n        if (beforeThree && fromBeepBox) {\n            // Originally, the only instrument transition was \"instant\" and the only drum wave was \"retro\".\n            for (const channel of this.channels) {\n                channel.instruments[0].transition = Config.transitions.dictionary[\"interrupt\"].index;\n                channel.instruments[0].effects |= 1 << EffectType.transition;\n            }\n            this.channels[3].instruments[0].chipNoise = 0;\n        }\n\n        let legacySettingsCache: LegacySettings[][] | null = null;\n        if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n            // Unfortunately, old versions of BeepBox had a variety of different ways of saving\n            // filter-and-envelope-related parameters in the URL, and none of them directly\n            // correspond to the new way of saving these parameters. We can approximate the old\n            // settings by collecting all the old settings for an instrument and passing them to\n            // convertLegacySettings(), so I use this data structure to collect the settings\n            // for each instrument if necessary.\n            legacySettingsCache = [];\n            for (let i: number = legacySettingsCache.length; i < this.getChannelCount(); i++) {\n                legacySettingsCache[i] = [];\n                for (let j: number = 0; j < Config.instrumentCountMin; j++) legacySettingsCache[i][j] = {};\n            }\n        }\n\n        let legacyGlobalReverb: number = 0; // beforeNine reverb was song-global, record that reverb here and adapt it to instruments as needed.\n\n        let instrumentChannelIterator: number = 0;\n        let instrumentIndexIterator: number = -1;\n        let command: number;\n        let useSlowerArpSpeed: boolean = false;\n        let useFastTwoNoteArp: boolean = false;\n        while (charIndex < compressed.length) switch (command = compressed.charCodeAt(charIndex++)) {\n            case SongTagCode.songTitle: {\n                // Length of song name string\n                var songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                this.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\n                document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\n\n                charIndex += songNameLength;\n            } break;\n            case SongTagCode.channelCount: {\n                this.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                this.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                if (fromBeepBox || beforeTwo) {\n                    // No mod channel support before jummbox v2\n                    this.modChannelCount = 0;\n                } else {\n                    this.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                }\n                this.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\n                this.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\n                this.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);\n\n                for (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\n                    this.channels[channelIndex] = new Channel();\n                }\n                this.channels.length = this.getChannelCount();\n                if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    for (let i: number = legacySettingsCache!.length; i < this.getChannelCount(); i++) {\n                        legacySettingsCache![i] = [];\n                        for (let j: number = 0; j < Config.instrumentCountMin; j++) legacySettingsCache![i][j] = {};\n                    }\n                }\n            } break;\n            case SongTagCode.scale: {\n                this.scale = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                // All the scales were jumbled around by Jummbox. Just convert to free.\n                if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n                    for (var i = 1; i < Config.pitchesPerOctave; i++) {\n                        this.scaleCustom[i] = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] == 1; // ineffiecent? yes, all we're going to do for now? hell yes\n                    }\n                }\n                if (fromBeepBox) this.scale = 0;\n            } break;\n            case SongTagCode.key: {\n                if (beforeSeven && fromBeepBox) {\n                    this.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    this.octave = 0;\n                } else if (fromBeepBox || fromJummBox) {\n                    this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    this.octave = 0;\n                } else if (fromGoldBox || (beforeThree && fromUltraBox)) {\n                    // GoldBox (so far) didn't introduce any new keys, but old\n                    // songs made with early versions of UltraBox share the\n                    // same URL format, and those can have more keys. This\n                    // shouldn't really result in anything other than 0-11 for\n                    // the key and 0 for the octave for GoldBox songs.\n                    const rawKeyIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const [key, octave]: [number, number] = convertLegacyKeyToKeyAndOctave(rawKeyIndex);\n                    this.key = key;\n                    this.octave = octave;\n                } else {\n                    this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.octaveMin);\n                }\n            } break;\n            case SongTagCode.loopStart: {\n                if (beforeFive && fromBeepBox) {\n                    this.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                } else {\n                    this.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                }\n            } break;\n            case SongTagCode.loopEnd: {\n                if (beforeFive && fromBeepBox) {\n                    this.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                } else {\n                    this.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                }\n            } break;\n            case SongTagCode.tempo: {\n                if (beforeFour && fromBeepBox) {\n                    this.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                } else if (beforeSeven && fromBeepBox) {\n                    this.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                } else {\n                    this.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n                this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\n            } break;\n            case SongTagCode.reverb: {\n                if (beforeNine && fromBeepBox) {\n                    legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 12;\n                    legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\n                } else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\n                } else {\n                    // Do nothing, BeepBox v9+ do not support song-wide reverb - JummBox still does via modulator.\n                }\n            } break;\n            case SongTagCode.beatCount: {\n                if (beforeThree && fromBeepBox) {\n                    this.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                } else {\n                    this.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                }\n                this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\n            } break;\n            case SongTagCode.barCount: {\n                const barCount: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                this.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\n                for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                    for (let bar = this.channels[channelIndex].bars.length; bar < this.barCount; bar++) {\n                        this.channels[channelIndex].bars[bar] = (bar < 4) ? 1 : 0;\n                    }\n                    this.channels[channelIndex].bars.length = this.barCount;\n                }\n            } break;\n            case SongTagCode.patternCount: {\n                let patternsPerChannel: number;\n                if (beforeEight && fromBeepBox) {\n                    patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                } else {\n                    patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                }\n                this.patternsPerChannel = validateRange(1, Config.barCountMax, patternsPerChannel);\n                const channelCount: number = this.getChannelCount();\n                for (let channelIndex: number = 0; channelIndex < channelCount; channelIndex++) {\n                    const patterns: Pattern[] = this.channels[channelIndex].patterns;\n                    for (let pattern = patterns.length; pattern < this.patternsPerChannel; pattern++) {\n                        patterns[pattern] = new Pattern();\n                    }\n                    patterns.length = this.patternsPerChannel;\n                }\n            } break;\n            case SongTagCode.instrumentCount: {\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    const instrumentsPerChannel: number = validateRange(Config.instrumentCountMin, Config.patternInstrumentCountMax, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\n                    this.layeredInstruments = false;\n                    this.patternInstruments = (instrumentsPerChannel > 1);\n\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        const isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\n                        const isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\n\n                        for (let instrumentIndex: number = this.channels[channelIndex].instruments.length; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\n                            this.channels[channelIndex].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);\n                        }\n                        this.channels[channelIndex].instruments.length = instrumentsPerChannel;\n                        if (beforeSix && fromBeepBox) {\n                            for (let instrumentIndex: number = 0; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\n                                this.channels[channelIndex].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? InstrumentType.noise : InstrumentType.chip, isNoiseChannel, isModChannel);\n                            }\n                        }\n\n                        for (let j: number = legacySettingsCache![channelIndex].length; j < instrumentsPerChannel; j++) {\n                            legacySettingsCache![channelIndex][j] = {};\n                        }\n                    }\n                } else {\n                    const instrumentsFlagBits: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.layeredInstruments = (instrumentsFlagBits & (1 << 1)) != 0;\n                    this.patternInstruments = (instrumentsFlagBits & (1 << 0)) != 0;\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        let instrumentCount: number = 1;\n                        if (this.layeredInstruments || this.patternInstruments) {\n                            instrumentCount = validateRange(Config.instrumentCountMin, this.getMaxInstrumentsPerChannel(), base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\n                        }\n                        const channel: Channel = this.channels[channelIndex];\n                        const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n                        const isModChannel: boolean = this.getChannelIsMod(channelIndex);\n                        for (let i: number = channel.instruments.length; i < instrumentCount; i++) {\n                            channel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);\n                        }\n                        channel.instruments.length = instrumentCount;\n                    }\n                }\n            } break;\n            case SongTagCode.rhythm: {\n                if (!fromUltraBox) {\n\t\t\tlet newRhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\t\n\t\t\tthis.rhythm = clamp(0, Config.rhythms.length, newRhythm + 2);\n\t\t\tif (fromJummBox && beforeThree || fromBeepBox) {\n\t\t\t\tif (this.rhythm == 2 || this.rhythm == 3) {\n\t\t\t\t\tuseSlowerArpSpeed = true;\n\t\t\t\t}\n\t\t\t\tif (this.rhythm >= 2) {\n\t\t\t\t\tuseFastTwoNoteArp = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\tthis.rhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t}\n\t\t//rhythm fixes\n            } break;\n            case SongTagCode.channelOctave: {\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                    if (channelIndex >= this.pitchChannelCount) this.channels[channelIndex].octave = 0;\n                } else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                        if (channelIndex >= this.pitchChannelCount) this.channels[channelIndex].octave = 0;\n                    }\n                } else {\n                    for (let channelIndex: number = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\n                        this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    for (let channelIndex: number = this.pitchChannelCount; channelIndex < this.getChannelCount(); channelIndex++) {\n                        this.channels[channelIndex].octave = 0;\n                    }\n                }\n            } break;\n            case SongTagCode.startInstrument: {\n                instrumentIndexIterator++;\n                if (instrumentIndexIterator >= this.channels[instrumentChannelIterator].instruments.length) {\n                    instrumentChannelIterator++;\n                    instrumentIndexIterator = 0;\n                }\n                validateRange(0, this.channels.length - 1, instrumentChannelIterator);\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                // JB before v5 had custom chip and mod before pickedString and supersaw were added. Index +2.\n                let instrumentType: number = validateRange(0, InstrumentType.length - 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    if (instrumentType == InstrumentType.pickedString || instrumentType == InstrumentType.supersaw) {\n                        instrumentType += 2;\n                    }\n                }\n                // Similar story here, JB before v5 had custom chip and mod before supersaw was added. Index +1.\n                else if ((fromJummBox && beforeSix) || (fromGoldBox && !beforeFour) || (fromUltraBox && beforeFive) ) {\n                    if (instrumentType == InstrumentType.supersaw || instrumentType == InstrumentType.customChipWave || instrumentType == InstrumentType.mod) {\n                        instrumentType += 1;\n                    }\n                }\n                instrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);\n\n                // Anti-aliasing was added in BeepBox 3.0 (v6->v7) and JummBox 1.3 (v1->v2 roughly but some leakage possible)\n                if (((beforeSeven && fromBeepBox) || (beforeTwo && fromJummBox)) && (instrumentType == InstrumentType.chip || instrumentType == InstrumentType.customChipWave || instrumentType == InstrumentType.pwm)) {\n                    instrument.aliases = true;\n                    instrument.distortion = 0;\n                    instrument.effects |= 1 << EffectType.distortion;\n                }\n                if (useSlowerArpSpeed) {\n                    instrument.arpeggioSpeed = 9; // x3/4 speed. This used to be tied to rhythm, but now it is decoupled to each instrument's arp speed slider. This flag gets set when importing older songs to keep things consistent.\n                }\n                if (useFastTwoNoteArp) {\n                    instrument.fastTwoNoteArp = true;\n                }\n\n                if (beforeSeven && fromBeepBox) {\n                    instrument.effects = 0;\n                    // Chip/noise instruments had arpeggio and FM had custom interval but neither\n                    // explicitly saved the chorus setting beforeSeven so enable it here.\n                    if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n                        // Enable chord if it was used.\n                        instrument.effects |= 1 << EffectType.chord;\n                    }\n                }\n            } break;\n            case SongTagCode.preset: {\n                const presetValue: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\n                // Picked string was inserted before custom chip in JB v5, so bump up preset index.\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.pickedString) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.customChipWave;\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = InstrumentType.customChipWave;\n                    }\n                }\n                // Similar story, supersaw is also before custom chip (and mod, but mods can't have presets).\n                else if ((fromJummBox && beforeSix) || (fromUltraBox && beforeFive)) {\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.supersaw ) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.customChipWave;\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = InstrumentType.customChipWave;\n                    }\n                    // ultra code for 6-op fm maybe\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.mod ) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.fm6op;\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = InstrumentType.fm6op;\n                    }\n                }\n                // BeepBox directly tweaked \"grand piano\", but JB kept it the same. The most up to date version is now \"grand piano 3\"\n                if (fromBeepBox && presetValue == EditorConfig.nameToPresetValue(\"grand piano 1\") ) {\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = EditorConfig.nameToPresetValue(\"grand piano 3\")!;\n                }\n            } break;\n            case SongTagCode.wave: {\n                if (beforeThree && fromBeepBox) {\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                    instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n\n                    // Version 2 didn't save any settings for settings for filters, or envelopes,\n                    // just waves, so initialize them here I guess.\n                    instrument.convertLegacySettings(legacySettingsCache![channelIndex][0], forceSimpleFilter);\n\n                } else if (beforeSix && fromBeepBox) {\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (const instrument of this.channels[channelIndex].instruments) {\n                            if (channelIndex >= this.pitchChannelCount) {\n                                instrument.chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            } else {\n                                instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                            }\n                        }\n                    }\n                } else if (beforeSeven && fromBeepBox) {\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                    if (instrumentChannelIterator >= this.pitchChannelCount) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    } else {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                    }\n                } else {\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type == InstrumentType.noise) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    } else {\t\n\t\t\t\tif (fromUltraBox) {\n\t\t\t\t\tconst chipWaveReal = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\tconst chipWaveCounter = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\n\t\t\t\t\tif (chipWaveCounter == 3) {\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 186);\t\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t   \t \t\t\t\t\t\t  \t\t\t\t\t\t\t\t\n\t\t\t\t\t} else if (chipWaveCounter == 2) {\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 124);\t\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t   \t \t\t\t\t\t\t  \t\t\t\t\t\t\t\t\n\t\t\t\t\t} else if (chipWaveCounter == 1) {\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 62);\t\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t   \t \t\t\t\t\t\t  \t\t\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal);\t\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t   \t \t\t\t\t\t\t  \t\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t}\n\t\t }\n        \t}\n            } break;\n            case SongTagCode.eqFilter: {\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    if (beforeSeven && fromBeepBox) {\n                        const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\n                        //const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                        const legacyToEnvelope: string[] = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\n\n                        if (beforeThree && fromBeepBox) {\n                            const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                            const legacySettings: LegacySettings = legacySettingsCache![channelIndex][0];\n                            const legacyFilter: number = [1, 3, 4, 5][clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                            legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                            legacySettings.filterResonance = 0;\n                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        } else if (beforeSix && fromBeepBox) {\n                            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                                    const instrument: Instrument = this.channels[channelIndex].instruments[i];\n                                    const legacySettings: LegacySettings = legacySettingsCache![channelIndex][i];\n                                    const legacyFilter: number = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                                    if (channelIndex < this.pitchChannelCount) {\n                                        legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                                        legacySettings.filterResonance = 0;\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                                    } else {\n                                        legacySettings.filterCutoff = 10;\n                                        legacySettings.filterResonance = 0;\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[\"none\"];\n                                    }\n                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                }\n                            }\n                        } else {\n                            const legacyFilter: number = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                            legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                            legacySettings.filterResonance = 0;\n                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                    } else {\n                        const filterCutoffRange: number = 11;\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                        legacySettings.filterCutoff = clamp(0, filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                    }\n                } else {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    let typeCheck: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                    if (fromBeepBox || typeCheck == 0) {\n                        instrument.eqFilterType = false;\n                        if (fromJummBox || fromGoldBox || fromUltraBox)\n                            typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]; // Skip to next to get control point count\n                        const originalControlPointCount: number = typeCheck;\n                        instrument.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\n                        for (let i: number = instrument.eqFilter.controlPoints.length; i < instrument.eqFilter.controlPointCount; i++) {\n                            instrument.eqFilter.controlPoints[i] = new FilterControlPoint();\n                        }\n                        for (let i: number = 0; i < instrument.eqFilter.controlPointCount; i++) {\n                            const point: FilterControlPoint = instrument.eqFilter.controlPoints[i];\n                            point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        for (let i: number = instrument.eqFilter.controlPointCount; i < originalControlPointCount; i++) {\n                            charIndex += 3;\n                        }\n\n                        // Get subfilters as well. Skip Index 0, is a copy of the base filter.\n                        instrument.eqSubFilters[0] = instrument.eqFilter;\n                        if ((fromJummBox && !beforeFive) || (fromGoldBox && !beforeFour) || fromUltraBox) {\n                            let usingSubFilterBitfield: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                                if (usingSubFilterBitfield & (1 << j)) {\n                                    // Number of control points\n                                    const originalSubfilterControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    if (instrument.eqSubFilters[j + 1] == null)\n                                        instrument.eqSubFilters[j + 1] = new FilterSettings();\n                                    instrument.eqSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                    for (let i: number = instrument.eqSubFilters[j + 1]!.controlPoints.length; i < instrument.eqSubFilters[j + 1]!.controlPointCount; i++) {\n                                        instrument.eqSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\n                                    }\n                                    for (let i: number = 0; i < instrument.eqSubFilters[j + 1]!.controlPointCount; i++) {\n                                        const point: FilterControlPoint = instrument.eqSubFilters[j + 1]!.controlPoints[i];\n                                        point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                    for (let i: number = instrument.eqSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                        charIndex += 3;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        instrument.eqFilterType = true;\n                        instrument.eqFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.eqFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                }\n            } break;\n            case SongTagCode.filterResonance: {\n                if (fromUltraBox) {\n                    if (beforeThree) {\n                        // Still have to support the old and bad loop control data format written as a test, sigh.\n                        const sampleLoopInfoEncodedLength = decode32BitNumber(compressed, charIndex);\n                        charIndex += 6;\n                        const sampleLoopInfoEncoded = compressed.slice(charIndex, charIndex + sampleLoopInfoEncodedLength);\n                        charIndex += sampleLoopInfoEncodedLength;\n                        interface SampleLoopInfo {\n                            isUsingAdvancedLoopControls: boolean;\n                            chipWaveLoopStart: number;\n                            chipWaveLoopEnd: number;\n                            chipWaveLoopMode: number;\n                            chipWavePlayBackwards: boolean;\n                            chipWaveStartOffset: number;\n                        }\n                        interface SampleLoopInfoEntry {\n                            channel: number;\n                            instrument: number;\n                            info: SampleLoopInfo;\n                        }\n                        const sampleLoopInfo: SampleLoopInfoEntry[] = JSON.parse(atob(sampleLoopInfoEncoded));\n                        for (const entry of sampleLoopInfo) {\n                            const channelIndex: number = entry[\"channel\"];\n                            const instrumentIndex: number = entry[\"instrument\"];\n                            const info: SampleLoopInfo = entry[\"info\"];\n                            const instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\n                            instrument.isUsingAdvancedLoopControls = info[\"isUsingAdvancedLoopControls\"];\n                            instrument.chipWaveLoopStart = info[\"chipWaveLoopStart\"];\n                            instrument.chipWaveLoopEnd = info[\"chipWaveLoopEnd\"];\n                            instrument.chipWaveLoopMode = info[\"chipWaveLoopMode\"];\n                            instrument.chipWavePlayBackwards = info[\"chipWavePlayBackwards\"];\n                            instrument.chipWaveStartOffset = info[\"chipWaveStartOffset\"];\n                            // @TODO: Whenever chipWaveReleaseMode is implemented, it should be set here to the default.\n                        }\n                    } else {\n                        // Read the new loop control data format.\n                        // See Song.toBase64String for details on the encodings used here.\n                        const encodedLoopMode: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const isUsingAdvancedLoopControls: boolean = Boolean(encodedLoopMode & 1);\n                        const chipWaveLoopMode: number = encodedLoopMode >> 1;\n                        const encodedReleaseMode: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const chipWavePlayBackwards: boolean = Boolean(encodedReleaseMode & 1);\n                        // const chipWaveReleaseMode: number = encodedReleaseMode >> 1;\n                        const chipWaveLoopStart: number = decode32BitNumber(compressed, charIndex);\n                        charIndex += 6;\n                        const chipWaveLoopEnd: number = decode32BitNumber(compressed, charIndex);\n                        charIndex += 6;\n                        const chipWaveStartOffset: number = decode32BitNumber(compressed, charIndex);\n                        charIndex += 6;\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.isUsingAdvancedLoopControls = isUsingAdvancedLoopControls;\n                        instrument.chipWaveLoopStart = chipWaveLoopStart;\n                        instrument.chipWaveLoopEnd = chipWaveLoopEnd;\n                        instrument.chipWaveLoopMode = chipWaveLoopMode;\n                        instrument.chipWavePlayBackwards = chipWavePlayBackwards;\n                        instrument.chipWaveStartOffset = chipWaveStartOffset;\n                        // instrument.chipWaveReleaseMode = chipWaveReleaseMode;\n                    }\n                }\n                else if (fromGoldBox && !beforeFour && beforeSix) {\n                    if (document.URL.substring(document.URL.length - 13).toLowerCase() != \"legacysamples\") {\n                            if (!willLoadLegacySamplesForOldSongs) {\n                                willLoadLegacySamplesForOldSongs = true;\n                                Config.willReloadForCustomSamples = true;\n                                EditorConfig.customSamples = [\"legacySamples\"];\n                                loadBuiltInSamples(0);\n                            }\n                    }\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 125);\t\t\t\t\t\t\n                } else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    const filterResonanceRange: number = 8;\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.drumsetEnvelopes: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)){\n\n                    }\n                    if (instrument.type == InstrumentType.drumset) {\n                        for (let i: number = 0; i < Config.drumCount; i++) {\n                            let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\n                            instrument.drumsetEnvelopes[i] = Song._envelopeFromLegacyIndex(aa).index;\n                        }\n                    } else {\n                        // This used to be used for general filter envelopes.\n                        // The presence of an envelope affects how convertLegacySettings\n                        // decides the closest possible approximation, so update it.\n                        const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                        let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\n                        legacySettings.filterEnvelope = Song._envelopeFromLegacyIndex(aa);\n                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                    }\n                } else {\n                    // This tag is now only used for drumset filter envelopes.\n                    for (let i: number = 0; i < Config.drumCount; i++) {\n                        let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\n                        instrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, aa);\n                    }\n                }\n            } break;\n            case SongTagCode.pulseWidth: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                instrument.pulseWidth = clamp(0, Config.pulseWidthRange + (+(fromJummBox)) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                if (fromBeepBox) {\n                    // BeepBox formula\n                    instrument.pulseWidth = Math.round(Math.pow(0.5, (7 - instrument.pulseWidth) * Config.pulseWidthStepPower) * Config.pulseWidthRange);\n\n                }\n\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\n                    legacySettings.pulseEnvelope = Song._envelopeFromLegacyIndex(aa);\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                }\n\n                if (fromUltraBox && !beforeFour) {\n                    instrument.decimalOffset = clamp(0, 99 + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n\n            } break;\n            case SongTagCode.stringSustain: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                const sustainValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\tinstrument.stringSustain = clamp(0, Config.stringSustainRange, sustainValue & 0x1F);\n\t\t\t\tinstrument.stringSustainType = Config.enableAcousticSustain ? clamp(0, SustainType.length, sustainValue >> 5) : SustainType.bright;\n            } break;\n            case SongTagCode.fadeInOut: {\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    // this tag was used for a combination of transition and fade in/out.\n                    const legacySettings = [\n                        { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                        { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                        { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                        { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                        { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\n                        { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\n                        { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\n                        { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\n                        { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    ];\n                    if (beforeThree && fromBeepBox) {\n                        const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                            // Enable transition if it was used.\n                            instrument.effects |= 1 << EffectType.transition;\n                        }\n                    } else if (beforeSix && fromBeepBox) {\n                        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                            for (const instrument of this.channels[channelIndex].instruments) {\n                                const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                                instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                                instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                                if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                                    // Enable transition if it was used.\n                                    instrument.effects |= 1 << EffectType.transition;\n                                }\n                            }\n                        }\n                    } else if ((beforeFour && !fromGoldBox && !fromUltraBox) || fromBeepBox) {\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                            // Enable transition if it was used.\n                            instrument.effects |= 1 << EffectType.transition;\n                        }\n                    } else {\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\n\n                        // Read tie-note \n                        if (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] > 0) {\n                            // Set legacy tie over flag, which is only used to port notes in patterns using this instrument as tying.\n                            instrument.legacyTieOver = true;\n\n                        }\n                        instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index || instrument.clicklessTransition) {\n                            // Enable transition if it was used.\n                            instrument.effects |= 1 << EffectType.transition;\n                        }\n                    }\n                } else {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.fadeIn = clamp(0, Config.fadeInRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.fadeOut = clamp(0, Config.fadeOutTicks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    if (fromJummBox||fromGoldBox||fromUltraBox)\n                        instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                }\n            } break;\n            case SongTagCode.vibrato: {\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    if (beforeSeven && fromBeepBox) {\n                        if (beforeThree && fromBeepBox) {\n                            const legacyEffects: number[] = [0, 3, 2, 0];\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"tremolo2\"];\n                            const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                            const legacySettings: LegacySettings = legacySettingsCache![channelIndex][0];\n                            instrument.vibrato = legacyEffects[effect];\n                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\n                                // Imitate the legacy tremolo with a filter envelope.\n                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                            }\n                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                // Enable vibrato if it was used.\n                                instrument.effects |= 1 << EffectType.vibrato;\n                            }\n                        } else if (beforeSix && fromBeepBox) {\n                            const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\n                            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                                    const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    const instrument: Instrument = this.channels[channelIndex].instruments[i];\n                                    const legacySettings: LegacySettings = legacySettingsCache![channelIndex][i];\n                                    instrument.vibrato = legacyEffects[effect];\n                                    if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\n                                        // Imitate the legacy tremolo with a filter envelope.\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                    }\n                                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                        // Enable vibrato if it was used.\n                                        instrument.effects |= 1 << EffectType.vibrato;\n                                    }\n                                    if ((legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) && !this.getChannelIsNoise(channelIndex)) {\n                                        // Enable reverb if it was used globaly before. (Global reverb was added before the effects option so I need to pick somewhere else to initialize instrument reverb, and I picked the vibrato command.)\n                                        instrument.effects |= 1 << EffectType.reverb;\n                                        instrument.reverb = legacyGlobalReverb;\n                                    }\n                                }\n                            }\n                        } else {\n                            const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\n                            const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                            instrument.vibrato = legacyEffects[effect];\n                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\n                                // Imitate the legacy tremolo with a filter envelope.\n                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                            }\n                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                // Enable vibrato if it was used.\n                                instrument.effects |= 1 << EffectType.vibrato;\n                            }\n                            if (legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                                // Enable reverb if it was used globaly before. (Global reverb was added before the effects option so I need to pick somewhere else to initialize instrument reverb, and I picked the vibrato command.)\n                                instrument.effects |= 1 << EffectType.reverb;\n                                instrument.reverb = legacyGlobalReverb;\n                            }\n                        }\n                    } else {\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const vibrato: number = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.vibrato = vibrato;\n                        if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                            // Enable vibrato if it was used.\n                            instrument.effects |= 1 << EffectType.vibrato;\n                        }\n                        // Custom vibrato\n                        if (vibrato == Config.vibratos.length) {\n                            instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50;\n                            instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 2;\n                            instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.effects |= 1 << EffectType.vibrato;\n                        }\n                        // Enforce standard vibrato settings\n                        else {\n                            instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\n                            instrument.vibratoSpeed = 10; // Normal speed\n                            instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\n                            instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\n                        }\n                    }\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.arpeggioSpeed: {\n                // Deprecated, but supported for legacy purposes\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.arpeggioSpeed = clamp(0, Config.modulators.dictionary[\"arp speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false; // Two note arp setting piggybacks on this\n                }\n                else {\n                    // Do nothing, deprecated for now\n                }\n            } break;\n            case SongTagCode.unison: {\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.channels[channelIndex].instruments[0].unison = clamp(0, Config.unisons.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                } else if (beforeSix && fromBeepBox) {\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (const instrument of this.channels[channelIndex].instruments) {\n                            const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            let unison: number = clamp(0, Config.unisons.length, originalValue);\n                            if (originalValue == 8) {\n                                // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\n                                unison = 2;\n                                instrument.chord = 3;\n                            }\n                            instrument.unison = unison;\n                        }\n                    }\n                } else if (beforeSeven && fromBeepBox) {\n                    const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    let unison: number = clamp(0, Config.unisons.length, originalValue);\n                    if (originalValue == 8) {\n                        // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\n                        unison = 2;\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = 3;\n                    }\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].unison = unison;\n                } else {\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].unison = clamp(0, Config.unisons.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                \n                if ((fromUltraBox && !beforeFive) && (instrument.unison == Config.unisons.length))  {\n                // if (instrument.unison == Config.unisons.length) {\n                    instrument.unisonVoices = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                    const unisonSpreadNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const unisonSpread: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);\n\n                    const unisonOffsetNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const unisonOffset: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);\n\n                    const unisonExpressionNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const unisonExpression: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);\n                    \n                    const unisonSignNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const unisonSign: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);\n\n\n                    instrument.unisonSpread = unisonSpread / 1000;\n                    if (unisonSpreadNegative == 0) instrument.unisonSpread *= -1;\n\n                    instrument.unisonOffset = unisonOffset / 1000;\n                    if (unisonOffsetNegative == 0) instrument.unisonOffset *= -1;\n\n                    instrument.unisonExpression = unisonExpression / 1000;\n                    if (unisonExpressionNegative == 0) instrument.unisonExpression *= -1;\n\n                    instrument.unisonSign = unisonSign / 1000;\n                    if (unisonSignNegative == 0) instrument.unisonSign *= -1;\n                } else {\n                    instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                    instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                    instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                    instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                    instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                }\n            \n            } break;\n            case SongTagCode.chord: {\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n                        // Enable chord if it was used.\n                        instrument.effects |= 1 << EffectType.chord;\n                    }\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.effects: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] & ((1 << EffectType.length) - 1));\n                    if (legacyGlobalReverb == 0 && !((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                        // Disable reverb if legacy song reverb was zero.\n                        instrument.effects &= ~(1 << EffectType.reverb);\n                    } else if (effectsIncludeReverb(instrument.effects)) {\n                        instrument.reverb = legacyGlobalReverb;\n                    }\n                    // @jummbus - Enabling pan effect on song import no matter what to make it a default.\n                    //if (instrument.pan != Config.panCenter) {\n                    instrument.effects |= 1 << EffectType.panning;\n                    //}\n                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                        // Enable vibrato if it was used.\n                        instrument.effects |= 1 << EffectType.vibrato;\n                    }\n                    if (instrument.detune != Config.detuneCenter) {\n                        // Enable detune if it was used.\n                        instrument.effects |= 1 << EffectType.detune;\n                    }\n                    if (instrument.aliases)\n                        instrument.effects |= 1 << EffectType.distortion;\n                    else\n                        instrument.effects &= ~(1 << EffectType.distortion);\n\n                    // convertLegacySettings may need to force-enable note filter, call\n                    // it again here to make sure that this override takes precedence.\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                } else {\n                    // BeepBox currently uses two base64 characters at 6 bits each for a bitfield representing all the enabled effects.\n                    if (EffectType.length > 12) throw new Error();\n                    instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\n                    if (effectsIncludeNoteFilter(instrument.effects)) {\n                        let typeCheck: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if (fromBeepBox || typeCheck == 0) {\n                            instrument.noteFilterType = false;\n                            if (fromJummBox || fromGoldBox || fromUltraBox)\n                                typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]; // Skip to next index in jummbox to get actual count\n                            instrument.noteFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, typeCheck);\n                            for (let i: number = instrument.noteFilter.controlPoints.length; i < instrument.noteFilter.controlPointCount; i++) {\n                                instrument.noteFilter.controlPoints[i] = new FilterControlPoint();\n                            }\n                            for (let i: number = 0; i < instrument.noteFilter.controlPointCount; i++) {\n                                const point: FilterControlPoint = instrument.noteFilter.controlPoints[i];\n                                point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            for (let i: number = instrument.noteFilter.controlPointCount; i < typeCheck; i++) {\n                                charIndex += 3;\n                            }\n\n                            // Get subfilters as well. Skip Index 0, is a copy of the base filter.\n                            instrument.noteSubFilters[0] = instrument.noteFilter;\n                            if ((fromJummBox && !beforeFive) || (fromGoldBox) || (fromUltraBox)) {\n                                let usingSubFilterBitfield: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                                    if (usingSubFilterBitfield & (1 << j)) {\n                                        // Number of control points\n                                        const originalSubfilterControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                        if (instrument.noteSubFilters[j + 1] == null)\n                                            instrument.noteSubFilters[j + 1] = new FilterSettings();\n                                        instrument.noteSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                        for (let i: number = instrument.noteSubFilters[j + 1]!.controlPoints.length; i < instrument.noteSubFilters[j + 1]!.controlPointCount; i++) {\n                                            instrument.noteSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\n                                        }\n                                        for (let i: number = 0; i < instrument.noteSubFilters[j + 1]!.controlPointCount; i++) {\n                                            const point: FilterControlPoint = instrument.noteSubFilters[j + 1]!.controlPoints[i];\n                                            point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                        for (let i: number = instrument.noteSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                            charIndex += 3;\n                                        }\n                                    }\n                                }\n                            }\n                        } else {\n                            instrument.noteFilterType = true;\n                            instrument.noteFilter.reset();\n                            instrument.noteFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.noteFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\n                        }\n                    }\n                    if (effectsIncludeTransition(instrument.effects)) {\n                        instrument.transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    if (effectsIncludeChord(instrument.effects)) {\n                        instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        // Custom arpeggio speed... only in JB, and only if the instrument arpeggiates.\n                        if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index && (fromJummBox||fromGoldBox||fromUltraBox)) {\n                            instrument.arpeggioSpeed = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            instrument.fastTwoNoteArp = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                        }\n                    }\n                    if (effectsIncludePitchShift(instrument.effects)) {\n                        instrument.pitchShift = clamp(0, Config.pitchShiftRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    if (effectsIncludeDetune(instrument.effects)) {\n                        if (fromBeepBox) {\n                            // Convert from BeepBox's formula\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.detune = Math.round((instrument.detune - 9) * (Math.abs(instrument.detune - 9) + 1) / 2 + Config.detuneCenter);\n                        } else {\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    if (effectsIncludeVibrato(instrument.effects)) {\n                        instrument.vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\n                        // Custom vibrato\n                        if (instrument.vibrato == Config.vibratos.length && (fromJummBox || fromGoldBox || fromUltraBox)) {\n                            instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;\n                            instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        // Enforce standard vibrato settings\n                        else {\n                            instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\n                            instrument.vibratoSpeed = 10; // Normal speed\n                            instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\n                            instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\n                        }\n                    }\n                    if (effectsIncludeDistortion(instrument.effects)) {\n                        instrument.distortion = clamp(0, Config.distortionRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        if ((fromJummBox && !beforeFive) || fromGoldBox || fromUltraBox)\n                            instrument.aliases = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                    }\n                    if (effectsIncludeBitcrusher(instrument.effects)) {\n                        instrument.bitcrusherFreq = clamp(0, Config.bitcrusherFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    if (effectsIncludePanning(instrument.effects)) {\n                        if (fromBeepBox) {\n                            // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\n                            instrument.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));\n                        }\n                        else {\n                            instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n\n                        // Now, pan delay follows on new versions of jummbox.\n                        if ((fromJummBox && !beforeTwo) || fromGoldBox || fromUltraBox)\n                            instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    }\n                    if (effectsIncludeChorus(instrument.effects)) {\n                        if (fromBeepBox) {\n                            // BeepBox has 4 chorus values vs. JB's 8\n                            instrument.chorus = clamp(0, (Config.chorusRange / 2) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 2;\n                        }\n                        else {\n                            instrument.chorus = clamp(0, Config.chorusRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    if (effectsIncludeEcho(instrument.effects)) {\n                        instrument.echoSustain = clamp(0, Config.echoSustainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.echoDelay = clamp(0, Config.echoDelayRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    if (effectsIncludeReverb(instrument.effects)) {\n                        if (fromBeepBox) {\n                            instrument.reverb = clamp(0, Config.reverbRange, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * Config.reverbRange / 3.0));\n                        } else {\n                            instrument.reverb = clamp(0, Config.reverbRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                }\n                // Clamp the range.\n                instrument.effects &= (1 << EffectType.length) - 1;\n            } break;\n            case SongTagCode.volume: {\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                } else if (beforeSix && fromBeepBox) {\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (const instrument of this.channels[channelIndex].instruments) {\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                        }\n                    }\n                } else if (beforeSeven && fromBeepBox) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                } else if (fromBeepBox) {\n                    // Beepbox v9's volume range is 0-7 (0 is max, 7 is mute)\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));\n                } else {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    // Volume is stored in two bytes in jummbox just in case range ever exceeds one byte, e.g. through later waffling on the subject.\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));\n                }\n            } break;\n            case SongTagCode.pan: {\n                if (beforeNine && fromBeepBox) {\n                    // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.pan = clamp(0, Config.panMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0));\n                } else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    // Pan delay follows on v3 + v4\n                    if (fromJummBox && !beforeThree || fromGoldBox || fromUltraBox) {\n                        instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    }\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.detune: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    // Before jummbox v5, detune was -50 to 50. Now it is 0 to 400\n                    instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 4);\n                    instrument.effects |= 1 << EffectType.detune;\n                } else {\n                    // Now in v5, tag code is deprecated and handled thru detune effects.\n                }\n            } break;\n            case SongTagCode.customChipWave: {\n                let instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                // Pop custom wave values\n                for (let j: number = 0; j < 64; j++) {\n                    instrument.customChipWave[j]\n                        = clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);\n                }\n\n                let sum: number = 0.0;\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\n                    sum += instrument.customChipWave[i];\n                }\n                const average: number = sum / instrument.customChipWave.length;\n\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n                let cumulative: number = 0;\n                let wavePrev: number = 0;\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = instrument.customChipWave[i] - average;\n                    instrument.customChipWaveIntegral[i] = cumulative;\n                }\n\n                // 65th, last sample is for anti-aliasing\n                instrument.customChipWaveIntegral[64] = 0.0;\n\n            } break;\n            case SongTagCode.limiterSettings: {\n                let nextValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                // Check if limiter settings are used... if not, restore to default\n                if (nextValue == 0x3f) {\n                    this.restoreLimiterDefaults();\n                }\n                else {\n                    // Limiter is used, grab values\n                    this.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));\n                    nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));\n                    this.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;\n                    this.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\n                    this.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\n                    this.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;\n                }\n            } break;\n            case SongTagCode.channelNames: {\n                for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\n                    // Length of channel name string. Due to some crazy Unicode characters this needs to be 2 bytes...\n                    var channelNameLength;\n                    if (beforeFour && !fromGoldBox && !fromUltraBox)\n                        channelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]\n                    else\n                        channelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    this.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));\n\n                    charIndex += channelNameLength;\n                }\n            } break;\n            case SongTagCode.algorithm: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if (instrument.type == InstrumentType.fm) {\n                    instrument.algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n                else {\n                    instrument.algorithm6Op = clamp(0, Config.algorithms6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.customAlgorithm.fromPreset(instrument.algorithm6Op);\n                    if (compressed.charCodeAt(charIndex) == SongTagCode.chord) {\n                        let carrierCountTemp = clamp(1, Config.operatorCount + 2+1, base64CharCodeToInt[compressed.charCodeAt(charIndex + 1)]);\n                        charIndex++\n                        let tempModArray: number[][] = [];\n                        if (compressed.charCodeAt(charIndex+1) == SongTagCode.effects) {\n                            charIndex++\n                            let j: number = 0;\n                            charIndex++\n                            while (compressed.charCodeAt(charIndex) != SongTagCode.effects) {\n                                tempModArray[j] = [];\n                                let o: number = 0;\n                                while (compressed.charCodeAt(charIndex) != SongTagCode.operatorWaves) {\n                                    tempModArray[j][o] = clamp(1, Config.operatorCount + 3, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);\n                                    o++\n                                    charIndex++\n                                }\n                                j++;\n                                charIndex++\n                            }\n                            instrument.customAlgorithm.set(carrierCountTemp, tempModArray);\n                            charIndex++; //????\n                        }\n                    }\n                }\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    // The algorithm determines the carrier count, which affects how legacy settings are imported.\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                }\n            } break;\n            case SongTagCode.supersaw: {\n                if (fromGoldBox && !beforeFour && beforeSix) {\n                    //is it more useful to save base64 characters or url length?\n                    const chipWaveForCompat = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    if ((chipWaveForCompat + 62) > 85) {\n                        if (document.URL.substring(document.URL.length - 13).toLowerCase() != \"legacysamples\") {\n                            if (!willLoadLegacySamplesForOldSongs) {\n                                willLoadLegacySamplesForOldSongs = true;\n                                Config.willReloadForCustomSamples = true;\n                                EditorConfig.customSamples = [\"legacySamples\"];\n                                loadBuiltInSamples(0);\n                            }\n                        }\n                    }\n                    \n                    if ((chipWaveForCompat + 62) > 78) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 63);\t\n                    }\n                    else if ((chipWaveForCompat + 62) > 67) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 61);\t\n                    }\n                    else if ((chipWaveForCompat + 62) == 67) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = 40;\t\n                    }\n                    else {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 62);\t\t\t\n                    }\t\t\t\t\t\t\t\n                } \n                \n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.supersawShape = clamp(0, Config.supersawShapeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                \n\t\t\t} break;\n            case SongTagCode.feedbackType: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if (instrument.type == InstrumentType.fm) {\n                    instrument.feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n                else {\n                    instrument.feedbackType6Op = clamp(0, Config.feedbacks6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.customFeedbackType.fromPreset(instrument.feedbackType6Op);\n                    let tempModArray: number[][] = [];\n                    if (compressed.charCodeAt(charIndex) == SongTagCode.effects) {\n                        let j: number = 0;\n                        charIndex++\n                        while (compressed.charCodeAt(charIndex) != SongTagCode.effects) {\n                            tempModArray[j] = [];\n                            let o: number = 0;\n                            while (compressed.charCodeAt(charIndex) != SongTagCode.operatorWaves) {\n                                tempModArray[j][o] = clamp(1, Config.operatorCount + 2, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);\n                                o++\n                                charIndex++\n                            }\n                            j++;\n                            charIndex++\n                        }\n                        instrument.customFeedbackType.set(tempModArray);\n                        charIndex++; //???? weirdly needs to skip the end character or it'll use that next loop instead of like just moving to the next one itself\n                    }\n                }\n\n            } break;\n            case SongTagCode.feedbackAmplitude: {\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n            } break;\n            case SongTagCode.feedbackEnvelope: {\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    \n                    let aa:number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\n                    legacySettings.feedbackEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[aa]);\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.operatorFrequencies: {\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            if (beforeThree && fromGoldBox) {\n\t\t\t\t\t\t\t\tconst freqToGold3 = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 22, 24, 2, 1, 9, 17, 19, 21, 23, 0, 3];\n                               \n\t\t\t\t\t\t\t\tfor (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                                    instrument.operators[o].frequency = freqToGold3[clamp(0, freqToGold3.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                }\n                            }\n\t\t\t\t\t\t\telse if (!fromGoldBox && !fromUltraBox) {\n\t\t\t\t\t\t\t\tconst freqToUltraBox = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 23, 27, 2, 1, 9, 17, 19, 21, 23, 0, 3];\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tfor (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                                    instrument.operators[o].frequency = freqToUltraBox[clamp(0, freqToUltraBox.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                }\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n                            else {\n                                for (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                                    instrument.operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n            } break;\n            case SongTagCode.operatorAmplitudes: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                    instrument.operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n            } break;\n            case SongTagCode.envelopes: {\n                const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                const jummToUltraEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 58, 59, 60];\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    legacySettings.operatorEnvelopes = [];\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        let aa:number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if ((beforeTwo && fromGoldBox) || (fromBeepBox)) aa = pregoldToEnvelope[aa];\n                        if (fromJummBox) aa = jummToUltraEnvelope[aa];\n                        legacySettings.operatorEnvelopes[o] = Song._envelopeFromLegacyIndex(aa);\n                    }\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                } else {\n                    const envelopeCount: number = clamp(0, Config.maxEnvelopeCount + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    // JB v6 adds some envelope options here in the sequence.\n                    if ((fromJummBox && !beforeSix) || (fromUltraBox && !beforeFive)) {\n                        instrument.envelopeSpeed = clamp(0, Config.modulators.dictionary[\"envelope speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.discreteEnvelope = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                    }\n                    for (let i: number = 0; i < envelopeCount; i++) {\n                        const target: number = clamp(0, Config.instrumentAutomationTargets.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        let index: number = 0;\n                        const maxCount: number = Config.instrumentAutomationTargets[target].maxCount;\n                        if (maxCount > 1) {\n                            index = clamp(0, maxCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        let aa:number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if ((beforeTwo && fromGoldBox) || (fromBeepBox)) aa = pregoldToEnvelope[aa]; \n                        if (fromJummBox) aa = jummToUltraEnvelope[aa];\n                        const envelope: number = clamp(0, Config.envelopes.length, aa);\n                        instrument.addEnvelope(target, index, envelope);\n                    }\n                }\n            } break;\n            case SongTagCode.operatorWaves: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\n                if (beforeThree && fromGoldBox) {\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\n                        const pre3To3g = [0, 1, 3, 2, 2, 2, 4, 5];\n                        const old: number = clamp(0, pre3To3g.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        if (old == 3) {\n                            instrument.operators[o].pulseWidth = 5;\n                        } else if (old == 4) {\n                            instrument.operators[o].pulseWidth = 4;\n                        } else if (old == 5) {\n                            instrument.operators[o].pulseWidth = 6;\n                        }\n                        instrument.operators[o].waveform = pre3To3g[old];\n                    }\n                } else {\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        if (fromJummBox) {\n                            const jummToG = [0, 1, 3, 2, 4, 5];\n                            instrument.operators[o].waveform = jummToG[clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        } else {\n                            instrument.operators[o].waveform = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        // Pulse width follows, if it is a pulse width operator wave\n                        if (instrument.operators[o].waveform == 2) {\n                            instrument.operators[o].pulseWidth = clamp(0, Config.pwmOperatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                }\n\n            } break;\n            case SongTagCode.spectrum: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if (instrument.type == InstrumentType.spectrum) {\n                    const byteCount: number = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                        instrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\n                    }\n                    instrument.spectrumWave.markCustomWaveDirty();\n                    charIndex += byteCount;\n                } else if (instrument.type == InstrumentType.drumset) {\n                    const byteCount: number = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                    for (let j: number = 0; j < Config.drumCount; j++) {\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                            instrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\n                        }\n                        instrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\n                    }\n                    charIndex += byteCount;\n                } else {\n                    throw new Error(\"Unhandled instrument type for spectrum song tag code.\");\n                }\n            } break;\n            case SongTagCode.harmonics: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                const byteCount: number = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6)\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n                    instrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\n                }\n                instrument.harmonicsWave.markCustomWaveDirty();\n                charIndex += byteCount;\n            } break;\n            case SongTagCode.aliases: {\n                if ((fromJummBox && beforeFive) || (fromGoldBox && beforeFour)) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.aliases = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                    if (instrument.aliases) {\n                        instrument.distortion = 0;\n                        instrument.effects |= 1 << EffectType.distortion;\n                    }\n                } else {\n                    if (fromUltraBox) {\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];  \n                        instrument.decimalOffset = clamp(0, 50 + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                }\n            }\n                break;\n            case SongTagCode.bars: {\n                let subStringLength: number;\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const barCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    subStringLength = Math.ceil(barCount * 0.5);\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                    for (let i: number = 0; i < barCount; i++) {\n                        this.channels[channelIndex].bars[i] = bits.read(3) + 1;\n                    }\n                } else if (beforeFive && fromBeepBox) {\n                    let neededBits: number = 0;\n                    while ((1 << neededBits) < this.patternsPerChannel) neededBits++;\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (let i: number = 0; i < this.barCount; i++) {\n                            this.channels[channelIndex].bars[i] = bits.read(neededBits) + 1;\n                        }\n                    }\n                } else {\n                    let neededBits: number = 0;\n                    while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (let i: number = 0; i < this.barCount; i++) {\n                            this.channels[channelIndex].bars[i] = bits.read(neededBits);\n                        }\n                    }\n                }\n                charIndex += subStringLength;\n            } break;\n            case SongTagCode.patterns: {\n                let bitStringLength: number = 0;\n                let channelIndex: number;\n                let largerChords: boolean = !((beforeFour && fromJummBox) || fromBeepBox);\n                let recentPitchBitLength: number = (largerChords ? 4 : 3);\n                let recentPitchLength: number = (largerChords ? 16 : 8);\n                if (beforeThree && fromBeepBox) {\n                    channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                    // The old format used the next character to represent the number of patterns in the channel, which is usually eight, the default. \n                    charIndex++; //let patternCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                    bitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    bitStringLength = bitStringLength << 6;\n                    bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                } else {\n                    channelIndex = 0;\n                    let bitStringLengthLength: number = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    while (bitStringLengthLength > 0) {\n                        bitStringLength = bitStringLength << 6;\n                        bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        bitStringLengthLength--;\n                    }\n                }\n\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\n                charIndex += bitStringLength;\n\n                const bitsPerNoteSize: number = Song.getNeededBits(Config.noteSizeMax);\n                let songReverbChannel: number = -1;\n                let songReverbInstrument: number = -1;\n                let songReverbIndex: number = -1;\n\n                while (true) {\n                    const channel: Channel = this.channels[channelIndex];\n                    const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n                    const isModChannel: boolean = this.getChannelIsMod(channelIndex);\n\n                    const maxInstrumentsPerPattern: number = this.getMaxInstrumentsPerPattern(channelIndex);\n                    const neededInstrumentCountBits: number = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\n\n                    const neededInstrumentIndexBits: number = Song.getNeededBits(channel.instruments.length - 1);\n\n                    // Some info about modulator settings immediately follows in mod channels.\n                    if (isModChannel) {\n                        let jumfive: boolean = (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)\n\n                        // 2 more indices for 'all' and 'active'\n                        const neededModInstrumentIndexBits: number = (jumfive) ? neededInstrumentIndexBits : Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\n\n                        for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n\n                            let instrument: Instrument = channel.instruments[instrumentIndex];\n\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                                // Still using legacy \"mod status\" format, but doing it manually as it's only used in the URL now.\n                                // 0 - For pitch/noise\n                                // 1 - (used to be For noise, not needed)\n                                // 2 - For song\n                                // 3 - None\n                                let status: number = bits.read(2);\n\n                                switch (status) {\n                                    case 0: // Pitch\n                                        instrument.modChannels[mod] = clamp(0, this.pitchChannelCount + this.noiseChannelCount + 1, bits.read(8));\n                                        instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededModInstrumentIndexBits));\n                                        break;\n                                    case 1: // Noise\n                                        // Getting a status of 1 means this is legacy mod info. Need to add pitch channel count, as it used to just store noise channel index and not overall channel index\n                                        instrument.modChannels[mod] = this.pitchChannelCount + clamp(0, this.noiseChannelCount + 1, bits.read(8));\n                                        instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededInstrumentIndexBits));\n                                        break;\n                                    case 2: // For song\n                                        instrument.modChannels[mod] = -1;\n                                        break;\n                                    case 3: // None\n                                        instrument.modChannels[mod] = -2;\n                                        break;\n                                }\n\n                                // Mod setting is only used if the status isn't \"none\".\n                                if (status != 3) {\n                                    instrument.modulators[mod] = bits.read(6);\n                                }\n\n                                if (!jumfive && (Config.modulators[instrument.modulators[mod]].name == \"eq filter\" || Config.modulators[instrument.modulators[mod]].name == \"note filter\")) {\n                                    instrument.modFilterTypes[mod] = bits.read(6);\n                                }\n\n                                if (jumfive && instrument.modChannels[mod] >= 0) {\n                                    let forNoteFilter: boolean = effectsIncludeNoteFilter(this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects);\n\n                                    // For legacy filter cut/peak, need to denote since scaling must be applied\n                                    if (instrument.modulators[mod] == 7) {\n                                        // Legacy filter cut index\n                                        // Check if there is no filter dot on prospective filter. If so, add a low pass at max possible freq.\n\n                                        if (forNoteFilter) {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"note filt cut\"].index;\n                                        }\n                                        else {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt cut\"].index;\n                                        }\n\n                                        instrument.modFilterTypes[mod] = 1; // Dot 1 X\n\n                                    }\n                                    else if (instrument.modulators[mod] == 8) {\n                                        // Legacy filter peak index\n                                        if (forNoteFilter) {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"note filt peak\"].index;\n                                        }\n                                        else {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt peak\"].index;\n                                        }\n\n                                        instrument.modFilterTypes[mod] = 2; // Dot 1 Y\n                                    }\n                                }\n                                else if (jumfive) {\n                                    // Check for song reverb mod, which must be handled differently now that it is a multiplier\n                                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"song reverb\"].index) {\n                                        songReverbChannel = channelIndex;\n                                        songReverbInstrument = instrumentIndex;\n                                        songReverbIndex = mod;\n                                    }\n                                }\n\n                                // Based on setting, enable some effects for the modulated instrument. This isn't always set, say if the instrument's pan was right in the center.\n                                // Only used on import of old songs, because sometimes an invalid effect can be set in a mod in the new version that is actually unused. In that case,\n                                // keeping the mod invalid is better since it preserves the state.\n                                if (jumfive && Config.modulators[instrument.modulators[mod]].associatedEffect != EffectType.length) {\n                                    this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects |= 1 << Config.modulators[instrument.modulators[mod]].associatedEffect;\n                                }\n                            }\n                        }\n                    }\n\n                    // Scalar applied to detune mods since its granularity was upped. Could be repurposed later if any other granularity changes occur.\n                    const detuneScaleNotes: number[][] = [];\n                    for (let j: number = 0; j < channel.instruments.length; j++) {\n                        detuneScaleNotes[j] = [];\n                        for (let i: number = 0; i < Config.modCount; i++) {\n                            detuneScaleNotes[j][Config.modCount - 1 - i] = 1 + 3 * +(((beforeFive && fromJummBox) || (beforeFour&&fromGoldBox)) && isModChannel && (channel.instruments[j].modulators[i] == Config.modulators.dictionary[\"detune\"].index));\n                        }\n                    }\n                    const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : channel.octave * 12;\n                    let lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : octaveOffset);\n                    const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\n                    const recentShapes: any[] = [];\n                    for (let i: number = 0; i < recentPitches.length; i++) {\n                        recentPitches[i] += octaveOffset;\n                    }\n                    for (let i: number = 0; i < this.patternsPerChannel; i++) {\n                        const newPattern: Pattern = channel.patterns[i];\n\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            newPattern.instruments[0] = validateRange(0, channel.instruments.length - 1, bits.read(neededInstrumentIndexBits));\n                            newPattern.instruments.length = 1;\n                        } else {\n                            if (this.patternInstruments) {\n                                const instrumentCount: number = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, bits.read(neededInstrumentCountBits) + Config.instrumentCountMin);\n                                for (let j: number = 0; j < instrumentCount; j++) {\n                                    newPattern.instruments[j] = validateRange(0, channel.instruments.length - 1 + +(isModChannel) * 2, bits.read(neededInstrumentIndexBits));\n                                }\n                                newPattern.instruments.length = instrumentCount;\n                            } else {\n                                newPattern.instruments[0] = 0;\n                                newPattern.instruments.length = Config.instrumentCountMin;\n                            }\n                        }\n\n                        if (!(fromBeepBox && beforeThree) && bits.read(1) == 0) {\n                            newPattern.notes.length = 0;\n                            continue;\n                        }\n\n                        let curPart: number = 0;\n                        const newNotes: Note[] = newPattern.notes;\n                        let noteCount: number = 0;\n                        // Due to arbitrary note positioning, mod channels don't end the count until curPart actually exceeds the max\n                        while (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\n\n                            const useOldShape: boolean = bits.read(1) == 1;\n                            let newNote: boolean = false;\n                            let shapeIndex: number = 0;\n                            if (useOldShape) {\n                                shapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\n                            } else {\n                                newNote = bits.read(1) == 1;\n                            }\n\n                            if (!useOldShape && !newNote) {\n                                // For mod channels, check if you need to move backward too (notes can appear in any order and offset from each other).\n                                if (isModChannel) {\n                                    const isBackwards: boolean = bits.read(1) == 1;\n                                    const restLength: number = bits.readPartDuration();\n                                    if (isBackwards) {\n                                        curPart -= restLength;\n                                    }\n                                    else {\n                                        curPart += restLength;\n                                    }\n                                } else {\n                                    const restLength: number = (beforeSeven && fromBeepBox)\n                                        ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\n                                        : bits.readPartDuration();\n                                    curPart += restLength;\n\n                                }\n                            } else {\n                                let shape: any;\n                                if (useOldShape) {\n                                    shape = recentShapes[shapeIndex];\n                                    recentShapes.splice(shapeIndex, 1);\n                                } else {\n                                    shape = {};\n\n                                    if (!largerChords) {\n                                        // Old format: X 1's followed by a 0 => X+1 pitches, up to 4\n                                        shape.pitchCount = 1;\n                                        while (shape.pitchCount < 4 && bits.read(1) == 1) shape.pitchCount++;\n                                    }\n                                    else {\n                                        // New format is:\n                                        //      0: 1 pitch\n                                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\n                                        if (bits.read(1) == 1) {\n                                            shape.pitchCount = bits.read(3) + 2;\n                                        }\n                                        else {\n                                            shape.pitchCount = 1;\n                                        }\n                                    }\n\n                                    shape.pinCount = bits.readPinCount();\n                                    if (fromBeepBox) {\n                                        shape.initialSize = bits.read(2) * 2;\n                                    } else if (!isModChannel) {\n                                        shape.initialSize = bits.read(bitsPerNoteSize);\n                                    } else {\n                                        shape.initialSize = bits.read(9);\n                                    }\n\n                                    shape.pins = [];\n                                    shape.length = 0;\n                                    shape.bendCount = 0;\n                                    for (let j: number = 0; j < shape.pinCount; j++) {\n                                        let pinObj: any = {};\n                                        pinObj.pitchBend = bits.read(1) == 1;\n                                        if (pinObj.pitchBend) shape.bendCount++;\n                                        shape.length += (beforeSeven && fromBeepBox)\n                                            ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\n                                            : bits.readPartDuration();\n                                        pinObj.time = shape.length;\n                                        if (fromBeepBox) {\n                                            pinObj.size = bits.read(2) * 2;\n                                        } else if (!isModChannel) {\n                                            pinObj.size = bits.read(bitsPerNoteSize);\n                                        }\n                                        else {\n                                            pinObj.size = bits.read(9);\n                                        }\n                                        shape.pins.push(pinObj);\n                                    }\n                                }\n                                recentShapes.unshift(shape);\n                                if (recentShapes.length > 10) recentShapes.pop(); // TODO: Use Deque?\n\n                                let note: Note;\n                                if (newNotes.length <= noteCount) {\n                                    note = new Note(0, curPart, curPart + shape.length, shape.initialSize);\n                                    newNotes[noteCount++] = note;\n                                } else {\n                                    note = newNotes[noteCount++];\n                                    note.start = curPart;\n                                    note.end = curPart + shape.length;\n                                    note.pins[0].size = shape.initialSize;\n                                }\n\n                                let pitch: number;\n                                let pitchCount: number = 0;\n                                const pitchBends: number[] = []; // TODO: allocate this array only once! keep separate length and iterator index. Use Deque?\n                                for (let j: number = 0; j < shape.pitchCount + shape.bendCount; j++) {\n                                    const useOldPitch: boolean = bits.read(1) == 1;\n                                    if (!useOldPitch) {\n                                        const interval: number = bits.readPitchInterval();\n                                        pitch = lastPitch;\n                                        let intervalIter: number = interval;\n                                        while (intervalIter > 0) {\n                                            pitch++;\n                                            while (recentPitches.indexOf(pitch) != -1) pitch++;\n                                            intervalIter--;\n                                        }\n                                        while (intervalIter < 0) {\n                                            pitch--;\n                                            while (recentPitches.indexOf(pitch) != -1) pitch--;\n                                            intervalIter++;\n                                        }\n                                    } else {\n                                        const pitchIndex: number = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));\n                                        pitch = recentPitches[pitchIndex];\n                                        recentPitches.splice(pitchIndex, 1);\n                                    }\n\n                                    recentPitches.unshift(pitch);\n                                    if (recentPitches.length > recentPitchLength) recentPitches.pop();\n\n                                    if (j < shape.pitchCount) {\n                                        note.pitches[pitchCount++] = pitch;\n                                    } else {\n                                        pitchBends.push(pitch);\n                                    }\n\n                                    if (j == shape.pitchCount - 1) {\n                                        lastPitch = note.pitches[0];\n                                    } else {\n                                        lastPitch = pitch;\n                                    }\n                                }\n                                note.pitches.length = pitchCount;\n                                pitchBends.unshift(note.pitches[0]); // TODO: Use Deque?\n                                if (isModChannel) {\n                                    note.pins[0].size *= detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];\n                                }\n                                let pinCount: number = 1;\n                                for (const pinObj of shape.pins) {\n                                    if (pinObj.pitchBend) pitchBends.shift();\n\n                                    const interval: number = pitchBends[0] - note.pitches[0];\n                                    if (note.pins.length <= pinCount) {\n                                        if (isModChannel) {\n                                            note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]]);\n                                        } else {\n                                            note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size);\n                                        }\n                                    } else {\n                                        const pin: NotePin = note.pins[pinCount++];\n                                        pin.interval = interval;\n                                        pin.time = pinObj.time;\n                                        if (isModChannel) {\n                                            pin.size = pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];\n                                        } else {\n                                            pin.size = pinObj.size;\n                                        }\n                                    }\n                                }\n                                note.pins.length = pinCount;\n\n                                if (note.start == 0) {\n                                    if (!((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)||(beforeFour&&fromGoldBox))) {\n                                        note.continuesLastPattern = (bits.read(1) == 1);\n                                    } else {\n                                        if ((beforeFour && !fromUltraBox) || fromBeepBox) {\n                                            note.continuesLastPattern = false;\n                                        } else {\n                                            note.continuesLastPattern = channel.instruments[newPattern.instruments[0]].legacyTieOver;\n                                        }\n                                    }\n                                }\n\n                                curPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\n                            }\n                        }\n                        newNotes.length = noteCount;\n                    }\n\n                    if (beforeThree && fromBeepBox) {\n                        break;\n                    } else {\n                        channelIndex++;\n                        if (channelIndex >= this.getChannelCount()) break;\n                    }\n                } // while (true)\n\n                // Correction for old JB songs that had song reverb mods. Change all instruments using reverb to max reverb\n                if (((fromJummBox && beforeFive)||(beforeFour && fromGoldBox)) && songReverbIndex >= 0) {\n                    for (let channelIndex: number = 0; channelIndex < this.channels.length; channelIndex++) {\n                        for (let instrumentIndex: number = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\n                            const instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\n                            if (effectsIncludeReverb(instrument.effects)) {\n                                instrument.reverb = Config.reverbRange - 1;\n                            }\n                            // Set song reverb via mod to the old setting at song start.\n                            if (songReverbChannel == channelIndex && songReverbInstrument == instrumentIndex) {\n                                const patternIndex: number = this.channels[channelIndex].bars[0];\n                                if (patternIndex > 0) {\n                                    // Doesn't work if 1st pattern isn't using the right ins for song reverb...\n                                    // Add note to start of pattern\n                                    const pattern: Pattern = this.channels[channelIndex].patterns[patternIndex - 1];\n                                    let lowestPart: number = 6;\n                                    for (const note of pattern.notes) {\n                                        if (note.pitches[0] == Config.modCount - 1 - songReverbIndex) {\n                                            lowestPart = Math.min(lowestPart, note.start);\n                                        }\n                                    }\n\n                                    if (lowestPart > 0) {\n                                        pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, lowestPart, legacyGlobalReverb));\n                                    }\n                                }\n                                else {\n                                    // Add pattern\n                                    if (this.channels[channelIndex].patterns.length < Config.barCountMax) {\n                                        const pattern: Pattern = new Pattern();\n                                        this.channels[channelIndex].patterns.push(pattern);\n                                        this.channels[channelIndex].bars[0] = this.channels[channelIndex].patterns.length;\n                                        if (this.channels[channelIndex].patterns.length > this.patternsPerChannel) {\n                                            for (let chn: number = 0; chn < this.channels.length; chn++) {\n                                                if (this.channels[chn].patterns.length <= this.patternsPerChannel) {\n                                                    this.channels[chn].patterns.push(new Pattern());\n                                                }\n                                            }\n                                            this.patternsPerChannel++;\n                                        }\n                                        pattern.instruments.length = 1;\n                                        pattern.instruments[0] = songReverbInstrument;\n                                        pattern.notes.length = 0;\n                                        pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, 6, legacyGlobalReverb));\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } break;\n            default: {\n                throw new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1) + \" \" + compressed.substring(/*charIndex - 2*/0, charIndex));\n            } break;\n        }\n\n        if (Config.willReloadForCustomSamples) {\n            window.location.hash = this.toBase64String();\n            setTimeout(() => { location.reload(); }, 50);\n        }\n    }\n\n    private static _isProperUrl(string: string): boolean {\n        try { \n            return Boolean(new URL(string)); \n        }\n        catch(x){ \n            return false; \n        }\n    }\n\n    // @TODO: Share more of this code with AddSamplesPrompt.\n    private static _parseAndConfigureCustomSample(url: string, customSampleUrls: string[], customSamplePresets: Preset[], sampleLoadingState: SampleLoadingState, parseOldSyntax: boolean): boolean {\n        const defaultIndex: number = 0;\n        const defaultIntegratedSamples: Float32Array = Config.chipWaves[defaultIndex].samples;\n        const defaultSamples: Float32Array = Config.rawRawChipWaves[defaultIndex].samples;\n\n        const customSampleUrlIndex: number = customSampleUrls.length;\n        customSampleUrls.push(url);\n        // This depends on `Config.chipWaves` being the same\n        // length as `Config.rawRawChipWaves`.\n        const chipWaveIndex: number = Config.chipWaves.length;\n\n        let urlSliced: string = url;\n\n        let customSampleRate: number = 44100;\n        let isCustomPercussive: boolean = false;\n        let customRootKey: number = 60;\n        let presetIsUsingAdvancedLoopControls: boolean = false;\n        let presetChipWaveLoopStart: number | null = null;\n        let presetChipWaveLoopEnd: number | null = null;\n        let presetChipWaveStartOffset: number | null = null;\n        let presetChipWaveLoopMode: number | null = null;\n        let presetChipWavePlayBackwards: boolean = false;\n\n        let parsedSampleOptions: boolean = false;\n        let optionsStartIndex: number = url.indexOf(\"!\");\n        let optionsEndIndex: number = -1;\n        if (optionsStartIndex === 0) {\n            optionsEndIndex = url.indexOf(\"!\", optionsStartIndex + 1);\n            if (optionsEndIndex !== -1) {\n                const rawOptions: string[] = url.slice(optionsStartIndex + 1, optionsEndIndex).split(\",\");\n                for (const rawOption of rawOptions) {\n                    const optionCode: string = rawOption.charAt(0);\n                    const optionData: string = rawOption.slice(1, rawOption.length);\n                    if (optionCode === \"s\") {\n                        customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(optionData, 44100));\n                    } else if (optionCode === \"r\") {\n                        customRootKey = parseFloatWithDefault(optionData, 60);\n                    } else if (optionCode === \"p\") {\n                        isCustomPercussive = true;\n                    } else if (optionCode === \"a\") {\n                        presetChipWaveLoopStart = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopStart != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    } else if (optionCode === \"b\") {\n                        presetChipWaveLoopEnd = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopEnd != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    } else if (optionCode === \"c\") {\n                        presetChipWaveStartOffset = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveStartOffset != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    } else if (optionCode === \"d\") {\n                        presetChipWaveLoopMode = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopMode != null) {\n                            // @TODO: Error-prone. This should be automatically\n                            // derived from the list of available loop modes.\n                            presetChipWaveLoopMode = clamp(0, 3 + 1, presetChipWaveLoopMode);\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    } else if (optionCode === \"e\") {\n                        presetChipWavePlayBackwards = true;\n                        presetIsUsingAdvancedLoopControls = true;\n                    }\n                }\n                urlSliced = url.slice(optionsEndIndex + 1, url.length);\n                parsedSampleOptions = true;\n            }\n        }\n\n        let parsedUrl: URL | null = null;\n        if (Song._isProperUrl(urlSliced)) {\n            parsedUrl = new URL(urlSliced);\n        }\n        else {\n            alert(url + \" is not a valid url\");\n            return false;\n        }\n\n        if (parseOldSyntax) {\n            if (!parsedSampleOptions && parsedUrl != null) {\n                if (url.indexOf(\"@\") != -1) {\n                    //urlSliced = url.slice(url.indexOf(\"@\"), url.indexOf(\"@\"));\n                    urlSliced = url.replaceAll(\"@\", \"\")\n                    parsedUrl = new URL(urlSliced);\n                    isCustomPercussive = true;\t\n                }\t\n\n                function sliceForSampleRate() {\n                    urlSliced = url.slice(0, url.indexOf(\",\"));\n                    parsedUrl = new URL(urlSliced);\n                    customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(url.slice(url.indexOf(\",\") + 1), 44100));\n                    //should this be parseFloat or parseInt?\n                    //ig floats let you do decimals and such, but idk where that would be useful\n                }\n\n                function sliceForRootKey() {\n                    urlSliced = url.slice(0, url.indexOf(\"!\"));\n                    parsedUrl = new URL(urlSliced);\n                    customRootKey = parseFloatWithDefault(url.slice(url.indexOf(\"!\") + 1), 60);\n                }\n\n\n                if (url.indexOf(\",\") != -1 && url.indexOf(\"!\") != -1) {\n                    if (url.indexOf(\",\") < url.indexOf(\"!\")) {\n                        sliceForRootKey();\n                        sliceForSampleRate();\n                    }\n                    else {\n                        sliceForSampleRate();\n                        sliceForRootKey();\n                    }\t\n                }\n                else {\n                    if (url.indexOf(\",\") != -1) {\n                        sliceForSampleRate();\n                    }\t\n                    if (url.indexOf(\"!\") != -1) {\n                        sliceForRootKey();\n                    }\t\n                }\n            }\n        }\n\n        if (parsedUrl != null) {\n            // Store in the new format.\n            let urlWithNamedOptions = urlSliced;\n            const namedOptions: string[] = [];\n            if (customSampleRate !== 44100) namedOptions.push(\"s\" + customSampleRate);\n            if (customRootKey !== 60) namedOptions.push(\"r\" + customRootKey);\n            if (isCustomPercussive) namedOptions.push(\"p\");\n            if (presetIsUsingAdvancedLoopControls) {\n                if (presetChipWaveLoopStart != null) namedOptions.push(\"a\" + presetChipWaveLoopStart);\n                if (presetChipWaveLoopEnd != null) namedOptions.push(\"b\" + presetChipWaveLoopEnd);\n                if (presetChipWaveStartOffset != null) namedOptions.push(\"c\" + presetChipWaveStartOffset);\n                if (presetChipWaveLoopMode != null) namedOptions.push(\"d\" + presetChipWaveLoopMode);\n                if (presetChipWavePlayBackwards) namedOptions.push(\"e\");\n            }\n            if (namedOptions.length > 0) {\n                urlWithNamedOptions = \"!\" + namedOptions.join(\",\") + \"!\" + urlSliced;\n            }\n            customSampleUrls[customSampleUrlIndex] = urlWithNamedOptions;\n\n            // @TODO: Could also remove known extensions, but it\n            // would probably be much better to be able to specify\n            // a custom name.\n            // @TODO: If for whatever inexplicable reason someone\n            // uses an url like `https://example.com`, this will\n            // result in an empty name here.\n            const name: string = decodeURIComponent(parsedUrl.pathname.replace(/^([^\\/]*\\/)+/, \"\"));\n            // @TODO: What to do about samples with the same name?\n            // The problem with using the url is that the name is\n            // user-facing and long names break assumptions of the\n            // UI.\n            const expression: number = 1.0;\n            Config.chipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultIntegratedSamples,\n                index: chipWaveIndex,\n            };\n            Config.rawChipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultSamples,\n                index: chipWaveIndex,\n            };\n            Config.rawRawChipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultSamples,\n                index: chipWaveIndex,\n            };\n            const customSamplePresetSettings: Dictionary<any> = {\n                \"type\": \"chip\",\n                \"eqFilter\": [],\n                \"effects\": [],\n                \"transition\": \"normal\",\n                \"fadeInSeconds\": 0,\n                \"fadeOutTicks\": -3,\n                \"chord\": \"harmony\",\n                \"wave\": name,\n                \"unison\": \"none\",\n                \"envelopes\": [],\n            };\n            if (presetIsUsingAdvancedLoopControls) {\n                customSamplePresetSettings[\"isUsingAdvancedLoopControls\"] = true;\n                customSamplePresetSettings[\"chipWaveLoopStart\"] = presetChipWaveLoopStart != null ? presetChipWaveLoopStart : 0;\n                customSamplePresetSettings[\"chipWaveLoopEnd\"] = presetChipWaveLoopEnd != null ? presetChipWaveLoopEnd : 2;\n                customSamplePresetSettings[\"chipWaveLoopMode\"] = presetChipWaveLoopMode != null ? presetChipWaveLoopMode : 0;\n                customSamplePresetSettings[\"chipWavePlayBackwards\"] = presetChipWavePlayBackwards;\n                customSamplePresetSettings[\"chipWaveStartOffset\"] = presetChipWaveStartOffset != null ? presetChipWaveStartOffset : 0;\n            }\n            const customSamplePreset: Preset = {\n                index: 0, // This should be overwritten by toNameMap, in our caller.\n                name: name,\n                midiProgram: 80,\n                settings: customSamplePresetSettings,\n            };\n            customSamplePresets.push(customSamplePreset);\n            if (!Config.willReloadForCustomSamples) {\n                const rawLoopOptions: any = {\n                    \"isUsingAdvancedLoopControls\": presetIsUsingAdvancedLoopControls,\n                    \"chipWaveLoopStart\": presetChipWaveLoopStart,\n                    \"chipWaveLoopEnd\": presetChipWaveLoopEnd,\n                    \"chipWaveLoopMode\": presetChipWaveLoopMode,\n                    \"chipWavePlayBackwards\": presetChipWavePlayBackwards,\n                    \"chipWaveStartOffset\": presetChipWaveStartOffset,\n                };\n                startLoadingSample(urlSliced, chipWaveIndex, customSamplePresetSettings, rawLoopOptions, customSampleRate);\n            }\n            sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\n            sampleLoadingState.urlTable[chipWaveIndex] = urlSliced;\n            sampleLoadingState.totalSamples++;\n        }\n\n        return true;\n    }\n\n    private static _restoreChipWaveListToDefault(): void {\n        Config.chipWaves = toNameMap(Config.chipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n        Config.rawChipWaves = toNameMap(Config.rawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n        Config.rawRawChipWaves = toNameMap(Config.rawRawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n    }\n\n    private static _clearSamples(): void {\n        EditorConfig.customSamples = null;\n\n        Song._restoreChipWaveListToDefault();\n\n        sampleLoadingState.statusTable = {};\n        sampleLoadingState.urlTable = {};\n        sampleLoadingState.totalSamples = 0;\n        sampleLoadingState.samplesLoaded = 0;\n        sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n            sampleLoadingState.totalSamples,\n            sampleLoadingState.samplesLoaded\n        ));\n    }\n\n    public toJsonObject(enableIntro: boolean = true, loopCount: number = 1, enableOutro: boolean = true): Object {\n        const channelArray: Object[] = [];\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            const channel: Channel = this.channels[channelIndex];\n            const instrumentArray: Object[] = [];\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n            const isModChannel: boolean = this.getChannelIsMod(channelIndex);\n            for (const instrument of channel.instruments) {\n                instrumentArray.push(instrument.toJsonObject());\n            }\n\n            const patternArray: Object[] = [];\n            for (const pattern of channel.patterns) {\n                patternArray.push(pattern.toJsonObject(this, channel, isModChannel));\n            }\n\n            const sequenceArray: number[] = [];\n            if (enableIntro) for (let i: number = 0; i < this.loopStart; i++) {\n                sequenceArray.push(channel.bars[i]);\n            }\n            for (let l: number = 0; l < loopCount; l++) for (let i: number = this.loopStart; i < this.loopStart + this.loopLength; i++) {\n                sequenceArray.push(channel.bars[i]);\n            }\n            if (enableOutro) for (let i: number = this.loopStart + this.loopLength; i < this.barCount; i++) {\n                sequenceArray.push(channel.bars[i]);\n            }\n\n            const channelObject: any = {\n                \"type\": isModChannel ? \"mod\" : (isNoiseChannel ? \"drum\" : \"pitch\"),\n                \"name\": channel.name,\n                \"instruments\": instrumentArray,\n                \"patterns\": patternArray,\n                \"sequence\": sequenceArray,\n            };\n            if (!isNoiseChannel) {\n                // For compatibility with old versions the octave is offset by one.\n                channelObject[\"octaveScrollBar\"] = channel.octave - 1;\n            }\n            channelArray.push(channelObject);\n        }\n\n        const result: any = {\n            \"name\": this.title,\n            \"format\": Song._format,\n            \"version\": Song._latestUltraBoxVersion,\n            \"scale\": Config.scales[this.scale].name,\n            \"customScale\": this.scaleCustom,\n            \"key\": Config.keys[this.key].name,\n            \"keyOctave\": this.octave,\n            \"introBars\": this.loopStart,\n            \"loopBars\": this.loopLength,\n            \"beatsPerBar\": this.beatsPerBar,\n            \"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\n            \"beatsPerMinute\": this.tempo,\n            \"reverb\": this.reverb,\n            \"masterGain\": this.masterGain,\n            \"compressionThreshold\": this.compressionThreshold,\n            \"limitThreshold\": this.limitThreshold,\n            \"limitDecay\": this.limitDecay,\n            \"limitRise\": this.limitRise,\n            \"limitRatio\": this.limitRatio,\n            \"compressionRatio\": this.compressionRatio,\n            //\"outroBars\": this.barCount - this.loopStart - this.loopLength; // derive this from bar arrays?\n            //\"patternCount\": this.patternsPerChannel, // derive this from pattern arrays?\n            \"layeredInstruments\": this.layeredInstruments,\n            \"patternInstruments\": this.patternInstruments,\n            \"channels\": channelArray,\n        };\n\n        if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {\n            result[\"customSamples\"] = EditorConfig.customSamples;\n        }\n\n        return result;\n    }\n\n    public fromJsonObject(jsonObject: any): void {\n        this.initToDefault(true);\n        if (!jsonObject) return;\n\n        //const version: number = jsonObject[\"version\"] | 0;\n        //if (version > Song._latestVersion) return; // Go ahead and try to parse something from the future I guess? JSON is pretty easy-going!\n\n        if (jsonObject[\"name\"] != undefined) {\n            this.title = jsonObject[\"name\"];\n        }\n\n\t    \t\t\t// if (jsonObject[\"customSamples\"] != undefined && EditorConfig.customSamples == undefined) {\n                // EditorConfig.customSamples = atob(jsonObject[\"customSamples\"]);\n\t\t\t\t// console.log(EditorConfig.customSamples);\n\t\t\t\t// location.reload(); \n            // }\n\t\t\t//jsonmark\n\t\t\t//this doesn't work\n\n        if (jsonObject[\"customSamples\"] != undefined) {\n            const customSamples: string[] = jsonObject[\"customSamples\"];\n            if (EditorConfig.customSamples == null || EditorConfig.customSamples.join(\", \") != customSamples.join(\", \")) {\n                // Have to duplicate the work done in Song.fromBase64String\n                // early here, because Instrument.fromJsonObject depends on the\n                // chip wave list having the correct items already in memory.\n\n                Config.willReloadForCustomSamples = true;\n\n                Song._restoreChipWaveListToDefault();\n\n                let willLoadLegacySamples: boolean = false;\n                let willLoadNintariboxSamples: boolean = false;\n                let willLoadMarioPaintboxSamples: boolean = false;\n                const customSampleUrls: string[] = [];\n                const customSamplePresets: Preset[] = [];\n                for (const url of customSamples) {\n                    if (url.toLowerCase() === \"legacysamples\") {\n                        if (!willLoadLegacySamples) {\n                            willLoadLegacySamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(0);\n                        }\n                    } \n                    else if (url.toLowerCase() === \"nintariboxsamples\") {\n                        if (!willLoadNintariboxSamples) {\n                            willLoadNintariboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(1);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"mariopaintboxsamples\") {\n                        if (!willLoadMarioPaintboxSamples) {\n                            willLoadMarioPaintboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(2);\n                        }\n                    }\n                    \n                    else {\n                        // When EditorConfig.customSamples is saved in the json\n                        // export, it should be using the new syntax, unless\n                        // the user has manually modified the URL, so we don't\n                        // really need to parse the old syntax here.\n                        const parseOldSyntax: boolean = false;\n                        Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);\n                    }\n                }\n                if (customSampleUrls.length > 0) {\n                    EditorConfig.customSamples = customSampleUrls;\n                }\n                if (customSamplePresets.length > 0) {\n                    const customSamplePresetsMap: DictionaryArray<Preset> = toNameMap(customSamplePresets);\n                    EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {\n                        name: \"Custom Sample Presets\",\n                        presets: customSamplePresetsMap,\n                        index: EditorConfig.presetCategories.length,\n                    };\n                }\n            }\n        } else {\n            // No custom samples, so the only possibility at this point is that\n            // we need to load the legacy samples. Let's check whether that's\n            // necessary.\n            let shouldLoadLegacySamples: boolean = false;\n            if (jsonObject[\"channels\"] != undefined) {\n                for (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\n                    const channelObject: any = jsonObject[\"channels\"][channelIndex];\n                    if (channelObject[\"type\"] !== \"pitch\") {\n                        // Legacy samples can only exist in pitch channels.\n                        continue;\n                    }\n                    if (Array.isArray(channelObject[\"instruments\"])) {\n                        const instrumentObjects: any[] = channelObject[\"instruments\"];\n                        for (let i: number = 0; i < instrumentObjects.length; i++) {\n                            const instrumentObject: any = instrumentObjects[i];\n                            if (instrumentObject[\"type\"] !== \"chip\") {\n                                // Legacy samples can only exist in chip wave\n                                // instruments.\n                                continue;\n                            }\n                            if (instrumentObject[\"wave\"] == null) {\n                                // This should exist if things got saved\n                                // correctly, but if they didn't, skip this.\n                                continue;\n                            }\n                            const waveName: string = instrumentObject[\"wave\"];\n                            // @TODO: Avoid this duplication.\n                            const names: string[] = [\n                                \"paandorasbox kick\",\n                                \"paandorasbox snare\",\n                                \"paandorasbox piano1\",\n                                \"paandorasbox WOW\",\n                                \"paandorasbox overdrive\",\n                                \"paandorasbox trumpet\",\n                                \"paandorasbox saxophone\",\n                                \"paandorasbox orchestrahit\",\n                                \"paandorasbox detatched violin\",\n                                \"paandorasbox synth\",\n                                \"paandorasbox sonic3snare\",\n                                \"paandorasbox come on\",\n                                \"paandorasbox choir\",\n                                \"paandorasbox overdriveguitar\",\n                                \"paandorasbox flute\",\n                                \"paandorasbox legato violin\",\n                                \"paandorasbox tremolo violin\",\n                                \"paandorasbox amen break\",\n                                \"paandorasbox pizzicato violin\",\n                                \"paandorasbox tim allen grunt\",\n                                \"paandorasbox tuba\",\n                                \"paandorasbox loopingcymbal\",\n                                \"paandorasbox standardkick\",\n                                \"paandorasbox standardsnare\",\n                                \"paandorasbox closedhihat\",\n                                \"paandorasbox foothihat\",\n                                \"paandorasbox openhihat\",\n                                \"paandorasbox crashcymbal\",\n                                \"paandorasbox pianoC4\",\n                                \"paandorasbox liver pad\",\n                                \"paandorasbox marimba\",\n                                \"paandorasbox susdotwav\",\n                                \"paandorasbox wackyboxtts\",\n                                \"paandorasbox peppersteak_1\",\n                                \"paandorasbox peppersteak_2\",\n                                \"paandorasbox vinyl_noise\",\n                                \"paandorasbeta slap bass\",\n                                \"paandorasbeta HD EB overdrive guitar\",\n                                \"paandorasbeta sunsoft bass\",\n                                \"paandorasbeta masculine choir\",\n                                \"paandorasbeta feminine choir\",\n                                \"paandorasbeta tololoche\",\n                                \"paandorasbeta harp\",\n                                \"paandorasbeta pan flute\",\n                                \"paandorasbeta krumhorn\",\n                                \"paandorasbeta timpani\",\n                                \"paandorasbeta crowd hey\",\n                                \"paandorasbeta wario land 4 brass\",\n                                \"paandorasbeta wario land 4 rock organ\",\n                                \"paandorasbeta wario land 4 DAOW\",\n                                \"paandorasbeta wario land 4 hour chime\",\n                                \"paandorasbeta wario land 4 tick\",\n                                \"paandorasbeta kirby kick\",\n                                \"paandorasbeta kirby snare\",\n                                \"paandorasbeta kirby bongo\",\n                                \"paandorasbeta kirby click\",\n                                \"paandorasbeta sonor kick\",\n                                \"paandorasbeta sonor snare\",\n                                \"paandorasbeta sonor snare (left hand)\",\n                                \"paandorasbeta sonor snare (right hand)\",\n                                \"paandorasbeta sonor high tom\",\n                                \"paandorasbeta sonor low tom\",\n                                \"paandorasbeta sonor hihat (closed)\",\n                                \"paandorasbeta sonor hihat (half opened)\",\n                                \"paandorasbeta sonor hihat (open)\",\n                                \"paandorasbeta sonor hihat (open tip)\",\n                                \"paandorasbeta sonor hihat (pedal)\",\n                                \"paandorasbeta sonor crash\",\n                                \"paandorasbeta sonor crash (tip)\",\n                                \"paandorasbeta sonor ride\"\n                            ];\n                            // The difference for these is in the doubled a.\n                            const oldNames: string[] = [\n                                \"pandoraasbox kick\",\n                                \"pandoraasbox snare\",\n                                \"pandoraasbox piano1\",\n                                \"pandoraasbox WOW\",\n                                \"pandoraasbox overdrive\",\n                                \"pandoraasbox trumpet\",\n                                \"pandoraasbox saxophone\",\n                                \"pandoraasbox orchestrahit\",\n                                \"pandoraasbox detatched violin\",\n                                \"pandoraasbox synth\",\n                                \"pandoraasbox sonic3snare\",\n                                \"pandoraasbox come on\",\n                                \"pandoraasbox choir\",\n                                \"pandoraasbox overdriveguitar\",\n                                \"pandoraasbox flute\",\n                                \"pandoraasbox legato violin\",\n                                \"pandoraasbox tremolo violin\",\n                                \"pandoraasbox amen break\",\n                                \"pandoraasbox pizzicato violin\",\n                                \"pandoraasbox tim allen grunt\",\n                                \"pandoraasbox tuba\",\n                                \"pandoraasbox loopingcymbal\",\n                                \"pandoraasbox standardkick\",\n                                \"pandoraasbox standardsnare\",\n                                \"pandoraasbox closedhihat\",\n                                \"pandoraasbox foothihat\",\n                                \"pandoraasbox openhihat\",\n                                \"pandoraasbox crashcymbal\",\n                                \"pandoraasbox pianoC4\",\n                                \"pandoraasbox liver pad\",\n                                \"pandoraasbox marimba\",\n                                \"pandoraasbox susdotwav\",\n                                \"pandoraasbox wackyboxtts\",\n                                \"pandoraasbox peppersteak_1\",\n                                \"pandoraasbox peppersteak_2\",\n                                \"pandoraasbox vinyl_noise\",\n                                \"pandoraasbeta slap bass\",\n                                \"pandoraasbeta HD EB overdrive guitar\",\n                                \"pandoraasbeta sunsoft bass\",\n                                \"pandoraasbeta masculine choir\",\n                                \"pandoraasbeta feminine choir\",\n                                \"pandoraasbeta tololoche\",\n                                \"pandoraasbeta harp\",\n                                \"pandoraasbeta pan flute\",\n                                \"pandoraasbeta krumhorn\",\n                                \"pandoraasbeta timpani\",\n                                \"pandoraasbeta crowd hey\",\n                                \"pandoraasbeta wario land 4 brass\",\n                                \"pandoraasbeta wario land 4 rock organ\",\n                                \"pandoraasbeta wario land 4 DAOW\",\n                                \"pandoraasbeta wario land 4 hour chime\",\n                                \"pandoraasbeta wario land 4 tick\",\n                                \"pandoraasbeta kirby kick\",\n                                \"pandoraasbeta kirby snare\",\n                                \"pandoraasbeta kirby bongo\",\n                                \"pandoraasbeta kirby click\",\n                                \"pandoraasbeta sonor kick\",\n                                \"pandoraasbeta sonor snare\",\n                                \"pandoraasbeta sonor snare (left hand)\",\n                                \"pandoraasbeta sonor snare (right hand)\",\n                                \"pandoraasbeta sonor high tom\",\n                                \"pandoraasbeta sonor low tom\",\n                                \"pandoraasbeta sonor hihat (closed)\",\n                                \"pandoraasbeta sonor hihat (half opened)\",\n                                \"pandoraasbeta sonor hihat (open)\",\n                                \"pandoraasbeta sonor hihat (open tip)\",\n                                \"pandoraasbeta sonor hihat (pedal)\",\n                                \"pandoraasbeta sonor crash\",\n                                \"pandoraasbeta sonor crash (tip)\",\n                                \"pandoraasbeta sonor ride\"\n                            ];\n                            // This mirrors paandorasboxWaveNames, which is unprefixed.\n                            const veryOldNames: string[] = [\n                                \"kick\",\n                                \"snare\",\n                                \"piano1\",\n                                \"WOW\",\n                                \"overdrive\",\n                                \"trumpet\",\n                                \"saxophone\",\n                                \"orchestrahit\",\n                                \"detatched violin\",\n                                \"synth\",\n                                \"sonic3snare\",\n                                \"come on\",\n                                \"choir\",\n                                \"overdriveguitar\",\n                                \"flute\",\n                                \"legato violin\",\n                                \"tremolo violin\",\n                                \"amen break\",\n                                \"pizzicato violin\",\n                                \"tim allen grunt\",\n                                \"tuba\",\n                                \"loopingcymbal\",\n                                \"standardkick\",\n                                \"standardsnare\",\n                                \"closedhihat\",\n                                \"foothihat\",\n                                \"openhihat\",\n                                \"crashcymbal\",\n                                \"pianoC4\",\n                                \"liver pad\",\n                                \"marimba\",\n                                \"susdotwav\",\n                                \"wackyboxtts\"\n                            ];\n                            if (names.includes(waveName)) {\n                                shouldLoadLegacySamples = true;\n                            } else if (oldNames.includes(waveName)) {\n                                shouldLoadLegacySamples = true;\n                                // If we see one of these old names, update it\n                                // to the corresponding new name.\n                                instrumentObject[\"wave\"] = names[oldNames.findIndex(x => x === waveName)];\n                            } else if (veryOldNames.includes(waveName)) {\n                                if (waveName === \"trumpet\" || waveName === \"flute\") {\n                                    // @TODO: This isn't exactly correct, but for now, if we see one of these two,\n                                    // leave them with the JummBox chip waves. The actual solution here will probably\n                                    // involve disambiguation via user input.\n                                } else {\n                                    // There's no other chip waves with ambiguous names like that, so it should\n                                    // be okay to assume we'll need to load the legacy samples now.\n                                    shouldLoadLegacySamples = true;\n                                    // If we see one of these old names, update it\n                                    // to the corresponding new name.\n                                    instrumentObject[\"wave\"] = names[veryOldNames.findIndex(x => x === waveName)];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (shouldLoadLegacySamples) {\n                Config.willReloadForCustomSamples = true;\n\n                Song._restoreChipWaveListToDefault();\n\n                loadBuiltInSamples(0);\n                EditorConfig.customSamples = [\"legacySamples\"];\n            } else {\n                // We don't need to load the legacy samples, but we may have\n                // leftover samples in memory. If we do, clear them.\n                if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {\n                    // We need to reload anyway in this case, because (for now)\n                    // the chip wave lists won't be correctly updated.\n                    Config.willReloadForCustomSamples = true;\n                    Song._clearSamples();\n                }\n            }\n        }\n\n        this.scale = 0; // default to free.\n        if (jsonObject[\"scale\"] != undefined) {\n            const oldScaleNames: Dictionary<string> = {\n                \"romani :)\": \"double harmonic :)\",\n\t\t\t\t\"romani :(\": \"double harmonic :(\",\n\t\t\t\t\"dbl harmonic :)\": \"double harmonic :)\",\n\t\t\t\t\"dbl harmonic :(\": \"double harmonic :(\",\n                \"enigma\": \"strange\",\n            };\n            const scaleName: string = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\n            const scale: number = Config.scales.findIndex(scale => scale.name == scaleName);\n            if (scale != -1) this.scale = scale;\n            if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n                if (jsonObject[\"customScale\"] != undefined) {\n                    for (var i of jsonObject[\"customScale\"].keys()) {\n                        this.scaleCustom[i] = jsonObject[\"customScale\"][i];\n                    }\n                }\n            }\n        }\n\n        if (jsonObject[\"key\"] != undefined) {\n            if (typeof (jsonObject[\"key\"]) == \"number\") {\n                this.key = ((jsonObject[\"key\"] + 1200) >>> 0) % Config.keys.length;\n            } else if (typeof (jsonObject[\"key\"]) == \"string\") {\n                const key: string = jsonObject[\"key\"];\n                // This conversion code depends on C through B being\n                // available as keys, of course.\n                if (key === \"C+\") {\n                    this.key = 0;\n                    this.octave = 1;\n                } else if (key === \"G- (actually F#-)\") {\n                    this.key = 6;\n                    this.octave = -1;\n                } else if (key === \"C-\") {\n                    this.key = 0;\n                    this.octave = -1;\n                } else if (key === \"oh no (F-)\") {\n                    this.key = 5;\n                    this.octave = -1;\n                } else {\n                    const letter: string = key.charAt(0).toUpperCase();\n                    const symbol: string = key.charAt(1).toLowerCase();\n                    const letterMap: Readonly<Dictionary<number>> = { \"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11 };\n                    const accidentalMap: Readonly<Dictionary<number>> = { \"#\": 1, \"♯\": 1, \"b\": -1, \"♭\": -1 };\n                    let index: number | undefined = letterMap[letter];\n                    const offset: number | undefined = accidentalMap[symbol];\n                    if (index != undefined) {\n                        if (offset != undefined) index += offset;\n                        if (index < 0) index += 12;\n                        index = index % 12;\n                        this.key = index;\n                    }\n                }\n            }\n        }\n\n        if (jsonObject[\"beatsPerMinute\"] != undefined) {\n            this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\n        }\n\n        if (jsonObject[\"keyOctave\"] != undefined) {\n            this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, jsonObject[\"keyOctave\"] | 0);\n        }\n\n        let legacyGlobalReverb: number = 0; // In older songs, reverb was song-global, record that here and pass it to Instrument.fromJsonObject() for context.\n        if (jsonObject[\"reverb\"] != undefined) {\n            legacyGlobalReverb = clamp(0, 32, jsonObject[\"reverb\"] | 0);\n        }\n\n        if (jsonObject[\"beatsPerBar\"] != undefined) {\n            this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\n        }\n\n        let importedPartsPerBeat: number = 4;\n        if (jsonObject[\"ticksPerBeat\"] != undefined) {\n            importedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\n            this.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);\n            if (this.rhythm == -1) {\n                this.rhythm = 1;\n            }\n        }\n\n        // Read limiter settings. Ranges and defaults are based on slider settings\n\n        if (jsonObject[\"masterGain\"] != undefined) {\n            this.masterGain = Math.max(0.0, Math.min(5.0, jsonObject[\"masterGain\"] || 0));\n        } else {\n            this.masterGain = 1.0;\n        }\n\n        if (jsonObject[\"limitThreshold\"] != undefined) {\n            this.limitThreshold = Math.max(0.0, Math.min(2.0, jsonObject[\"limitThreshold\"] || 0));\n        }\n        else {\n            this.limitThreshold = 1.0;\n        }\n\n        if (jsonObject[\"compressionThreshold\"] != undefined) {\n            this.compressionThreshold = Math.max(0.0, Math.min(1.1, jsonObject[\"compressionThreshold\"] || 0));\n        }\n        else {\n            this.compressionThreshold = 1.0;\n        }\n\n        if (jsonObject[\"limitRise\"] != undefined) {\n            this.limitRise = Math.max(2000.0, Math.min(10000.0, jsonObject[\"limitRise\"] || 0));\n        }\n        else {\n            this.limitRise = 4000.0;\n        }\n\n        if (jsonObject[\"limitDecay\"] != undefined) {\n            this.limitDecay = Math.max(1.0, Math.min(30.0, jsonObject[\"limitDecay\"] || 0));\n        }\n        else {\n            this.limitDecay = 4.0;\n        }\n\n        if (jsonObject[\"limitRatio\"] != undefined) {\n            this.limitRatio = Math.max(0.0, Math.min(11.0, jsonObject[\"limitRatio\"] || 0));\n        }\n        else {\n            this.limitRatio = 1.0;\n        }\n\n        if (jsonObject[\"compressionRatio\"] != undefined) {\n            this.compressionRatio = Math.max(0.0, Math.min(1.168, jsonObject[\"compressionRatio\"] || 0));\n        }\n        else {\n            this.compressionRatio = 1.0;\n        }\n\n        let maxInstruments: number = 1;\n        let maxPatterns: number = 1;\n        let maxBars: number = 1;\n        if (jsonObject[\"channels\"] != undefined) {\n            for (const channelObject of jsonObject[\"channels\"]) {\n                if (channelObject[\"instruments\"]) maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\n                if (channelObject[\"patterns\"]) maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\n                if (channelObject[\"sequence\"]) maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\n            }\n        }\n\n        if (jsonObject[\"layeredInstruments\"] != undefined) {\n            this.layeredInstruments = !!jsonObject[\"layeredInstruments\"];\n        } else {\n            this.layeredInstruments = false;\n        }\n        if (jsonObject[\"patternInstruments\"] != undefined) {\n            this.patternInstruments = !!jsonObject[\"patternInstruments\"];\n        } else {\n            this.patternInstruments = (maxInstruments > 1);\n        }\n        this.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\n        this.barCount = Math.min(maxBars, Config.barCountMax);\n\n        if (jsonObject[\"introBars\"] != undefined) {\n            this.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\n        }\n        if (jsonObject[\"loopBars\"] != undefined) {\n            this.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\n        }\n\n        const newPitchChannels: Channel[] = [];\n        const newNoiseChannels: Channel[] = [];\n        const newModChannels: Channel[] = [];\n        if (jsonObject[\"channels\"] != undefined) {\n            for (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\n                let channelObject: any = jsonObject[\"channels\"][channelIndex];\n\n                const channel: Channel = new Channel();\n\n                let isNoiseChannel: boolean = false;\n                let isModChannel: boolean = false;\n                if (channelObject[\"type\"] != undefined) {\n                    isNoiseChannel = (channelObject[\"type\"] == \"drum\");\n                    isModChannel = (channelObject[\"type\"] == \"mod\");\n                } else {\n                    // for older files, assume drums are channel 3.\n                    isNoiseChannel = (channelIndex >= 3);\n                }\n                if (isNoiseChannel) {\n                    newNoiseChannels.push(channel);\n                } else if (isModChannel) {\n                    newModChannels.push(channel);\n                }\n                else {\n                    newPitchChannels.push(channel);\n                }\n\n                if (channelObject[\"octaveScrollBar\"] != undefined) {\n                    channel.octave = clamp(0, Config.pitchOctaves, (channelObject[\"octaveScrollBar\"] | 0) + 1);\n                    if (isNoiseChannel) channel.octave = 0;\n                }\n\n                if (channelObject[\"name\"] != undefined) {\n                    channel.name = channelObject[\"name\"];\n                }\n                else {\n                    channel.name = \"\";\n                }\n\n                if (Array.isArray(channelObject[\"instruments\"])) {\n                    const instrumentObjects: any[] = channelObject[\"instruments\"];\n                    for (let i: number = 0; i < instrumentObjects.length; i++) {\n                        if (i >= this.getMaxInstrumentsPerChannel()) break;\n                        const instrument: Instrument = new Instrument(isNoiseChannel, isModChannel);\n                        channel.instruments[i] = instrument;\n                        instrument.fromJsonObject(instrumentObjects[i], isNoiseChannel, isModChannel, false, false, legacyGlobalReverb);\n                    }\n\n                }\n\n                for (let i: number = 0; i < this.patternsPerChannel; i++) {\n                    const pattern: Pattern = new Pattern();\n                    channel.patterns[i] = pattern;\n\n                    let patternObject: any = undefined;\n                    if (channelObject[\"patterns\"]) patternObject = channelObject[\"patterns\"][i];\n                    if (patternObject == undefined) continue;\n\n                    pattern.fromJsonObject(patternObject, this, channel, importedPartsPerBeat, isNoiseChannel, isModChannel);\n                }\n                channel.patterns.length = this.patternsPerChannel;\n\n                for (let i: number = 0; i < this.barCount; i++) {\n                    channel.bars[i] = (channelObject[\"sequence\"] != undefined) ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\n                }\n                channel.bars.length = this.barCount;\n            }\n        }\n\n        if (newPitchChannels.length > Config.pitchChannelCountMax) newPitchChannels.length = Config.pitchChannelCountMax;\n        if (newNoiseChannels.length > Config.noiseChannelCountMax) newNoiseChannels.length = Config.noiseChannelCountMax;\n        if (newModChannels.length > Config.modChannelCountMax) newModChannels.length = Config.modChannelCountMax;\n        this.pitchChannelCount = newPitchChannels.length;\n        this.noiseChannelCount = newNoiseChannels.length;\n        this.modChannelCount = newModChannels.length;\n        this.channels.length = 0;\n        Array.prototype.push.apply(this.channels, newPitchChannels);\n        Array.prototype.push.apply(this.channels, newNoiseChannels);\n        Array.prototype.push.apply(this.channels, newModChannels);\n\n        if (Config.willReloadForCustomSamples) {\n            window.location.hash = this.toBase64String();\n            // The prompt seems to get stuck if reloading is done too quickly.\n            setTimeout(() => { location.reload(); }, 50);\n        }\n    }\n\n    public getPattern(channelIndex: number, bar: number): Pattern | null {\n        if (bar < 0 || bar >= this.barCount) return null;\n        const patternIndex: number = this.channels[channelIndex].bars[bar];\n        if (patternIndex == 0) return null;\n        return this.channels[channelIndex].patterns[patternIndex - 1];\n    }\n\n    public getBeatsPerMinute(): number {\n        return this.tempo;\n    }\n\n    public static getNeededBits(maxValue: number): number {\n        return 32 - Math.clz32(Math.ceil(maxValue + 1) - 1);\n    }\n\n    public restoreLimiterDefaults(): void {\n        this.compressionRatio = 1.0;\n        this.limitRatio = 1.0;\n        this.limitRise = 4000.0;\n        this.limitDecay = 4.0;\n        this.limitThreshold = 1.0;\n        this.compressionThreshold = 1.0;\n        this.masterGain = 1.0;\n    }\n}\n\nclass PickedString {\n    public delayLine: Float32Array | null = null;\n    public delayIndex: number;\n    public allPassSample: number;\n    public allPassPrevInput: number;\n    public sustainFilterSample: number;\n\tpublic sustainFilterPrevOutput2: number;\n\tpublic sustainFilterPrevInput1: number;\n\tpublic sustainFilterPrevInput2: number;\n    public fractionalDelaySample: number;\n    public prevDelayLength: number;\n    public delayLengthDelta: number;\n    public delayResetOffset: number;\n\n    public allPassG: number = 0.0;\n    public allPassGDelta: number = 0.0;\n    public sustainFilterA1: number = 0.0;\n\tpublic sustainFilterA1Delta: number = 0.0;\n\tpublic sustainFilterA2: number = 0.0;\n\tpublic sustainFilterA2Delta: number = 0.0;\n\tpublic sustainFilterB0: number = 0.0;\n\tpublic sustainFilterB0Delta: number = 0.0;\n\tpublic sustainFilterB1: number = 0.0;\n\tpublic sustainFilterB1Delta: number = 0.0;\n\tpublic sustainFilterB2: number = 0.0;\n\tpublic sustainFilterB2Delta: number = 0.0;\n\n    constructor() {\n        this.reset();\n    }\n\n    public reset(): void {\n        this.delayIndex = -1;\n        this.allPassSample = 0.0;\n        this.allPassPrevInput = 0.0;\n        this.sustainFilterSample = 0.0;\n\t\tthis.sustainFilterPrevOutput2 = 0.0;\n\t\tthis.sustainFilterPrevInput1 = 0.0;\n\t\tthis.sustainFilterPrevInput2 = 0.0;\n        this.fractionalDelaySample = 0.0;\n        this.prevDelayLength = -1.0;\n        this.delayResetOffset = 0;\n    }\n\n    public update(synth: Synth, instrumentState: InstrumentState, tone: Tone, stringIndex: number, roundedSamplesPerTick: number, stringDecayStart: number, stringDecayEnd: number, sustainType: SustainType): void {\n        const allPassCenter: number = 2.0 * Math.PI * Config.pickedStringDispersionCenterFreq / synth.samplesPerSecond;\n\n        const prevDelayLength: number = this.prevDelayLength;\n\n        const phaseDeltaStart: number = tone.phaseDeltas[stringIndex];\n        const phaseDeltaScale: number = tone.phaseDeltaScales[stringIndex];\n        const phaseDeltaEnd: number = phaseDeltaStart * Math.pow(phaseDeltaScale, roundedSamplesPerTick);\n\n        const radiansPerSampleStart: number = Math.PI * 2.0 * phaseDeltaStart;\n        const radiansPerSampleEnd: number = Math.PI * 2.0 * phaseDeltaEnd;\n\n        const centerHarmonicStart: number = radiansPerSampleStart * 2.0;\n        const centerHarmonicEnd: number = radiansPerSampleEnd * 2.0;\n\n        const allPassRadiansStart: number = Math.min(Math.PI, radiansPerSampleStart * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleStart, Config.pickedStringDispersionFreqScale));\n        const allPassRadiansEnd: number = Math.min(Math.PI, radiansPerSampleEnd * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleEnd, Config.pickedStringDispersionFreqScale));\n        const shelfRadians: number = 2.0 * Math.PI * Config.pickedStringShelfHz / synth.samplesPerSecond;\n\t\tconst decayCurveStart: number = (Math.pow(100.0, stringDecayStart) - 1.0) / 99.0;\n\t\tconst decayCurveEnd: number   = (Math.pow(100.0, stringDecayEnd  ) - 1.0) / 99.0;\n\t\tconst register: number = sustainType == SustainType.acoustic ? 0.25 : 0.0;\n\t\tconst registerShelfCenter: number = 15.6;\n\t\tconst registerLowpassCenter: number = 3.0 * synth.samplesPerSecond / 48000;\n\t\t//const decayRateStart: number = Math.pow(0.5, decayCurveStart * shelfRadians / radiansPerSampleStart);\n\t\t//const decayRateEnd: number   = Math.pow(0.5, decayCurveEnd   * shelfRadians / radiansPerSampleEnd);\n\t\tconst decayRateStart: number = Math.pow(0.5, decayCurveStart * Math.pow(shelfRadians / (radiansPerSampleStart * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);\n\t\tconst decayRateEnd:   number = Math.pow(0.5, decayCurveEnd   * Math.pow(shelfRadians / (radiansPerSampleEnd   * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);\n        \n        const expressionDecayStart: number = Math.pow(decayRateStart, 0.002);\n        const expressionDecayEnd: number = Math.pow(decayRateEnd, 0.002);\n\n        Synth.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansStart);\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\n        const allPassGStart: number = Synth.tempFilterStartCoefficients.b[0]; /* same as a[1] */\n        const allPassPhaseDelayStart: number = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\n\n        Synth.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansEnd);\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\n        const allPassGEnd: number = Synth.tempFilterEndCoefficients.b[0]; /* same as a[1] */\n        const allPassPhaseDelayEnd: number = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\n\n        // 1st order shelf filters and 2nd order lowpass filters have differently shaped frequency\n\t\t// responses, as well as adjustable shapes. I originally picked a 1st order shelf filter,\n\t\t// but I kinda prefer 2nd order lowpass filters now and I designed a couple settings:\n\t\tconst enum PickedStringBrightnessType {\n\t\t\tbright, // 1st order shelf\n\t\t\tnormal, // 2nd order lowpass, rounded corner\n\t\t\tresonant, // 3rd order lowpass, harder corner\n\t\t}\n\t\tconst brightnessType: PickedStringBrightnessType = <any> sustainType == SustainType.bright ? PickedStringBrightnessType.bright : PickedStringBrightnessType.normal;\n\t\tif (brightnessType == PickedStringBrightnessType.bright) {\n\t\t\tconst shelfGainStart: number = Math.pow(decayRateStart, Config.stringDecayRate);\n\t\t\tconst shelfGainEnd: number   = Math.pow(decayRateEnd,   Config.stringDecayRate);\n\t\t\tSynth.tempFilterStartCoefficients.highShelf2ndOrder(shelfRadians, shelfGainStart, 0.5);\n\t\t\tSynth.tempFilterEndCoefficients.highShelf2ndOrder(shelfRadians, shelfGainEnd, 0.5);\n\t\t} else {\n\t\t\tconst cornerHardness: number = Math.pow(brightnessType == PickedStringBrightnessType.normal ? 0.0 : 1.0, 0.25);\n\t\t\tconst lowpass1stOrderCutoffRadiansStart: number = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleStart * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveStart, .5);\n\t\t\tconst lowpass1stOrderCutoffRadiansEnd:   number = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleEnd   * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveEnd,   .5);\n\t\t\tconst lowpass2ndOrderCutoffRadiansStart: number = lowpass1stOrderCutoffRadiansStart * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));\n\t\t\tconst lowpass2ndOrderCutoffRadiansEnd:   number = lowpass1stOrderCutoffRadiansEnd   * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));\n\t\t\tconst lowpass2ndOrderGainStart: number = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));\n\t\t\tconst lowpass2ndOrderGainEnd:   number = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));\n\t\t\tSynth.tempFilterStartCoefficients.lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansStart), lowpass2ndOrderGainStart);\n\t\t\tSynth.tempFilterEndCoefficients  .lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansEnd),   lowpass2ndOrderGainEnd);\n\t\t}\n\n\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\n\t\tconst sustainFilterA1Start: number = Synth.tempFilterStartCoefficients.a[1];\n\t\tconst sustainFilterA2Start: number = Synth.tempFilterStartCoefficients.a[2];\n\t\tconst sustainFilterB0Start: number = Synth.tempFilterStartCoefficients.b[0] * expressionDecayStart;\n\t\tconst sustainFilterB1Start: number = Synth.tempFilterStartCoefficients.b[1] * expressionDecayStart;\n\t\tconst sustainFilterB2Start: number = Synth.tempFilterStartCoefficients.b[2] * expressionDecayStart;\n\t\tconst sustainFilterPhaseDelayStart: number = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\n\n\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\n\t\tconst sustainFilterA1End: number = Synth.tempFilterEndCoefficients.a[1];\n\t\tconst sustainFilterA2End: number = Synth.tempFilterEndCoefficients.a[2];\n\t\tconst sustainFilterB0End: number = Synth.tempFilterEndCoefficients.b[0] * expressionDecayEnd;\n\t\tconst sustainFilterB1End: number = Synth.tempFilterEndCoefficients.b[1] * expressionDecayEnd;\n\t\tconst sustainFilterB2End: number = Synth.tempFilterEndCoefficients.b[2] * expressionDecayEnd;\n\t\tconst sustainFilterPhaseDelayEnd: number = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\n\n\t\tconst periodLengthStart: number = 1.0 / phaseDeltaStart;\n\t\tconst periodLengthEnd: number = 1.0 / phaseDeltaEnd;\n\t\tconst minBufferLength: number = Math.ceil(Math.max(periodLengthStart, periodLengthEnd) * 2);\n\t\tconst delayLength: number = periodLengthStart - allPassPhaseDelayStart - sustainFilterPhaseDelayStart;\n\t\tconst delayLengthEnd: number = periodLengthEnd - allPassPhaseDelayEnd - sustainFilterPhaseDelayEnd;\n\n\t\tthis.prevDelayLength = delayLength;\n\t\tthis.delayLengthDelta = (delayLengthEnd - delayLength) / roundedSamplesPerTick;\n\t\tthis.allPassG = allPassGStart;\n\t\tthis.sustainFilterA1 = sustainFilterA1Start;\n\t\tthis.sustainFilterA2 = sustainFilterA2Start;\n\t\tthis.sustainFilterB0 = sustainFilterB0Start;\n\t\tthis.sustainFilterB1 = sustainFilterB1Start;\n\t\tthis.sustainFilterB2 = sustainFilterB2Start;\n\t\tthis.allPassGDelta = (allPassGEnd - allPassGStart) / roundedSamplesPerTick;\n\t\tthis.sustainFilterA1Delta = (sustainFilterA1End - sustainFilterA1Start) / roundedSamplesPerTick;\n\t\tthis.sustainFilterA2Delta = (sustainFilterA2End - sustainFilterA2Start) / roundedSamplesPerTick;\n\t\tthis.sustainFilterB0Delta = (sustainFilterB0End - sustainFilterB0Start) / roundedSamplesPerTick;\n\t\tthis.sustainFilterB1Delta = (sustainFilterB1End - sustainFilterB1Start) / roundedSamplesPerTick;\n\t\tthis.sustainFilterB2Delta = (sustainFilterB2End - sustainFilterB2Start) / roundedSamplesPerTick;\n\n        const pitchChanged: boolean = Math.abs(Math.log2(delayLength / prevDelayLength)) > 0.01;\n\n        const reinitializeImpulse: boolean = (this.delayIndex == -1 || pitchChanged);\n        if (this.delayLine == null || this.delayLine.length <= minBufferLength) {\n            // The delay line buffer will get reused for other tones so might as well\n            // start off with a buffer size that is big enough for most notes.\n            const likelyMaximumLength: number = Math.ceil(2 * synth.samplesPerSecond / Instrument.frequencyFromPitch(12));\n            const newDelayLine: Float32Array = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\n            if (!reinitializeImpulse && this.delayLine != null) {\n                // If the tone has already started but the buffer needs to be reallocated,\n                // transfer the old data to the new buffer.\n                const oldDelayBufferMask: number = (this.delayLine.length - 1) >> 0;\n                const startCopyingFromIndex: number = this.delayIndex + this.delayResetOffset;\n                this.delayIndex = this.delayLine.length - this.delayResetOffset;\n                for (let i: number = 0; i < this.delayLine.length; i++) {\n                    newDelayLine[i] = this.delayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n                }\n            }\n            this.delayLine = newDelayLine;\n        }\n        const delayLine: Float32Array = this.delayLine;\n        const delayBufferMask: number = (delayLine.length - 1) >> 0;\n\n        if (reinitializeImpulse) {\n            // -1 delay index means the tone was reset.\n            // Also, if the pitch changed suddenly (e.g. from seamless or arpeggio) then reset the wave.\n\n            this.delayIndex = 0;\n            this.allPassSample = 0.0;\n            this.allPassPrevInput = 0.0;\n            this.sustainFilterSample = 0.0;\n\t\t\tthis.sustainFilterPrevOutput2 = 0.0;\n\t\t\tthis.sustainFilterPrevInput1 = 0.0;\n\t\t\tthis.sustainFilterPrevInput2 = 0.0;\n            this.fractionalDelaySample = 0.0;\n\n            // Clear away a region of the delay buffer for the new impulse.\n            const startImpulseFrom: number = -delayLength;\n            const startZerosFrom: number = Math.floor(startImpulseFrom - periodLengthStart / 2);\n            const stopZerosAt: number = Math.ceil(startZerosFrom + periodLengthStart * 2);\n            this.delayResetOffset = stopZerosAt; // And continue clearing the area in front of the delay line.\n            for (let i: number = startZerosFrom; i <= stopZerosAt; i++) {\n                delayLine[i & delayBufferMask] = 0.0;\n            }\n\n            const impulseWave: Float32Array = instrumentState.wave!;\n            const impulseWaveLength: number = impulseWave.length - 1; // The first sample is duplicated at the end, don't double-count it.\n            const impulsePhaseDelta: number = impulseWaveLength / periodLengthStart;\n\n            const fadeDuration: number = Math.min(periodLengthStart * 0.2, synth.samplesPerSecond * 0.003);\n            const startImpulseFromSample: number = Math.ceil(startImpulseFrom);\n            const stopImpulseAt: number = startImpulseFrom + periodLengthStart + fadeDuration;\n            const stopImpulseAtSample: number = stopImpulseAt;\n            let impulsePhase: number = (startImpulseFromSample - startImpulseFrom) * impulsePhaseDelta;\n            let prevWaveIntegral: number = 0.0;\n            for (let i: number = startImpulseFromSample; i <= stopImpulseAtSample; i++) {\n                const impulsePhaseInt: number = impulsePhase | 0;\n                const index: number = impulsePhaseInt % impulseWaveLength;\n                let nextWaveIntegral: number = impulseWave[index];\n                const phaseRatio: number = impulsePhase - impulsePhaseInt;\n                nextWaveIntegral += (impulseWave[index + 1] - nextWaveIntegral) * phaseRatio;\n                const sample: number = (nextWaveIntegral - prevWaveIntegral) / impulsePhaseDelta;\n                const fadeIn: number = Math.min(1.0, (i - startImpulseFrom) / fadeDuration);\n                const fadeOut: number = Math.min(1.0, (stopImpulseAt - i) / fadeDuration);\n                const combinedFade: number = fadeIn * fadeOut;\n                const curvedFade: number = combinedFade * combinedFade * (3.0 - 2.0 * combinedFade); // A cubic sigmoid from 0 to 1.\n                delayLine[i & delayBufferMask] += sample * curvedFade;\n                prevWaveIntegral = nextWaveIntegral;\n                impulsePhase += impulsePhaseDelta;\n            }\n        }\n    }\n}\n\nclass EnvelopeComputer {\n    public noteSecondsStart: number = 0.0;\n    public noteSecondsEnd: number = 0.0;\n    public noteTicksStart: number = 0.0;\n    public noteTicksEnd: number = 0.0;\n    public noteSizeStart: number = Config.noteSizeMax;\n    public noteSizeEnd: number = Config.noteSizeMax;\n    public prevNoteSize: number = Config.noteSizeMax;\n    public nextNoteSize: number = Config.noteSizeMax;\n    private _noteSizeFinal: number = Config.noteSizeMax;\n    public prevNoteSecondsStart: number = 0.0;\n    public prevNoteSecondsEnd: number = 0.0;\n    public prevNoteTicksStart: number = 0.0;\n    public prevNoteTicksEnd: number = 0.0;\n    private _prevNoteSizeFinal: number = Config.noteSizeMax;\n\n    public prevSlideStart: boolean = false;\n    public prevSlideEnd: boolean = false;\n    public nextSlideStart: boolean = false;\n    public nextSlideEnd: boolean = false;\n    public prevSlideRatioStart: number = 0.0;\n    public prevSlideRatioEnd: number = 0.0;\n    public nextSlideRatioStart: number = 0.0;\n    public nextSlideRatioEnd: number = 0.0;\n\n    public readonly envelopeStarts: number[] = [];\n    public readonly envelopeEnds: number[] = [];\n    private readonly _modifiedEnvelopeIndices: number[] = [];\n    private _modifiedEnvelopeCount: number = 0;\n    public lowpassCutoffDecayVolumeCompensation: number = 1.0;\n\n    constructor(/*private _perNote: boolean*/) {\n        //const length: number = this._perNote ? EnvelopeComputeIndex.length : InstrumentAutomationIndex.length;\n        const length: number = EnvelopeComputeIndex.length;\n        for (let i: number = 0; i < length; i++) {\n            this.envelopeStarts[i] = 1.0;\n            this.envelopeEnds[i] = 1.0;\n        }\n\n        this.reset();\n    }\n\n    public reset(): void {\n        this.noteSecondsEnd = 0.0;\n        this.noteTicksEnd = 0.0;\n        this._noteSizeFinal = Config.noteSizeMax;\n        this.prevNoteSecondsEnd = 0.0;\n        this.prevNoteTicksEnd = 0.0;\n        this._prevNoteSizeFinal = Config.noteSizeMax;\n        this._modifiedEnvelopeCount = 0;\n    }\n\n    public computeEnvelopes(instrument: Instrument, currentPart: number, tickTimeStart: number, tickTimeStartReal: number, secondsPerTick: number, tone: Tone | null, timeScale: number): void {\n        secondsPerTick *= timeScale;\n        const transition: Transition = instrument.getTransition();\n        if (tone != null && tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\n            this.prevNoteSecondsEnd = this.noteSecondsEnd;\n            this.prevNoteTicksEnd = this.noteTicksEnd;\n            this._prevNoteSizeFinal = this._noteSizeFinal;\n            this.noteSecondsEnd = 0.0;\n            this.noteTicksEnd = 0.0;\n        }\n        if (tone != null) {\n            if (tone.note != null) {\n                this._noteSizeFinal = tone.note.pins[tone.note.pins.length - 1].size;\n            } else {\n                this._noteSizeFinal = Config.noteSizeMax;\n            }\n        }\n        const tickTimeEnd: number = tickTimeStart + timeScale;\n        const tickTimeEndReal: number = tickTimeStartReal + 1.0;\n        const noteSecondsStart: number = this.noteSecondsEnd;\n        const noteSecondsEnd: number = noteSecondsStart + secondsPerTick;\n        const noteTicksStart: number = this.noteTicksEnd;\n        const noteTicksEnd: number = noteTicksStart + 1.0;\n        const prevNoteSecondsStart: number = this.prevNoteSecondsEnd;\n        const prevNoteSecondsEnd: number = prevNoteSecondsStart + secondsPerTick;\n        const prevNoteTicksStart: number = this.prevNoteTicksEnd;\n        const prevNoteTicksEnd: number = prevNoteTicksStart + 1.0;\n\n        const beatsPerTick: number = 1.0 / (Config.ticksPerPart * Config.partsPerBeat);\n        const beatTimeStart: number = beatsPerTick * tickTimeStart;\n        const beatTimeEnd: number = beatsPerTick * tickTimeEnd;\n\n        let noteSizeStart: number = this._noteSizeFinal;\n        let noteSizeEnd: number = this._noteSizeFinal;\n        let prevNoteSize: number = this._prevNoteSizeFinal;\n        let nextNoteSize: number = 0;\n        let prevSlideStart: boolean = false;\n        let prevSlideEnd: boolean = false;\n        let nextSlideStart: boolean = false;\n        let nextSlideEnd: boolean = false;\n        let prevSlideRatioStart: number = 0.0;\n        let prevSlideRatioEnd: number = 0.0;\n        let nextSlideRatioStart: number = 0.0;\n        let nextSlideRatioEnd: number = 0.0;\n        if (tone != null && tone.note != null && !tone.passedEndOfNote) {\n            const endPinIndex: number = tone.note.getEndPinIndex(currentPart);\n            const startPin: NotePin = tone.note.pins[endPinIndex - 1];\n            const endPin: NotePin = tone.note.pins[endPinIndex];\n            const startPinTick: number = (tone.note.start + startPin.time) * Config.ticksPerPart;\n            const endPinTick: number = (tone.note.start + endPin.time) * Config.ticksPerPart;\n            const ratioStart: number = (tickTimeStartReal - startPinTick) / (endPinTick - startPinTick);\n            const ratioEnd: number = (tickTimeEndReal - startPinTick) / (endPinTick - startPinTick);\n            noteSizeStart = startPin.size + (endPin.size - startPin.size) * ratioStart;\n            noteSizeEnd = startPin.size + (endPin.size - startPin.size) * ratioEnd;\n\n            if (transition.slides) {\n                const noteStartTick: number = tone.noteStartPart * Config.ticksPerPart;\n                const noteEndTick: number = tone.noteEndPart * Config.ticksPerPart;\n                const noteLengthTicks: number = noteEndTick - noteStartTick;\n                const maximumSlideTicks: number = noteLengthTicks * 0.5;\n                const slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\n                if (tone.prevNote != null && !tone.forceContinueAtStart) {\n                    if (tickTimeStartReal - noteStartTick < slideTicks) {\n                        prevSlideStart = true;\n                        prevSlideRatioStart = 0.5 * (1.0 - (tickTimeStartReal - noteStartTick) / slideTicks);\n                    }\n                    if (tickTimeEndReal - noteStartTick < slideTicks) {\n                        prevSlideEnd = true;\n                        prevSlideRatioEnd = 0.5 * (1.0 - (tickTimeEndReal - noteStartTick) / slideTicks);\n                    }\n                }\n                if (tone.nextNote != null && !tone.forceContinueAtEnd) {\n                    nextNoteSize = tone.nextNote.pins[0].size\n                    if (noteEndTick - tickTimeStartReal < slideTicks) {\n                        nextSlideStart = true;\n                        nextSlideRatioStart = 0.5 * (1.0 - (noteEndTick - tickTimeStartReal) / slideTicks);\n                    }\n                    if (noteEndTick - tickTimeEndReal < slideTicks) {\n                        nextSlideEnd = true;\n                        nextSlideRatioEnd = 0.5 * (1.0 - (noteEndTick - tickTimeEndReal) / slideTicks);\n                    }\n                }\n            }\n        }\n\n        let lowpassCutoffDecayVolumeCompensation: number = 1.0;\n        let usedNoteSize: boolean = false;\n        for (let envelopeIndex: number = 0; envelopeIndex <= instrument.envelopeCount; envelopeIndex++) {\n            let automationTarget: AutomationTarget;\n            let targetIndex: number;\n            let envelope: Envelope;\n            if (envelopeIndex == instrument.envelopeCount) {\n                if (usedNoteSize /*|| !this._perNote*/) break;\n                // Special case: if no other envelopes used note size, default to applying it to note volume.\n                automationTarget = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\n                targetIndex = 0;\n                envelope = Config.envelopes.dictionary[\"note size\"];\n            } else {\n                let envelopeSettings: EnvelopeSettings = instrument.envelopes[envelopeIndex];\n                automationTarget = Config.instrumentAutomationTargets[envelopeSettings.target];\n                targetIndex = envelopeSettings.index;\n                envelope = Config.envelopes[envelopeSettings.envelope];\n                if (envelope.type == EnvelopeType.noteSize) usedNoteSize = true;\n            }\n            if (/*automationTarget.perNote == this._perNote &&*/ automationTarget.computeIndex != null) {\n                const computeIndex: number = automationTarget.computeIndex + targetIndex;\n                let envelopeStart: number = EnvelopeComputer.computeEnvelope(envelope, noteSecondsStart, beatTimeStart, noteSizeStart);\n                if (prevSlideStart) {\n                    const other: number = EnvelopeComputer.computeEnvelope(envelope, prevNoteSecondsStart, beatTimeStart, prevNoteSize);\n                    envelopeStart += (other - envelopeStart) * prevSlideRatioStart;\n                }\n                if (nextSlideStart) {\n                    const other: number = EnvelopeComputer.computeEnvelope(envelope, 0.0, beatTimeStart, nextNoteSize);\n                    envelopeStart += (other - envelopeStart) * nextSlideRatioStart;\n                }\n                let envelopeEnd: number = envelopeStart;\n                if (instrument.discreteEnvelope == false) {\n                    envelopeEnd = EnvelopeComputer.computeEnvelope(envelope, noteSecondsEnd, beatTimeEnd, noteSizeEnd);\n                    if (prevSlideEnd) {\n                        const other: number = EnvelopeComputer.computeEnvelope(envelope, prevNoteSecondsEnd, beatTimeEnd, prevNoteSize);\n                        envelopeEnd += (other - envelopeEnd) * prevSlideRatioEnd;\n                    }\n                    if (nextSlideEnd) {\n                        const other: number = EnvelopeComputer.computeEnvelope(envelope, 0.0, beatTimeEnd, nextNoteSize);\n                        envelopeEnd += (other - envelopeEnd) * nextSlideRatioEnd;\n                    }\n                }\n\n                this.envelopeStarts[computeIndex] *= envelopeStart;\n                this.envelopeEnds[computeIndex] *= envelopeEnd;\n                this._modifiedEnvelopeIndices[this._modifiedEnvelopeCount++] = computeIndex;\n\n                if (automationTarget.isFilter) {\n                    const filterSettings: FilterSettings = /*this._perNote ?*/ (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter /*: instrument.eqFilter*/;\n                    if (filterSettings.controlPointCount > targetIndex && filterSettings.controlPoints[targetIndex].type == FilterType.lowPass) {\n                        lowpassCutoffDecayVolumeCompensation = Math.max(lowpassCutoffDecayVolumeCompensation, EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(envelope));\n                    }\n                }\n            }\n        }\n\n        this.noteSecondsStart = noteSecondsStart;\n        this.noteSecondsEnd = noteSecondsEnd;\n        this.noteTicksStart = noteTicksStart;\n        this.noteTicksEnd = noteTicksEnd;\n        this.prevNoteSecondsStart = prevNoteSecondsStart;\n        this.prevNoteSecondsEnd = prevNoteSecondsEnd;\n        this.prevNoteTicksStart = prevNoteTicksStart;\n        this.prevNoteTicksEnd = prevNoteTicksEnd;\n        this.prevNoteSize = prevNoteSize;\n        this.nextNoteSize = nextNoteSize;\n        this.noteSizeStart = noteSizeStart;\n        this.noteSizeEnd = noteSizeEnd;\n        this.prevSlideStart = prevSlideStart;\n        this.prevSlideEnd = prevSlideEnd;\n        this.nextSlideStart = nextSlideStart;\n        this.nextSlideEnd = nextSlideEnd;\n        this.prevSlideRatioStart = prevSlideRatioStart;\n        this.prevSlideRatioEnd = prevSlideRatioEnd;\n        this.nextSlideRatioStart = nextSlideRatioStart;\n        this.nextSlideRatioEnd = nextSlideRatioEnd;\n        this.lowpassCutoffDecayVolumeCompensation = lowpassCutoffDecayVolumeCompensation;\n    }\n\n    public clearEnvelopes(): void {\n        for (let envelopeIndex: number = 0; envelopeIndex < this._modifiedEnvelopeCount; envelopeIndex++) {\n            const computeIndex: number = this._modifiedEnvelopeIndices[envelopeIndex];\n            this.envelopeStarts[computeIndex] = 1.0;\n            this.envelopeEnds[computeIndex] = 1.0;\n        }\n        this._modifiedEnvelopeCount = 0;\n    }\n\n    public static computeEnvelope(envelope: Envelope, time: number, beats: number, noteSize: number): number {\n        switch (envelope.type) {\n            case EnvelopeType.noteSize: return Synth.noteSizeToVolumeMult(noteSize);\n            case EnvelopeType.none: return 1.0;\n            case EnvelopeType.twang: return 1.0 / (1.0 + time * envelope.speed);\n            case EnvelopeType.swell: return 1.0 - 1.0 / (1.0 + time * envelope.speed);\n            case EnvelopeType.tremolo: return 0.5 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.5;\n            case EnvelopeType.tremolo2: return 0.75 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.25;\n            case EnvelopeType.punch: return Math.max(1.0, 2.0 - time * 10.0);\n            case EnvelopeType.flare: const attack: number = 0.25 / Math.sqrt(envelope.speed); return time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * envelope.speed);\n            case EnvelopeType.decay: return Math.pow(2, -envelope.speed * time);\n            case EnvelopeType.blip: return 1.0 * +(time < (0.25 / Math.sqrt(envelope.speed)));\n            case EnvelopeType.wibble:\n                let temp = 0.5 - Math.cos(beats * envelope.speed) * 0.5;\n                temp = 1.0 / (1.0 + time * (envelope.speed - (temp / (1.5 / envelope.speed))));\n                temp = temp > 0.0 ? temp : 0.0;\n                return temp;\n            case EnvelopeType.linear: {\n                let lin = (1.0 - (time / (16 / envelope.speed)));\n                lin = lin > 0.0 ? lin : 0.0;\n                return lin;\n            }\n            case EnvelopeType.rise: {\n                let lin = (time / (16 / envelope.speed));\n                lin = lin < 1.0 ? lin : 1.0;\n                return lin;\n            }\n            default: throw new Error(\"Unrecognized operator envelope type.\");\n        }\n\n    }\n\n    public static getLowpassCutoffDecayVolumeCompensation(envelope: Envelope): number {\n        // This is a little hokey in the details, but I designed it a while ago and keep it \n        // around for compatibility. This decides how much to increase the volume (or\n        // expression) to compensate for a decaying lowpass cutoff to maintain perceived\n        // volume overall.\n        if (envelope.type == EnvelopeType.decay) return 1.25 + 0.025 * envelope.speed;\n        if (envelope.type == EnvelopeType.twang) return 1.0 + 0.02 * envelope.speed;\n        return 1.0;\n    }\n}\n\nclass Tone {\n    public instrumentIndex: number;\n    public readonly pitches: number[] = Array(Config.maxChordSize+2).fill(0);\n    public pitchCount: number = 0;\n    public chordSize: number = 0;\n    public drumsetPitch: number | null = null;\n    public note: Note | null = null;\n    public prevNote: Note | null = null;\n    public nextNote: Note | null = null;\n    public prevNotePitchIndex: number = 0;\n    public nextNotePitchIndex: number = 0;\n    public freshlyAllocated: boolean = true;\n    public atNoteStart: boolean = false;\n    public isOnLastTick: boolean = false; // Whether the tone is finished fading out and ready to be freed.\n    public passedEndOfNote: boolean = false;\n    public forceContinueAtStart: boolean = false;\n    public forceContinueAtEnd: boolean = false;\n    public noteStartPart: number = 0;\n    public noteEndPart: number = 0;\n    public ticksSinceReleased: number = 0;\n    public liveInputSamplesHeld: number = 0;\n    public lastInterval: number = 0;\n    public noiseSample: number = 0.0;\n    public stringSustainStart: number = 0;\n    public stringSustainEnd: number = 0;\n    public readonly phases: number[] = [];\n    public readonly operatorWaves: OperatorWave[] = [];\n    public readonly phaseDeltas: number[] = [];\n\t\t\t// advloop addition\n        public directions: number[] = [];\n        public chipWaveCompletions: number[] = [];\n        public chipWavePrevWaves: number[] = [];\n        public chipWaveCompletionsLastWave: number[] = [];\n           // advloop addition\n    public readonly phaseDeltaScales: number[] = [];\n    public expression: number = 0.0;\n    public expressionDelta: number = 0.0;\n    public readonly operatorExpressions: number[] = [];\n    public readonly operatorExpressionDeltas: number[] = [];\n    public readonly prevPitchExpressions: Array<number | null> = Array(Config.maxPitchOrOperatorCount).fill(null);\n    public prevVibrato: number | null = null;\n    public prevStringDecay: number | null = null;\n    public pulseWidth: number = 0.0;\n    public pulseWidthDelta: number = 0.0;\n    public decimalOffset: number = 0.0;\n    public supersawDynamism: number = 0.0;\n\tpublic supersawDynamismDelta: number = 0.0;\n\tpublic supersawUnisonDetunes: number[] = []; // These can change over time, but slowly enough that I'm not including corresponding delta values within a tick run.\n\tpublic supersawShape: number = 0.0;\n\tpublic supersawShapeDelta: number = 0.0;\n\tpublic supersawDelayLength: number = 0.0;\n\tpublic supersawDelayLengthDelta: number = 0.0;\n\tpublic supersawDelayLine: Float32Array | null = null;\n\tpublic supersawDelayIndex: number = -1;\n\tpublic supersawPrevPhaseDelta: number | null = null;\n    public readonly pickedStrings: PickedString[] = [];\n\n    public readonly noteFilters: DynamicBiquadFilter[] = [];\n    public noteFilterCount: number = 0;\n    public initialNoteFilterInput1: number = 0.0;\n    public initialNoteFilterInput2: number = 0.0;\n\n    public specialIntervalExpressionMult: number = 1.0;\n    public readonly feedbackOutputs: number[] = [];\n    public feedbackMult: number = 0.0;\n    public feedbackDelta: number = 0.0;\n    public stereoVolumeLStart: number = 0.0;\n    public stereoVolumeRStart: number = 0.0;\n    public stereoVolumeLDelta: number = 0.0;\n    public stereoVolumeRDelta: number = 0.0;\n    public stereoDelayStart: number = 0.0;\n    public stereoDelayEnd: number = 0.0;\n    public stereoDelayDelta: number = 0.0;\n    public customVolumeStart: number = 0.0;\n    public customVolumeEnd: number = 0.0;\n    public filterResonanceStart: number = 0.0;\n    public filterResonanceDelta: number = 0.0;\n    public isFirstOrder: boolean = false;\n\n    public readonly envelopeComputer: EnvelopeComputer = new EnvelopeComputer(/*true*/);\n\n    constructor() {\n        this.reset();\n    }\n\n    public reset(): void {\n        this.noiseSample = 0.0;\n        for (let i: number = 0; i < Config.maxPitchOrOperatorCount; i++) {\n            this.phases[i] = 0.0;\n\t\t\t\t\t\t// advloop addition\n                this.directions[i] = 1;\n                this.chipWaveCompletions[i] = 0;\n                this.chipWavePrevWaves[i] = 0;\n                this.chipWaveCompletionsLastWave[i] = 0;\n                // advloop addition\n            this.operatorWaves[i] = Config.operatorWaves[0];\n            this.feedbackOutputs[i] = 0.0;\n            this.prevPitchExpressions[i] = null;\n        }\n        for (let i: number = 0; i < this.noteFilterCount; i++) {\n            this.noteFilters[i].resetOutput();\n        }\n        this.noteFilterCount = 0;\n        this.initialNoteFilterInput1 = 0.0;\n        this.initialNoteFilterInput2 = 0.0;\n        this.liveInputSamplesHeld = 0;\n        this.supersawDelayIndex = -1;\n        for (const pickedString of this.pickedStrings) {\n            pickedString.reset();\n        }\n        this.envelopeComputer.reset();\n        this.prevVibrato = null;\n        this.prevStringDecay = null;\n        this.supersawPrevPhaseDelta = null;\n        this.drumsetPitch = null;\n    }\n}\n\nclass InstrumentState {\n    public awake: boolean = false; // Whether the instrument's effects-processing loop should continue.\n    public computed: boolean = false; // Whether the effects-processing parameters are up-to-date for the current synth run.\n    public tonesAddedInThisTick: boolean = false; // Whether any instrument tones are currently active.\n    public flushingDelayLines: boolean = false; // If no tones were active recently, enter a mode where the delay lines are filled with zeros to reset them for later use.\n    public deactivateAfterThisTick: boolean = false; // Whether the instrument is ready to be deactivated because the delay lines, if any, are fully zeroed.\n    public attentuationProgress: number = 0.0; // How long since an active tone introduced an input signal to the delay lines, normalized from 0 to 1 based on how long to wait until the delay lines signal will have audibly dissapated.\n    public flushedSamples: number = 0; // How many delay line samples have been flushed to zero.\n    public readonly activeTones: Deque<Tone> = new Deque<Tone>();\n    public readonly activeModTones: Deque<Tone> = new Deque<Tone>();\n    public readonly releasedTones: Deque<Tone> = new Deque<Tone>(); // Tones that are in the process of fading out after the corresponding notes ended.\n    public readonly liveInputTones: Deque<Tone> = new Deque<Tone>(); // Tones that are initiated by a source external to the loaded song data.\n\n    public type: InstrumentType = InstrumentType.chip;\n    public synthesizer: Function | null = null;\n    public wave: Float32Array | null = null;\n\t\t\t\t // advloop addition\n            public isUsingAdvancedLoopControls = false;\n            public chipWaveLoopStart = 0;\n            public chipWaveLoopEnd = 0;\n            public chipWaveLoopMode = 0;\n            public chipWavePlayBackwards = false;\n            public chipWaveStartOffset = 0;\n            // advloop addition\n    public noisePitchFilterMult: number = 1.0;\n    public unison: Unison | null = null;\n    public unisonVoices: number = 1;\n    public unisonSpread: number = 0.0;\n    public unisonOffset: number = 0.0;\n    public unisonExpression: number = 1.4;\n    public unisonSign: number = 1.0;\n    public chord: Chord | null = null;\n    public effects: number = 0;\n\n    public volumeScale: number = 0;\n    public aliases: boolean = false;\n    public arpTime: number = 0;\n    public vibratoTime: number = 0;\n    public nextVibratoTime: number = 0;\n    public envelopeTime: number = 0;\n\n    public eqFilterVolume: number = 1.0;\n    public eqFilterVolumeDelta: number = 0.0;\n    public mixVolume: number = 1.0;\n    public mixVolumeDelta: number = 0.0;\n    public delayInputMult: number = 0.0;\n    public delayInputMultDelta: number = 0.0;\n\n    public distortion: number = 0.0;\n    public distortionDelta: number = 0.0;\n    public distortionDrive: number = 0.0;\n    public distortionDriveDelta: number = 0.0;\n    public distortionFractionalInput1: number = 0.0;\n    public distortionFractionalInput2: number = 0.0;\n    public distortionFractionalInput3: number = 0.0;\n    public distortionPrevInput: number = 0.0;\n    public distortionNextOutput: number = 0.0;\n\n    public bitcrusherPrevInput: number = 0.0;\n    public bitcrusherCurrentOutput: number = 0.0;\n    public bitcrusherPhase: number = 1.0;\n    public bitcrusherPhaseDelta: number = 0.0;\n    public bitcrusherPhaseDeltaScale: number = 1.0;\n    public bitcrusherScale: number = 1.0;\n    public bitcrusherScaleScale: number = 1.0;\n    public bitcrusherFoldLevel: number = 1.0;\n    public bitcrusherFoldLevelScale: number = 1.0;\n\n    public readonly eqFilters: DynamicBiquadFilter[] = [];\n    public eqFilterCount: number = 0;\n    public initialEqFilterInput1: number = 0.0;\n    public initialEqFilterInput2: number = 0.0;\n\n    public panningDelayLine: Float32Array | null = null;\n    public panningDelayPos: number = 0;\n    public panningVolumeL: number = 0.0;\n    public panningVolumeR: number = 0.0;\n    public panningVolumeDeltaL: number = 0.0;\n    public panningVolumeDeltaR: number = 0.0;\n    public panningOffsetL: number = 0.0;\n    public panningOffsetR: number = 0.0;\n    public panningOffsetDeltaL: number = 0.0;\n    public panningOffsetDeltaR: number = 0.0;\n\n    public chorusDelayLineL: Float32Array | null = null;\n    public chorusDelayLineR: Float32Array | null = null;\n    public chorusDelayLineDirty: boolean = false;\n    public chorusDelayPos: number = 0;\n    public chorusPhase: number = 0;\n    public chorusVoiceMult: number = 0;\n    public chorusVoiceMultDelta: number = 0;\n    public chorusCombinedMult: number = 0;\n    public chorusCombinedMultDelta: number = 0;\n\n    public echoDelayLineL: Float32Array | null = null;\n    public echoDelayLineR: Float32Array | null = null;\n    public echoDelayLineDirty: boolean = false;\n    public echoDelayPos: number = 0;\n    public echoDelayOffsetStart: number = 0;\n    public echoDelayOffsetEnd: number | null = null;\n    public echoDelayOffsetRatio: number = 0.0;\n    public echoDelayOffsetRatioDelta: number = 0.0;\n    public echoMult: number = 0.0;\n    public echoMultDelta: number = 0.0;\n    public echoShelfA1: number = 0.0;\n    public echoShelfB0: number = 0.0;\n    public echoShelfB1: number = 0.0;\n    public echoShelfSampleL: number = 0.0;\n    public echoShelfSampleR: number = 0.0;\n    public echoShelfPrevInputL: number = 0.0;\n    public echoShelfPrevInputR: number = 0.0;\n\n    public reverbDelayLine: Float32Array | null = null;\n    public reverbDelayLineDirty: boolean = false;\n    public reverbDelayPos: number = 0;\n    public reverbMult: number = 0.0;\n    public reverbMultDelta: number = 0.0;\n    public reverbShelfA1: number = 0.0;\n    public reverbShelfB0: number = 0.0;\n    public reverbShelfB1: number = 0.0;\n    public reverbShelfSample0: number = 0.0;\n    public reverbShelfSample1: number = 0.0;\n    public reverbShelfSample2: number = 0.0;\n    public reverbShelfSample3: number = 0.0;\n    public reverbShelfPrevInput0: number = 0.0;\n    public reverbShelfPrevInput1: number = 0.0;\n    public reverbShelfPrevInput2: number = 0.0;\n    public reverbShelfPrevInput3: number = 0.0;\n\n    //public readonly envelopeComputer: EnvelopeComputer = new EnvelopeComputer(false);\n\n    public readonly spectrumWave: SpectrumWaveState = new SpectrumWaveState();\n    public readonly harmonicsWave: HarmonicsWaveState = new HarmonicsWaveState();\n    public readonly drumsetSpectrumWaves: SpectrumWaveState[] = [];\n\n    constructor() {\n        for (let i: number = 0; i < Config.drumCount; i++) {\n            this.drumsetSpectrumWaves[i] = new SpectrumWaveState();\n        }\n    }\n\n\n    public allocateNecessaryBuffers(synth: Synth, instrument: Instrument, samplesPerTick: number): void {\n        if (effectsIncludePanning(instrument.effects)) {\n            if (this.panningDelayLine == null || this.panningDelayLine.length < synth.panningDelayBufferSize) {\n                this.panningDelayLine = new Float32Array(synth.panningDelayBufferSize);\n            }\n        }\n        if (effectsIncludeChorus(instrument.effects)) {\n            if (this.chorusDelayLineL == null || this.chorusDelayLineL.length < synth.chorusDelayBufferSize) {\n                this.chorusDelayLineL = new Float32Array(synth.chorusDelayBufferSize);\n            }\n            if (this.chorusDelayLineR == null || this.chorusDelayLineR.length < synth.chorusDelayBufferSize) {\n                this.chorusDelayLineR = new Float32Array(synth.chorusDelayBufferSize);\n            }\n        }\n        if (effectsIncludeEcho(instrument.effects)) {\n            // account for tempo and delay automation changing delay length during a tick?\n            const safeEchoDelaySteps: number = Math.max(Config.echoDelayRange >> 1, (instrument.echoDelay + 1)); // The delay may be very short now, but if it increases later make sure we have enough sample history.\n            const baseEchoDelayBufferSize: number = Synth.fittingPowerOfTwo(safeEchoDelaySteps * Config.echoDelayStepTicks * samplesPerTick);\n            const safeEchoDelayBufferSize: number = baseEchoDelayBufferSize * 2; // If the tempo or delay changes and we suddenly need a longer delay, make sure that we have enough sample history to accomodate the longer delay.\n\n            if (this.echoDelayLineL == null || this.echoDelayLineR == null) {\n                this.echoDelayLineL = new Float32Array(safeEchoDelayBufferSize);\n                this.echoDelayLineR = new Float32Array(safeEchoDelayBufferSize);\n            } else if (this.echoDelayLineL.length < safeEchoDelayBufferSize || this.echoDelayLineR.length < safeEchoDelayBufferSize) {\n                // The echo delay length may change whlie the song is playing if tempo changes,\n                // so buffers may need to be reallocated, but we don't want to lose any echoes\n                // so we need to copy the contents of the old buffer to the new one.\n                const newDelayLineL: Float32Array = new Float32Array(safeEchoDelayBufferSize);\n                const newDelayLineR: Float32Array = new Float32Array(safeEchoDelayBufferSize);\n                const oldMask: number = this.echoDelayLineL.length - 1;\n\n                for (let i = 0; i < this.echoDelayLineL.length; i++) {\n                    newDelayLineL[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];\n                    newDelayLineR[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];\n                }\n\n                this.echoDelayPos = this.echoDelayLineL.length;\n                this.echoDelayLineL = newDelayLineL;\n                this.echoDelayLineR = newDelayLineR;\n            }\n        }\n        if (effectsIncludeReverb(instrument.effects)) {\n            // TODO: Make reverb delay line sample rate agnostic. Maybe just double buffer size for 96KHz? Adjust attenuation and shelf cutoff appropriately?\n            if (this.reverbDelayLine == null) {\n                this.reverbDelayLine = new Float32Array(Config.reverbDelayBufferSize);\n            }\n        }\n    }\n\n    public deactivate(): void {\n        this.bitcrusherPrevInput = 0.0;\n        this.bitcrusherCurrentOutput = 0.0;\n        this.bitcrusherPhase = 1.0;\n        for (let i: number = 0; i < this.eqFilterCount; i++) {\n            this.eqFilters[i].resetOutput();\n        }\n        this.eqFilterCount = 0;\n        this.initialEqFilterInput1 = 0.0;\n        this.initialEqFilterInput2 = 0.0;\n        this.distortionFractionalInput1 = 0.0;\n        this.distortionFractionalInput2 = 0.0;\n        this.distortionFractionalInput3 = 0.0;\n        this.distortionPrevInput = 0.0;\n        this.distortionNextOutput = 0.0;\n        this.panningDelayPos = 0;\n        if (this.panningDelayLine != null) for (let i: number = 0; i < this.panningDelayLine.length; i++) this.panningDelayLine[i] = 0.0;\n        this.echoDelayOffsetEnd = null;\n        this.echoShelfSampleL = 0.0;\n        this.echoShelfSampleR = 0.0;\n        this.echoShelfPrevInputL = 0.0;\n        this.echoShelfPrevInputR = 0.0;\n        this.reverbShelfSample0 = 0.0;\n        this.reverbShelfSample1 = 0.0;\n        this.reverbShelfSample2 = 0.0;\n        this.reverbShelfSample3 = 0.0;\n        this.reverbShelfPrevInput0 = 0.0;\n        this.reverbShelfPrevInput1 = 0.0;\n        this.reverbShelfPrevInput2 = 0.0;\n        this.reverbShelfPrevInput3 = 0.0;\n\n        this.volumeScale = 1.0;\n        this.aliases = false;\n\n        this.awake = false;\n        this.flushingDelayLines = false;\n        this.deactivateAfterThisTick = false;\n        this.attentuationProgress = 0.0;\n        this.flushedSamples = 0;\n    }\n\n    public resetAllEffects(): void {\n        this.deactivate();\n        // LFOs are reset here rather than in deactivate() for periodic oscillation that stays \"on the beat\". Resetting in deactivate() will cause it to reset with each note.\n        this.vibratoTime = 0;\n        this.nextVibratoTime = 0;\n        this.arpTime = 0;\n        this.envelopeTime = 0;\n\n        if (this.chorusDelayLineDirty) {\n            for (let i: number = 0; i < this.chorusDelayLineL!.length; i++) this.chorusDelayLineL![i] = 0.0;\n            for (let i: number = 0; i < this.chorusDelayLineR!.length; i++) this.chorusDelayLineR![i] = 0.0;\n        }\n        if (this.echoDelayLineDirty) {\n            for (let i: number = 0; i < this.echoDelayLineL!.length; i++) this.echoDelayLineL![i] = 0.0;\n            for (let i: number = 0; i < this.echoDelayLineR!.length; i++) this.echoDelayLineR![i] = 0.0;\n        }\n        if (this.reverbDelayLineDirty) {\n            for (let i: number = 0; i < this.reverbDelayLine!.length; i++) this.reverbDelayLine![i] = 0.0;\n        }\n\n        this.chorusPhase = 0.0;\n    }\n\n    public compute(synth: Synth, instrument: Instrument, samplesPerTick: number, roundedSamplesPerTick: number, tone: Tone | null, channelIndex: number, instrumentIndex: number): void {\n        this.computed = true;\n\n        this.type = instrument.type;\n        this.synthesizer = Synth.getInstrumentSynthFunction(instrument);\n        this.unison = Config.unisons[instrument.unison];\n        this.chord = instrument.getChord();\n        this.noisePitchFilterMult = Config.chipNoises[instrument.chipNoise].pitchFilterMult;\n        this.effects = instrument.effects;\t\n\n        this.aliases = instrument.aliases;\n        this.volumeScale = 1.0;\n\n        this.allocateNecessaryBuffers(synth, instrument, samplesPerTick);\n\n        const samplesPerSecond: number = synth.samplesPerSecond;\n        this.updateWaves(instrument, samplesPerSecond);\n\n        //const ticksIntoBar: number = synth.getTicksIntoBar();\n        //const tickTimeStart: number = ticksIntoBar;\n        //const tickTimeEnd:   number = ticksIntoBar + 1.0;\n        //const secondsPerTick: number = samplesPerTick / synth.samplesPerSecond;\n        //const currentPart: number = synth.getCurrentPart();\n        //this.envelopeComputer.computeEnvelopes(instrument, currentPart, tickTimeStart, secondsPerTick, tone);\n        //const envelopeStarts: number[] = this.envelopeComputer.envelopeStarts;\n        //const envelopeEnds: number[] = this.envelopeComputer.envelopeEnds;\n\n        const usesDistortion: boolean = effectsIncludeDistortion(this.effects);\n        const usesBitcrusher: boolean = effectsIncludeBitcrusher(this.effects);\n        const usesPanning: boolean = effectsIncludePanning(this.effects);\n        const usesChorus: boolean = effectsIncludeChorus(this.effects);\n        const usesEcho: boolean = effectsIncludeEcho(this.effects);\n        const usesReverb: boolean = effectsIncludeReverb(this.effects);\n\n        if (usesDistortion) {\n            let useDistortionStart: number = instrument.distortion;\n            let useDistortionEnd: number = instrument.distortion;\n\n            // Check for distortion mods\n            if (synth.isModActive(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex)) {\n                useDistortionStart = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, false);\n                useDistortionEnd = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, true);\n            }\n\n            const distortionSliderStart = Math.min(1.0, /*envelopeStarts[InstrumentAutomationIndex.distortion] **/ useDistortionStart / (Config.distortionRange - 1));\n            const distortionSliderEnd = Math.min(1.0, /*envelopeEnds[  InstrumentAutomationIndex.distortion] **/ useDistortionEnd / (Config.distortionRange - 1));\n            const distortionStart: number = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderStart) - 1.0) / 19.0, 2.0);\n            const distortionEnd: number = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderEnd) - 1.0) / 19.0, 2.0);\n            const distortionDriveStart: number = (1.0 + 2.0 * distortionSliderStart) / Config.distortionBaseVolume;\n            const distortionDriveEnd: number = (1.0 + 2.0 * distortionSliderEnd) / Config.distortionBaseVolume;\n            this.distortion = distortionStart;\n            this.distortionDelta = (distortionEnd - distortionStart) / roundedSamplesPerTick;\n            this.distortionDrive = distortionDriveStart;\n            this.distortionDriveDelta = (distortionDriveEnd - distortionDriveStart) / roundedSamplesPerTick;\n        }\n\n        if (usesBitcrusher) {\n            let freqSettingStart: number = instrument.bitcrusherFreq /** Math.sqrt(envelopeStarts[InstrumentAutomationIndex.bitcrusherFrequency])*/;\n            let freqSettingEnd: number = instrument.bitcrusherFreq /** Math.sqrt(envelopeEnds[  InstrumentAutomationIndex.bitcrusherFrequency])*/;\n\n            // Check for freq crush mods\n            if (synth.isModActive(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex)) {\n                freqSettingStart = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, false);\n                freqSettingEnd = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, true);\n            }\n\n            let quantizationSettingStart: number = instrument.bitcrusherQuantization /** Math.sqrt(envelopeStarts[InstrumentAutomationIndex.bitcrusherQuantization])*/;\n            let quantizationSettingEnd: number = instrument.bitcrusherQuantization /** Math.sqrt(envelopeEnds[  InstrumentAutomationIndex.bitcrusherQuantization])*/;\n\n            // Check for bitcrush mods\n            if (synth.isModActive(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex)) {\n                quantizationSettingStart = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, false);\n                quantizationSettingEnd = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, true);\n            }\n\n            const basePitch: number = Config.keys[synth.song!.key].basePitch + (Config.pitchesPerOctave * synth.song!.octave); // TODO: What if there's a key change mid-song?\n            const freqStart: number = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingStart) * Config.bitcrusherOctaveStep);\n            const freqEnd: number = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingEnd) * Config.bitcrusherOctaveStep);\n            const phaseDeltaStart: number = Math.min(1.0, freqStart / samplesPerSecond);\n            const phaseDeltaEnd: number = Math.min(1.0, freqEnd / samplesPerSecond);\n            this.bitcrusherPhaseDelta = phaseDeltaStart;\n            this.bitcrusherPhaseDeltaScale = Math.pow(phaseDeltaEnd / phaseDeltaStart, 1.0 / roundedSamplesPerTick);\n\n            const scaleStart: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart) * 0.5));\n            const scaleEnd: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd) * 0.5));\n            this.bitcrusherScale = scaleStart;\n            this.bitcrusherScaleScale = Math.pow(scaleEnd / scaleStart, 1.0 / roundedSamplesPerTick);\n\n            const foldLevelStart: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart);\n            const foldLevelEnd: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd);\n            this.bitcrusherFoldLevel = foldLevelStart;\n            this.bitcrusherFoldLevelScale = Math.pow(foldLevelEnd / foldLevelStart, 1.0 / roundedSamplesPerTick);\n        }\n\n        let eqFilterVolume: number = 1.0; //this.envelopeComputer.lowpassCutoffDecayVolumeCompensation;\n        if (instrument.eqFilterType) {\n            // Simple EQ filter (old style). For analysis, using random filters from normal style since they are N/A in this context.\n            const eqFilterSettingsStart: FilterSettings = instrument.eqFilter;\n            if (instrument.eqSubFilters[1] == null)\n                instrument.eqSubFilters[1] = new FilterSettings();\n            const eqFilterSettingsEnd: FilterSettings = instrument.eqSubFilters[1];\n\n            // Change location based on slider values\n            let startSimpleFreq: number = instrument.eqFilterSimpleCut;\n            let startSimpleGain: number = instrument.eqFilterSimplePeak;\n            let endSimpleFreq: number = instrument.eqFilterSimpleCut;\n            let endSimpleGain: number = instrument.eqFilterSimplePeak;\n\n            let filterChanges: boolean = false;\n\n            if (synth.isModActive(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex)) {\n                startSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, false);\n                endSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, true);\n                filterChanges = true;\n            }\n            if (synth.isModActive(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex)) {\n                startSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, false);\n                endSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, true);\n                filterChanges = true;\n            }\n\n            let startPoint: FilterControlPoint;\n\n            if (filterChanges) {\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain);\n                eqFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain);\n\n                startPoint = eqFilterSettingsStart.controlPoints[0];\n                let endPoint: FilterControlPoint = eqFilterSettingsEnd.controlPoints[0];\n\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n\n                if (this.eqFilters.length < 1) this.eqFilters[0] = new DynamicBiquadFilter();\n                this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\n            } else {\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, true);\n\n                startPoint = eqFilterSettingsStart.controlPoints[0];\n\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n\n                if (this.eqFilters.length < 1) this.eqFilters[0] = new DynamicBiquadFilter();\n                this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\n            }\n\n            eqFilterVolume *= startPoint.getVolumeCompensationMult();\n\n            this.eqFilterCount = 1;\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n        }\n        else {\n            const eqFilterSettings: FilterSettings = (instrument.tmpEqFilterStart != null) ? instrument.tmpEqFilterStart : instrument.eqFilter;\n            //const eqAllFreqsEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterAllFreqs];\n            //const eqAllFreqsEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterAllFreqs];\n            for (let i: number = 0; i < eqFilterSettings.controlPointCount; i++) {\n                //const eqFreqEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterFreq0 + i];\n                //const eqFreqEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterFreq0 + i];\n                //const eqPeakEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterGain0 + i];\n                //const eqPeakEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterGain0 + i];\n                let startPoint: FilterControlPoint = eqFilterSettings.controlPoints[i];\n                let endPoint: FilterControlPoint = (instrument.tmpEqFilterEnd != null && instrument.tmpEqFilterEnd.controlPoints[i] != null) ? instrument.tmpEqFilterEnd.controlPoints[i] : eqFilterSettings.controlPoints[i];\n\n                // If switching dot type, do it all at once and do not try to interpolate since no valid interpolation exists.\n                if (startPoint.type != endPoint.type) {\n                    startPoint = endPoint;\n                }\n\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeStart * eqFreqEnvelopeStart*/ 1.0, /*eqPeakEnvelopeStart*/ 1.0);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeEnd   * eqFreqEnvelopeEnd*/   1.0, /*eqPeakEnvelopeEnd*/   1.0);\n                if (this.eqFilters.length <= i) this.eqFilters[i] = new DynamicBiquadFilter();\n                this.eqFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                eqFilterVolume *= startPoint.getVolumeCompensationMult();\n\n            }\n            this.eqFilterCount = eqFilterSettings.controlPointCount;\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n        }\n\n        const mainInstrumentVolume: number = Synth.instrumentVolumeToVolumeMult(instrument.volume);\n        this.mixVolume = mainInstrumentVolume /** envelopeStarts[InstrumentAutomationIndex.mixVolume]*/;\n        let mixVolumeEnd: number = mainInstrumentVolume /** envelopeEnds[  InstrumentAutomationIndex.mixVolume]*/;\n\n        // Check for mod-related volume delta\n        if (synth.isModActive(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex)) {\n            // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\n            const startVal: number = synth.getModValue(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex, false);\n            const endVal: number = synth.getModValue(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex, true)\n            this.mixVolume *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n            mixVolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n        }\n\n        // Check for SONG mod-related volume delta\n        if (synth.isModActive(Config.modulators.dictionary[\"song volume\"].index)) {\n            this.mixVolume *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, false)) / 100.0;\n            mixVolumeEnd *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, true)) / 100.0;\n        }\n\n        this.mixVolumeDelta = (mixVolumeEnd - this.mixVolume) / roundedSamplesPerTick;\n\n        let eqFilterVolumeStart: number = eqFilterVolume;\n        let eqFilterVolumeEnd: number = eqFilterVolume;\n        let delayInputMultStart: number = 1.0;\n        let delayInputMultEnd: number = 1.0;\n\n        if (usesPanning) {\n            //const panEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.panning] * 2.0 - 1.0;\n            //const panEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.panning] * 2.0 - 1.0;\n\n            let usePanStart: number = instrument.pan;\n            let usePanEnd: number = instrument.pan;\n            // Check for pan mods\n            if (synth.isModActive(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex)) {\n                usePanStart = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, false);\n                usePanEnd = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, true);\n            }\n\n            let panStart: number = Math.max(-1.0, Math.min(1.0, (usePanStart - Config.panCenter) / Config.panCenter /** panEnvelopeStart*/));\n            let panEnd: number = Math.max(-1.0, Math.min(1.0, (usePanEnd - Config.panCenter) / Config.panCenter /** panEnvelopeEnd  */));\n\n            const volumeStartL: number = Math.cos((1 + panStart) * Math.PI * 0.25) * 1.414;\n            const volumeStartR: number = Math.cos((1 - panStart) * Math.PI * 0.25) * 1.414;\n            const volumeEndL: number = Math.cos((1 + panEnd) * Math.PI * 0.25) * 1.414;\n            const volumeEndR: number = Math.cos((1 - panEnd) * Math.PI * 0.25) * 1.414;\n            const maxDelaySamples: number = samplesPerSecond * Config.panDelaySecondsMax;\n\n            let usePanDelayStart: number = instrument.panDelay;\n            let usePanDelayEnd: number = instrument.panDelay;\n            // Check for pan delay mods\n            if (synth.isModActive(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex)) {\n                usePanDelayStart = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, false);\n                usePanDelayEnd = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, true);\n            }\n\n            const delayStart: number = panStart * usePanDelayStart * maxDelaySamples / 10;\n            const delayEnd: number = panEnd * usePanDelayEnd * maxDelaySamples / 10;\n            const delayStartL: number = Math.max(0.0, delayStart);\n            const delayStartR: number = Math.max(0.0, -delayStart);\n            const delayEndL: number = Math.max(0.0, delayEnd);\n            const delayEndR: number = Math.max(0.0, -delayEnd);\n\n            this.panningVolumeL = volumeStartL;\n            this.panningVolumeR = volumeStartR;\n            this.panningVolumeDeltaL = (volumeEndL - volumeStartL) / roundedSamplesPerTick;\n            this.panningVolumeDeltaR = (volumeEndR - volumeStartR) / roundedSamplesPerTick;\n            this.panningOffsetL = this.panningDelayPos - delayStartL + synth.panningDelayBufferSize;\n            this.panningOffsetR = this.panningDelayPos - delayStartR + synth.panningDelayBufferSize;\n            this.panningOffsetDeltaL = (delayEndL - delayStartL) / roundedSamplesPerTick;\n            this.panningOffsetDeltaR = (delayEndR - delayStartR) / roundedSamplesPerTick;\n        }\n\n        if (usesChorus) {\n            //const chorusEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.chorus];\n            //const chorusEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.chorus];\n            let useChorusStart: number = instrument.chorus;\n            let useChorusEnd: number = instrument.chorus;\n            // Check for chorus mods\n            if (synth.isModActive(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex)) {\n                useChorusStart = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, false);\n                useChorusEnd = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, true);\n            }\n\n            let chorusStart: number = Math.min(1.0, /*chorusEnvelopeStart **/ useChorusStart / (Config.chorusRange - 1));\n            let chorusEnd: number = Math.min(1.0, /*chorusEnvelopeEnd   **/ useChorusEnd / (Config.chorusRange - 1));\n            chorusStart = chorusStart * 0.6 + (Math.pow(chorusStart, 6.0)) * 0.4;\n            chorusEnd = chorusEnd * 0.6 + (Math.pow(chorusEnd, 6.0)) * 0.4;\n            const chorusCombinedMultStart = 1.0 / Math.sqrt(3.0 * chorusStart * chorusStart + 1.0);\n            const chorusCombinedMultEnd = 1.0 / Math.sqrt(3.0 * chorusEnd * chorusEnd + 1.0);\n            this.chorusVoiceMult = chorusStart;\n            this.chorusVoiceMultDelta = (chorusEnd - chorusStart) / roundedSamplesPerTick;\n            this.chorusCombinedMult = chorusCombinedMultStart;\n            this.chorusCombinedMultDelta = (chorusCombinedMultEnd - chorusCombinedMultStart) / roundedSamplesPerTick;\n        }\n\n        let maxEchoMult = 0.0;\n        let averageEchoDelaySeconds: number = 0.0;\n        if (usesEcho) {\n            //const echoSustainEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.echoSustain];\n            //const echoSustainEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.echoSustain];\n            let useEchoSustainStart: number = instrument.echoSustain;\n            let useEchoSustainEnd: number = instrument.echoSustain;\n            // Check for echo mods\n            if (synth.isModActive(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex)) {\n                useEchoSustainStart = Math.max( 0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, false) );\n                useEchoSustainEnd = Math.max( 0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, true) );\n            }\n            const echoMultStart: number = Math.min(1.0, Math.pow(/*echoSustainEnvelopeStart **/ useEchoSustainStart / Config.echoSustainRange, 1.1)) * 0.9;\n            const echoMultEnd: number = Math.min(1.0, Math.pow(/*echoSustainEnvelopeEnd   **/ useEchoSustainEnd / Config.echoSustainRange, 1.1)) * 0.9;\n            this.echoMult = echoMultStart;\n            this.echoMultDelta = Math.max(0.0, (echoMultEnd - echoMultStart) / roundedSamplesPerTick);\n            maxEchoMult = Math.max(echoMultStart, echoMultEnd);\n\n            // TODO: After computing a tick's settings once for multiple run lengths (which is\n            // good for audio worklet threads), compute the echo delay envelopes at tick (or\n            // part) boundaries to interpolate between two delay taps.\n            //const echoDelayEnvelopeStart:   number = envelopeStarts[InstrumentAutomationIndex.echoDelay];\n            //const echoDelayEnvelopeEnd:     number = envelopeEnds[  InstrumentAutomationIndex.echoDelay];\n            let useEchoDelayStart: number = instrument.echoDelay;\n            let useEchoDelayEnd: number = instrument.echoDelay;\n            let ignoreTicks: boolean = false;\n            // Check for pan delay mods\n            if (synth.isModActive(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex)) {\n                useEchoDelayStart = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, false);\n                useEchoDelayEnd = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, true);\n                ignoreTicks = true;\n            }\n\n            const tmpEchoDelayOffsetStart: number = Math.round((useEchoDelayStart + 1) * Config.echoDelayStepTicks * samplesPerTick);\n            const tmpEchoDelayOffsetEnd: number = Math.round((useEchoDelayEnd + 1) * Config.echoDelayStepTicks * samplesPerTick);\n            if (this.echoDelayOffsetEnd != null && !ignoreTicks) {\n                this.echoDelayOffsetStart = this.echoDelayOffsetEnd;\n            } else {\n                this.echoDelayOffsetStart = tmpEchoDelayOffsetStart;\n            }\n\n            this.echoDelayOffsetEnd = tmpEchoDelayOffsetEnd;\n            averageEchoDelaySeconds = (this.echoDelayOffsetStart + this.echoDelayOffsetEnd) * 0.5 / samplesPerSecond;\n\n            this.echoDelayOffsetRatio = 0.0;\n            this.echoDelayOffsetRatioDelta = 1.0 / roundedSamplesPerTick;\n\n            const shelfRadians: number = 2.0 * Math.PI * Config.echoShelfHz / synth.samplesPerSecond;\n            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.echoShelfGain);\n            this.echoShelfA1 = Synth.tempFilterStartCoefficients.a[1];\n            this.echoShelfB0 = Synth.tempFilterStartCoefficients.b[0];\n            this.echoShelfB1 = Synth.tempFilterStartCoefficients.b[1];\n        }\n\n        let maxReverbMult = 0.0;\n        if (usesReverb) {\n            //const reverbEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.reverb];\n            //const reverbEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.reverb];\n\n            let useReverbStart: number = instrument.reverb;\n            let useReverbEnd: number = instrument.reverb;\n\n            // Check for mod reverb, instrument level\n            if (synth.isModActive(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex)) {\n                useReverbStart = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, false);\n                useReverbEnd = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, true);\n            }\n            // Check for mod reverb, song scalar\n            if (synth.isModActive(Config.modulators.dictionary[\"song reverb\"].index, channelIndex, instrumentIndex)) {\n                useReverbStart *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, false) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\n                useReverbEnd *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, true) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\n            }\n\n            const reverbStart: number = Math.min(1.0, Math.pow(/*reverbEnvelopeStart **/ useReverbStart / Config.reverbRange, 0.667)) * 0.425;\n            const reverbEnd: number = Math.min(1.0, Math.pow(/*reverbEnvelopeEnd   **/ useReverbEnd / Config.reverbRange, 0.667)) * 0.425;\n\n            this.reverbMult = reverbStart;\n            this.reverbMultDelta = (reverbEnd - reverbStart) / roundedSamplesPerTick;\n            maxReverbMult = Math.max(reverbStart, reverbEnd);\n\n            const shelfRadians: number = 2.0 * Math.PI * Config.reverbShelfHz / synth.samplesPerSecond;\n            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.reverbShelfGain);\n            this.reverbShelfA1 = Synth.tempFilterStartCoefficients.a[1];\n            this.reverbShelfB0 = Synth.tempFilterStartCoefficients.b[0];\n            this.reverbShelfB1 = Synth.tempFilterStartCoefficients.b[1];\n        }\n\n        if (this.tonesAddedInThisTick) {\n            this.attentuationProgress = 0.0;\n            this.flushedSamples = 0;\n            this.flushingDelayLines = false;\n        } else if (!this.flushingDelayLines) {\n            // If this instrument isn't playing tones anymore, the volume can fade out by the\n            // end of the first tick. It's possible for filters and the panning delay line to\n            // continue past the end of the tone but they should have mostly dissipated by the\n            // end of the tick anyway.\n            if (this.attentuationProgress == 0.0) {\n                eqFilterVolumeEnd = 0.0;\n            } else {\n                eqFilterVolumeStart = 0.0;\n                eqFilterVolumeEnd = 0.0;\n            }\n\n            const attenuationThreshold: number = 1.0 / 256.0; // when the delay line signal has attenuated this much, it should be inaudible and should be flushed to zero.\n            const halfLifeMult: number = -Math.log2(attenuationThreshold);\n            let delayDuration: number = 0.0;\n\n            if (usesChorus) {\n                delayDuration += Config.chorusMaxDelay;\n            }\n\n            if (usesEcho) {\n                const attenuationPerSecond: number = Math.pow(maxEchoMult, 1.0 / averageEchoDelaySeconds);\n                const halfLife: number = -1.0 / Math.log2(attenuationPerSecond);\n                const echoDuration: number = halfLife * halfLifeMult;\n                delayDuration += echoDuration;\n            }\n\n            if (usesReverb) {\n                const averageMult: number = maxReverbMult * 2.0;\n                const averageReverbDelaySeconds: number = (Config.reverbDelayBufferSize / 4.0) / samplesPerSecond;\n                const attenuationPerSecond: number = Math.pow(averageMult, 1.0 / averageReverbDelaySeconds);\n                const halfLife: number = -1.0 / Math.log2(attenuationPerSecond);\n                const reverbDuration: number = halfLife * halfLifeMult;\n                delayDuration += reverbDuration;\n            }\n\n            const secondsInTick: number = samplesPerTick / samplesPerSecond;\n            const progressInTick: number = secondsInTick / delayDuration;\n            const progressAtEndOfTick: number = this.attentuationProgress + progressInTick;\n            if (progressAtEndOfTick >= 1.0) {\n                delayInputMultEnd = 0.0;\n            }\n\n            this.attentuationProgress = progressAtEndOfTick;\n            if (this.attentuationProgress >= 1.0) {\n                this.flushingDelayLines = true;\n            }\n        } else {\n            // Flushing delay lines to zero since the signal has mostly dissipated.\n            eqFilterVolumeStart = 0.0;\n            eqFilterVolumeEnd = 0.0;\n            delayInputMultStart = 0.0;\n            delayInputMultEnd = 0.0;\n\n            let totalDelaySamples: number = 0;\n            if (usesChorus) totalDelaySamples += synth.chorusDelayBufferSize;\n            if (usesEcho) totalDelaySamples += this.echoDelayLineL!.length;\n            if (usesReverb) totalDelaySamples += Config.reverbDelayBufferSize;\n\n            this.flushedSamples += roundedSamplesPerTick;\n            if (this.flushedSamples >= totalDelaySamples) {\n                this.deactivateAfterThisTick = true;\n            }\n        }\n\n        this.eqFilterVolume = eqFilterVolumeStart;\n        this.eqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / roundedSamplesPerTick;\n        this.delayInputMult = delayInputMultStart;\n        this.delayInputMultDelta = (delayInputMultEnd - delayInputMultStart) / roundedSamplesPerTick;\n    }\n\n    public updateWaves(instrument: Instrument, samplesPerSecond: number): void {\n        this.volumeScale = 1.0;\n        if (instrument.type == InstrumentType.chip) {\n            this.wave = (this.aliases) ? Config.rawChipWaves[instrument.chipWave].samples : Config.chipWaves[instrument.chipWave].samples;\n\t\t\t\t\t\t // advloop addition\n                this.isUsingAdvancedLoopControls = instrument.isUsingAdvancedLoopControls;\n                this.chipWaveLoopStart = instrument.chipWaveLoopStart;\n                this.chipWaveLoopEnd = instrument.chipWaveLoopEnd;\n                this.chipWaveLoopMode = instrument.chipWaveLoopMode;\n                this.chipWavePlayBackwards = instrument.chipWavePlayBackwards;\n                this.chipWaveStartOffset = instrument.chipWaveStartOffset;\n               // advloop addition\n\n               this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.customChipWave) {\n            this.wave = (this.aliases) ? instrument.customChipWave! : instrument.customChipWaveIntegral!;\n            this.volumeScale = 0.05;\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.noise) {\n            this.wave = getDrumWave(instrument.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\n        } else if (instrument.type == InstrumentType.harmonics) {\n            this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.pickedString) {\n            this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.spectrum) {\n            this.wave = this.spectrumWave.getCustomWave(instrument.spectrumWave, 8);\n        } else if (instrument.type == InstrumentType.drumset) {\n            for (let i: number = 0; i < Config.drumCount; i++) {\n                this.drumsetSpectrumWaves[i].getCustomWave(instrument.drumsetSpectrumWaves[i], InstrumentState._drumsetIndexToSpectrumOctave(i));\n            }\n            this.wave = null;\n        } else {\n            this.wave = null;\n        }\n    }\n\n    public getDrumsetWave(pitch: number): Float32Array {\n        if (this.type == InstrumentType.drumset) {\n            return this.drumsetSpectrumWaves[pitch].wave!;\n        } else {\n            throw new Error(\"Unhandled instrument type in getDrumsetWave\");\n        }\n    }\n\n    public static drumsetIndexReferenceDelta(index: number): number {\n        return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * 6) / 44100;\n    }\n\n    private static _drumsetIndexToSpectrumOctave(index: number): number {\n        return 15 + Math.log2(InstrumentState.drumsetIndexReferenceDelta(index));\n    }\n}\n\nclass ChannelState {\n    public readonly instruments: InstrumentState[] = [];\n    public muted: boolean = false;\n    public singleSeamlessInstrument: number | null = null; // Seamless tones from a pattern with a single instrument can be transferred to a different single seamless instrument in the next pattern.\n}\n\nexport class Synth {\n\n    private syncSongState(): void {\n        const channelCount: number = this.song!.getChannelCount();\n        for (let i: number = this.channels.length; i < channelCount; i++) {\n            this.channels[i] = new ChannelState();\n        }\n        this.channels.length = channelCount;\n        for (let i: number = 0; i < channelCount; i++) {\n            const channel: Channel = this.song!.channels[i];\n            const channelState: ChannelState = this.channels[i];\n            for (let j: number = channelState.instruments.length; j < channel.instruments.length; j++) {\n                channelState.instruments[j] = new InstrumentState();\n            }\n            channelState.instruments.length = channel.instruments.length;\n\n            if (channelState.muted != channel.muted) {\n                channelState.muted = channel.muted;\n                if (channelState.muted) {\n                    for (const instrumentState of channelState.instruments) {\n                        instrumentState.resetAllEffects();\n                    }\n                }\n            }\n        }\n    }\n\n    public initModFilters(song: Song | null): void {\n        if (song != null) {\n            for (let channelIndex: number = 0; channelIndex < song.getChannelCount(); channelIndex++) {\n                for (let instrumentIndex: number = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrument: Instrument = song.channels[channelIndex].instruments[instrumentIndex];\n                    instrument.tmpEqFilterStart = instrument.eqFilter;\n                    instrument.tmpEqFilterEnd = null;\n                    instrument.tmpNoteFilterStart = instrument.noteFilter;\n                    instrument.tmpNoteFilterEnd = null;\n                }\n            }\n        }\n    }\n    public warmUpSynthesizer(song: Song | null): void {\n        // Don't bother to generate the drum waves unless the song actually\n        // uses them, since they may require a lot of computation.\n        if (song != null) {\n            this.syncSongState();\n            const samplesPerTick: number = this.getSamplesPerTick();\n            for (let channelIndex: number = 0; channelIndex < song.getChannelCount(); channelIndex++) {\n                for (let instrumentIndex: number = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrument: Instrument = song.channels[channelIndex].instruments[instrumentIndex];\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[instrumentIndex];\n                    Synth.getInstrumentSynthFunction(instrument);\n                    instrumentState.vibratoTime = 0;\n                    instrumentState.nextVibratoTime = 0;\n                    instrumentState.envelopeTime = 0;\n                    instrumentState.arpTime = 0;\n                    instrumentState.updateWaves(instrument, this.samplesPerSecond);\n                    instrumentState.allocateNecessaryBuffers(this, instrument, samplesPerTick);\n                }\n\n            }\n        }\n        // JummBox needs to run synth functions for at least one sample (for JIT purposes)\n\t\t// before starting audio callbacks to avoid skipping the initial output.\n        var dummyArray = new Float32Array(1);\n        this.isPlayingSong = true;\n        this.synthesize(dummyArray, dummyArray, 1, true);\n        this.isPlayingSong = false;\n\t\t//BUGFIX FROM JUMMBOX\n    }\n\n    public computeLatestModValues(): void {\n\n        if (this.song != null && this.song.modChannelCount > 0) {\n\n            // Clear all mod values, and set up temp variables for the time a mod would be set at.\n            let latestModTimes: (number | null)[] = [];\n            let latestModInsTimes: (number | null)[][][] = [];\n            this.modValues = [];\n            this.nextModValues = [];\n            this.modInsValues = [];\n            this.nextModInsValues = [];\n            this.heldMods = [];\n            for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                latestModInsTimes[channel] = [];\n                this.modInsValues[channel] = [];\n                this.nextModInsValues[channel] = [];\n\n                for (let instrument: number = 0; instrument < this.song.channels[channel].instruments.length; instrument++) {\n                    this.modInsValues[channel][instrument] = [];\n                    this.nextModInsValues[channel][instrument] = [];\n                    latestModInsTimes[channel][instrument] = [];\n                }\n            }\n\n            // Find out where we're at in the fraction of the current bar.\n            let currentPart: number = this.beat * Config.partsPerBeat + this.part;\n\n            // For mod channels, calculate last set value for each mod\n            for (let channelIndex: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex < this.song.getChannelCount(); channelIndex++) {\n                if (!(this.song.channels[channelIndex].muted)) {\n\n                    let pattern: Pattern | null;\n\n                    for (let currentBar: number = this.bar; currentBar >= 0; currentBar--) {\n                        pattern = this.song.getPattern(channelIndex, currentBar);\n\n                        if (pattern != null) {\n                            let instrumentIdx: number = pattern.instruments[0];\n                            let instrument: Instrument = this.song.channels[channelIndex].instruments[instrumentIdx];\n                            let latestPinParts: number[] = [];\n                            let latestPinValues: number[] = [];\n\n                            let partsInBar: number = (currentBar == this.bar)\n                                ? currentPart\n                                : this.findPartsInBar(currentBar);\n\n                            for (const note of pattern.notes) {\n                                if (note.start <= partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {\n                                    if (note.start == partsInBar) { // This can happen with next bar mods, and the value of the aligned note's start pin will be used.\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.start;\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[0].size;\n                                    }\n                                    if (note.end <= partsInBar) {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].size;\n                                    }\n                                    else {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\n                                                const deltaVolume: number = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\n\n                                                latestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\n                                                pinIdx = note.pins.length;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n\n                            // Set modulator value, if it wasn't set in another pattern already scanned\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                                if (latestPinParts[mod] != null) {\n                                    if (Config.modulators[instrument.modulators[mod]].forSong) {\n                                        if (latestModTimes[instrument.modulators[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModTimes[instrument.modulators[mod]] as number)) {\n                                            this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod], instrument.modInstruments[mod], instrument.modulators[mod]);\n                                            latestModTimes[instrument.modulators[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\n                                        }\n                                    }\n                                    else {\n                                        // Generate list of used instruments\n                                        let usedInstruments: number[] = [];\n                                        // All\n                                        if (instrument.modInstruments[mod] == this.song.channels[instrument.modChannels[mod]].instruments.length) {\n                                            for (let i: number = 0; i < this.song.channels[instrument.modChannels[mod]].instruments.length; i++) {\n                                                usedInstruments.push(i);\n                                            }\n                                        }\n                                        // Active\n                                        else if (instrument.modInstruments[mod] > this.song.channels[instrument.modChannels[mod]].instruments.length) {\n                                            const tgtPattern: Pattern | null = this.song.getPattern(instrument.modChannels[mod], currentBar);\n                                            if (tgtPattern != null)\n                                                usedInstruments = tgtPattern.instruments;\n                                        } else {\n                                            usedInstruments.push(instrument.modInstruments[mod]);\n                                        }\n                                        for (let instrumentIndex: number = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\n                                            // Iterate through all used instruments by this modulator\n                                            // Special indices for mod filter targets, since they control multiple things.\n                                            const eqFilterParam: boolean = instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index;\n                                            const noteFilterParam: boolean = instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index\n                                            let modulatorAdjust: number = instrument.modulators[mod];\n                                            if (eqFilterParam) {\n                                                modulatorAdjust = Config.modulators.length + (instrument.modFilterTypes[mod] | 0);\n                                            } else if (noteFilterParam) {\n                                                // Skip all possible indices for eq filter\n                                                modulatorAdjust = Config.modulators.length + 1 + (2 * Config.filterMaxPoints) + (instrument.modFilterTypes[mod] | 0);\n                                            }\n\n                                            if (latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] == null\n                                                || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust]!) {\n\n                                                if (eqFilterParam) {\n                                                    let tgtInstrument: Instrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                                                    if (instrument.modFilterTypes[mod] == 0) {\n                                                        tgtInstrument.tmpEqFilterStart = tgtInstrument.eqSubFilters[latestPinValues[mod]];\n                                                    } else {\n                                                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                                                            if (tgtInstrument.tmpEqFilterStart != null && tgtInstrument.tmpEqFilterStart == tgtInstrument.eqSubFilters[i]) {\n                                                                tgtInstrument.tmpEqFilterStart = new FilterSettings();\n                                                                tgtInstrument.tmpEqFilterStart.fromJsonObject(tgtInstrument.eqSubFilters[i]!.toJsonObject());\n                                                                i = Config.filterMorphCount;\n                                                            }\n                                                        }\n                                                        if (tgtInstrument.tmpEqFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpEqFilterStart.controlPointCount) {\n                                                            if (instrument.modFilterTypes[mod] % 2)\n                                                                tgtInstrument.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                            else\n                                                                tgtInstrument.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                        }\n                                                    }\n                                                    tgtInstrument.tmpEqFilterEnd = tgtInstrument.tmpEqFilterStart;\n                                                } else if (noteFilterParam) {\n                                                    let tgtInstrument: Instrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                                                    if (instrument.modFilterTypes[mod] == 0) {\n                                                        tgtInstrument.tmpNoteFilterStart = tgtInstrument.noteSubFilters[latestPinValues[mod]];\n                                                    } else {\n                                                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                                                            if (tgtInstrument.tmpNoteFilterStart != null && tgtInstrument.tmpNoteFilterStart == tgtInstrument.noteSubFilters[i]) {\n                                                                tgtInstrument.tmpNoteFilterStart = new FilterSettings();\n                                                                tgtInstrument.tmpNoteFilterStart.fromJsonObject(tgtInstrument.noteSubFilters[i]!.toJsonObject());\n                                                                i = Config.filterMorphCount;\n                                                            }\n                                                        }\n                                                        if (tgtInstrument.tmpNoteFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpNoteFilterStart.controlPointCount) {\n                                                            if (instrument.modFilterTypes[mod] % 2)\n                                                                tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                            else\n                                                                tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                        }\n                                                    }\n                                                    tgtInstrument.tmpNoteFilterEnd = tgtInstrument.tmpNoteFilterStart;\n                                                }\n                                                else this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod], usedInstruments[instrumentIndex], modulatorAdjust);\n\n                                                latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Detects if a modulator is set, but not valid for the current effects/instrument type/filter type\n    // Note, setting 'none' or the intermediary steps when clicking to add a mod, like an unset channel/unset instrument, counts as valid.\n    // TODO: This kind of check is mirrored in SongEditor.ts' whenUpdated. Creates a lot of redundancy for adding new mods. Can be moved into new properties for mods, to avoid this later.\n    public determineInvalidModulators(instrument: Instrument): void {\n        if (this.song == null)\n            return;\n        for (let mod: number = 0; mod < Config.modCount; mod++) {\n            instrument.invalidModulators[mod] = true;\n            // For song modulator, valid if any setting used\n            if (instrument.modChannels[mod] == -1) {\n                if (instrument.modulators[mod] != 0)\n                    instrument.invalidModulators[mod] = false;\n                continue;\n            }\n            const channel: Channel | null = this.song.channels[instrument.modChannels[mod]];\n            if (channel == null) continue;\n            let tgtInstrumentList: Instrument[] = [];\n            if (instrument.modInstruments[mod] >= channel.instruments.length) { // All or active\n                tgtInstrumentList = channel.instruments;\n            } else {\n                tgtInstrumentList = [channel.instruments[instrument.modInstruments[mod]]];\n            }\n            for (let i: number = 0; i < tgtInstrumentList.length; i++) {\n                const tgtInstrument: Instrument | null = tgtInstrumentList[i];\n                if (tgtInstrument == null) continue;\n                const str: string = Config.modulators[instrument.modulators[mod]].name;\n                // Check effects\n                if (!((Config.modulators[instrument.modulators[mod]].associatedEffect != EffectType.length && !(tgtInstrument.effects & (1 << Config.modulators[instrument.modulators[mod]].associatedEffect)))\n                    // Instrument type specific\n                    || ((tgtInstrument.type != InstrumentType.fm && tgtInstrument.type != InstrumentType.fm6op) && (str == \"fm slider 1\" || str == \"fm slider 2\" || str == \"fm slider 3\" || str == \"fm slider 4\" || str == \"fm feedback\"))\n                    || tgtInstrument.type != InstrumentType.fm6op && (str == \"fm slider 5\" || str == \"fm slider 6\")\n                    || ((tgtInstrument.type != InstrumentType.pwm && tgtInstrument.type != InstrumentType.supersaw) && (str == \"pulse width\" || str == \"decimal offset\"))\n                    || ((tgtInstrument.type != InstrumentType.supersaw) && (str == \"dynamism\" || str == \"spread\" || str == \"saw shape\"))\n                    // Arp check\n                    || (!tgtInstrument.getChord().arpeggiates && (str == \"arp speed\" || str == \"reset arp\"))\n                    // EQ Filter check\n                    || (tgtInstrument.eqFilterType && str == \"eq filter\")\n                    || (!tgtInstrument.eqFilterType && (str == \"eq filt cut\" || str == \"eq filt peak\"))\n                    || (str == \"eq filter\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(false))\n                    // Note Filter check\n                    || (tgtInstrument.noteFilterType && str == \"note filter\")\n                    || (!tgtInstrument.noteFilterType && (str == \"note filt cut\" || str == \"note filt peak\"))\n                    || (str == \"note filter\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(true)))) {\n\n                    instrument.invalidModulators[mod] = false;\n                    i = tgtInstrumentList.length;\n                }\n            }\n\n        }\n    }\n\n    private static operatorAmplitudeCurve(amplitude: number): number {\n        return (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\n    }\n\n    public samplesPerSecond: number = 44100;\n    public panningDelayBufferSize: number;\n    public panningDelayBufferMask: number;\n    public chorusDelayBufferSize: number;\n    public chorusDelayBufferMask: number;\n    // TODO: reverb\n\n    public song: Song | null = null;\n    public preferLowerLatency: boolean = false; // enable when recording performances from keyboard or MIDI. Takes effect next time you activate audio.\n    public anticipatePoorPerformance: boolean = false; // enable on mobile devices to reduce audio stutter glitches. Takes effect next time you activate audio.\n    public liveInputDuration: number = 0;\n    public liveBassInputDuration: number = 0;\n    public liveInputStarted: boolean = false;\n    public liveBassInputStarted: boolean = false;\n    public liveInputPitches: number[] = [];\n    public liveBassInputPitches: number[] = [];\n    public liveInputChannel: number = 0;\n    public liveBassInputChannel: number = 0;\n    public liveInputInstruments: number[] = [];\n    public liveBassInputInstruments: number[] = [];\n    public loopRepeatCount: number = -1;\n    public volume: number = 1.0;\n    public oscRefreshEventTimer: number = 0;\n    public oscEnabled: boolean = true;\n    public enableMetronome: boolean = false;\n    public countInMetronome: boolean = false;\n    public renderingSong: boolean = false;\n    public heldMods: HeldMod[] = [];\n    private wantToSkip: boolean = false;\n    private playheadInternal: number = 0.0;\n    private bar: number = 0;\n    private prevBar: number | null = null;\n    private nextBar: number | null = null;\n    private beat: number = 0;\n    private part: number = 0;\n    private tick: number = 0;\n    public isAtStartOfTick: boolean = true;\n    public isAtEndOfTick: boolean = true;\n    public tickSampleCountdown: number = 0;\n    private modValues: (number | null)[] = [];\n    private modInsValues: (number | null)[][][] = [];\n    private nextModValues: (number | null)[] = [];\n    private nextModInsValues: (number | null)[][][] = [];\n    private isPlayingSong: boolean = false;\n    private isRecording: boolean = false;\n    private liveInputEndTime: number = 0.0;\n    private browserAutomaticallyClearsAudioBuffer: boolean = true; // Assume true until proven otherwise. Older Chrome does not clear the buffer so it needs to be cleared manually.\n\n    public static readonly tempFilterStartCoefficients: FilterCoefficients = new FilterCoefficients();\n    public static readonly tempFilterEndCoefficients: FilterCoefficients = new FilterCoefficients();\n    private tempDrumSetControlPoint: FilterControlPoint = new FilterControlPoint();\n    public tempFrequencyResponse: FrequencyResponse = new FrequencyResponse();\n    public loopBar: number = -1;\n\n    private static readonly fmSynthFunctionCache: Dictionary<Function> = {};\n    private static readonly fm6SynthFunctionCache: Dictionary<Function> = {};\n    private static readonly effectsFunctionCache: Function[] = Array(1 << 7).fill(undefined); // keep in sync with the number of post-process effects.\n    private static readonly pickedStringFunctionCache: Function[] = Array(3).fill(undefined); // keep in sync with the number of unison voices.\n\n    private readonly channels: ChannelState[] = [];\n    private readonly tonePool: Deque<Tone> = new Deque<Tone>();\n    private readonly tempMatchedPitchTones: Array<Tone | null> = Array(Config.maxChordSize).fill(null);\n\n    private startedMetronome: boolean = false;\n    private metronomeSamplesRemaining: number = -1;\n    private metronomeAmplitude: number = 0.0;\n    private metronomePrevAmplitude: number = 0.0;\n    private metronomeFilter: number = 0.0;\n    private limit: number = 0.0;\n\n    private tempMonoInstrumentSampleBuffer: Float32Array | null = null;\n\n    private audioCtx: any | null = null;\n    private scriptNode: any | null = null;\n\n    public get playing(): boolean {\n        return this.isPlayingSong;\n    }\n\n    public get recording(): boolean {\n        return this.isRecording;\n    }\n\n    public get playhead(): number {\n        return this.playheadInternal;\n    }\n\n    public set playhead(value: number) {\n        if (this.song != null) {\n            this.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\n            let remainder: number = this.playheadInternal;\n            this.bar = Math.floor(remainder);\n            remainder = this.song.beatsPerBar * (remainder - this.bar);\n            this.beat = Math.floor(remainder);\n            remainder = Config.partsPerBeat * (remainder - this.beat);\n            this.part = Math.floor(remainder);\n            remainder = Config.ticksPerPart * (remainder - this.part);\n            this.tick = Math.floor(remainder);\n            this.tickSampleCountdown = 0;\n            this.isAtStartOfTick = true;\n            this.prevBar = null;\n        }\n    }\n\n    public getSamplesPerBar(): number {\n        if (this.song == null) throw new Error();\n        return this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\n    }\n\n    public getTicksIntoBar(): number {\n        return (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\n    }\n    public getCurrentPart(): number {\n        return (this.beat * Config.partsPerBeat + this.part);\n    }\n\n    private findPartsInBar(bar: number): number {\n        if (this.song == null) return 0;\n        let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\n        for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\n            let pattern: Pattern | null = this.song.getPattern(channel, bar);\n            if (pattern != null) {\n                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\n                        for (const note of pattern.notes) {\n                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\n                                // Find the earliest next bar note.\n                                if (partsInBar > note.start)\n                                    partsInBar = note.start;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return partsInBar;\n    }\n\n    // Returns the total samples in the song\n    public getTotalSamples(enableIntro: boolean, enableOutro: boolean, loop: number): number {\n        if (this.song == null)\n            return -1;\n\n        // Compute the window to be checked (start bar to end bar)\n        let startBar: number = enableIntro ? 0 : this.song.loopStart;\n        let endBar: number = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);\n        let hasTempoMods: boolean = false;\n        let hasNextBarMods: boolean = false;\n        let prevTempo: number = this.song.tempo;\n\n        // Determine if any tempo or next bar mods happen anywhere in the window\n        for (let channel: number = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n            for (let bar: number = startBar; bar < endBar; bar++) {\n                let pattern: Pattern | null = this.song.getPattern(channel, bar);\n                if (pattern != null) {\n                    let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index) {\n                            hasTempoMods = true;\n                        }\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\n                            hasNextBarMods = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        // If intro is not zero length, determine what the \"entry\" tempo is going into the start part, by looking at mods that came before...\n        if (startBar > 0) {\n            let latestTempoPin: number | null = null;\n            let latestTempoValue: number = 0;\n\n            for (let bar: number = startBar - 1; bar >= 0; bar--) {\n                for (let channel: number = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n                    let pattern = this.song.getPattern(channel, bar);\n\n                    if (pattern != null) {\n                        let instrumentIdx: number = pattern.instruments[0];\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\n\n                        let partsInBar: number = this.findPartsInBar(bar);\n\n                        for (const note of pattern.notes) {\n                            if (instrument.modulators[Config.modCount - 1 - note.pitches[0]] == Config.modulators.dictionary[\"tempo\"].index) {\n                                if (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {\n                                    if (note.end <= partsInBar) {\n                                        latestTempoPin = note.end;\n                                        latestTempoValue = note.pins[note.pins.length - 1].size;\n                                    }\n                                    else {\n                                        latestTempoPin = partsInBar;\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\n                                                const deltaVolume: number = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\n\n                                                latestTempoValue = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\n                                                pinIdx = note.pins.length;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Done once you process a pattern where tempo mods happened, since the search happens backward\n                if (latestTempoPin != null) {\n                    prevTempo = latestTempoValue + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                    bar = -1;\n                }\n            }\n        }\n\n        if (hasTempoMods || hasNextBarMods) {\n            // Run from start bar to end bar and observe looping, computing average tempo across each bar\n            let bar: number = startBar;\n            let ended: boolean = false;\n            let totalSamples: number = 0;\n\n            while (!ended) {\n                // Compute the subsection of the pattern that will play\n                let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\n                let currentPart: number = 0;\n\n                if (hasNextBarMods) {\n                    partsInBar = this.findPartsInBar(bar);\n                }\n\n                // Compute average tempo in this tick window, or use last tempo if nothing happened\n                if (hasTempoMods) {\n                    let foundMod: boolean = false;\n                    for (let channel: number = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n                        if (foundMod == false) {\n                            let pattern: Pattern | null = this.song.getPattern(channel, bar);\n                            if (pattern != null) {\n                                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                                    if (foundMod == false && instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index\n                                        && pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {\n                                        // Only the first tempo mod instrument for this bar will be checked (well, the first with a note in this bar).\n                                        foundMod = true;\n                                        // Need to re-sort the notes by start time to make the next part much less painful.\n                                        pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\n                                        for (const note of pattern.notes) {\n                                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\n                                                // Compute samples up to this note\n                                                totalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\n\n                                                if (note.start < partsInBar) {\n                                                    for (let pinIdx: number = 1; pinIdx < note.pins.length; pinIdx++) {\n                                                        // Compute samples up to this pin\n                                                        if (note.pins[pinIdx - 1].time + note.start <= partsInBar) {\n                                                            const tickLength: number = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);\n                                                            const prevPinTempo: number = note.pins[pinIdx - 1].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            let currPinTempo: number = note.pins[pinIdx].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                                // Compute an intermediary tempo since bar changed over mid-pin. Maybe I'm deep in \"what if\" territory now!\n                                                                currPinTempo = note.pins[pinIdx - 1].size + (note.pins[pinIdx].size - note.pins[pinIdx - 1].size) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time) + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            }\n                                                            let bpmScalar: number = Config.partsPerBeat * Config.ticksPerPart / 60;\n\n                                                            if (currPinTempo != prevPinTempo) {\n\n                                                                // Definite integral of SamplesPerTick w/r/t beats to find total samples from start point to end point for a variable tempo\n                                                                // The starting formula is\n                                                                // SamplesPerTick = SamplesPerSec / ((PartsPerBeat * TicksPerPart) / SecPerMin) * BeatsPerMin )\n                                                                //\n                                                                // This is an expression of samples per tick \"instantaneously\", and it can be multiplied by a number of ticks to get a sample count.\n                                                                // But this isn't the full story. BeatsPerMin, e.g. tempo, changes throughout the interval so it has to be expressed in terms of ticks, \"t\"\n                                                                // ( Also from now on PartsPerBeat, TicksPerPart, and SecPerMin are combined into one scalar, called \"BPMScalar\" )\n                                                                // Substituting BPM for a step variable that moves with respect to the current tick, we get\n                                                                // SamplesPerTick = SamplesPerSec / (BPMScalar * ( (EndTempo - StartTempo / TickLength) * t + StartTempo ) )\n                                                                //\n                                                                // When this equation is integrated from 0 to TickLength with respect to t, we get the following expression:\n                                                                //   Samples = - SamplesPerSec * TickLength * ( log( BPMScalar * EndTempo * TickLength ) - log( BPMScalar * StartTempo * TickLength ) ) / BPMScalar * ( StartTempo - EndTempo )\n\n                                                                totalSamples += - this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));\n\n                                                            }\n                                                            else {\n\n                                                                // No tempo change between the two pins.\n                                                                totalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);\n\n                                                            }\n                                                            prevTempo = currPinTempo;\n                                                        }\n                                                        currentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Compute samples for the rest of the bar\n                totalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\n\n                bar++;\n                if (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {\n                    bar = this.song.loopStart;\n                    if (loop > 0) loop--;\n                }\n                if (bar >= endBar) {\n                    ended = true;\n                }\n\n            }\n\n            return Math.ceil(totalSamples);\n        }\n        else {\n            // No tempo or next bar mods... phew! Just calculate normally.\n            return this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);\n        }\n    }\n\n    public getTotalBars(enableIntro: boolean, enableOutro: boolean, useLoopCount: number = this.loopRepeatCount): number {\n        if (this.song == null) throw new Error();\n        let bars: number = this.song.loopLength * (useLoopCount + 1);\n        if (enableIntro) bars += this.song.loopStart;\n        if (enableOutro) bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\n        return bars;\n    }\n\n    constructor(song: Song | string | null = null) {\n        this.computeDelayBufferSizes();\n        if (song != null) this.setSong(song);\n    }\n\n    public setSong(song: Song | string): void {\n        if (typeof (song) == \"string\") {\n            this.song = new Song(song);\n        } else if (song instanceof Song) {\n            this.song = song;\n        }\n        this.prevBar = null;\n    }\n\n    private computeDelayBufferSizes(): void {\n        this.panningDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.panDelaySecondsMax);\n        this.panningDelayBufferMask = this.panningDelayBufferSize - 1;\n        this.chorusDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.chorusMaxDelay);\n        this.chorusDelayBufferMask = this.chorusDelayBufferSize - 1;\n    }\n\n    private activateAudio(): void {\n        const bufferSize: number = this.anticipatePoorPerformance ? (this.preferLowerLatency ? 2048 : 4096) : (this.preferLowerLatency ? 512 : 2048);\n        if (this.audioCtx == null || this.scriptNode == null || this.scriptNode.bufferSize != bufferSize) {\n            if (this.scriptNode != null) this.deactivateAudio();\n            const latencyHint: string = this.anticipatePoorPerformance ? (this.preferLowerLatency ? \"balanced\" : \"playback\") : (this.preferLowerLatency ? \"interactive\" : \"balanced\");\n            this.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)({ latencyHint: latencyHint });\n            this.samplesPerSecond = this.audioCtx.sampleRate;\n            this.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(bufferSize, 0, 2) : this.audioCtx.createJavaScriptNode(bufferSize, 0, 2); // bufferSize samples per callback buffer, 0 input channels, 2 output channels (left/right)\n            this.scriptNode.onaudioprocess = this.audioProcessCallback;\n            this.scriptNode.channelCountMode = 'explicit';\n            this.scriptNode.channelInterpretation = 'speakers';\n            this.scriptNode.connect(this.audioCtx.destination);\n\n            this.computeDelayBufferSizes();\n        }\n        this.audioCtx.resume();\n    }\n\n    private deactivateAudio(): void {\n        if (this.audioCtx != null && this.scriptNode != null) {\n            this.scriptNode.disconnect(this.audioCtx.destination);\n            this.scriptNode = null;\n            if (this.audioCtx.close) this.audioCtx.close(); // firefox is missing this function?\n            this.audioCtx = null;\n        }\n    }\n\n    public maintainLiveInput(): void {\n        this.activateAudio();\n        this.liveInputEndTime = performance.now() + 10000.0;\n    }\n\n    public play(): void {\n        if (this.isPlayingSong) return;\n        this.initModFilters(this.song);\n        this.computeLatestModValues();\n        this.activateAudio();\n        this.warmUpSynthesizer(this.song);\n        this.isPlayingSong = true;\n    }\n\n    public pause(): void {\n        if (!this.isPlayingSong) return;\n        this.isPlayingSong = false;\n        this.isRecording = false;\n        this.modValues = [];\n        this.nextModValues = [];\n        this.heldMods = [];\n        if (this.song != null) {\n            this.song.inVolumeCap = 0.0;\n            this.song.outVolumeCap = 0.0;\n            for (let channelIndex: number = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\n                this.modInsValues[channelIndex] = [];\n                this.nextModInsValues[channelIndex] = [];\n            }\n        }\n    }\n\n    public startRecording(): void {\n        this.preferLowerLatency = true;\n        this.isRecording = true;\n        this.play();\n    }\n\n    public resetEffects(): void {\n        this.limit = 0.0;\n        this.freeAllTones();\n        if (this.song != null) {\n            for (const channelState of this.channels) {\n                for (const instrumentState of channelState.instruments) {\n                    instrumentState.resetAllEffects();\n                }\n            }\n        }\n    }\n\n    public setModValue(volumeStart: number, volumeEnd: number, channelIndex: number, instrumentIndex: number, setting: number): number {\n        let val: number = volumeStart + Config.modulators[setting].convertRealFactor;\n        let nextVal: number = volumeEnd + Config.modulators[setting].convertRealFactor;\n        // should these be turned into a function?\n        if (Config.modulators[setting].optionalModify == \"invert-0to50\") {\n            val = 50 - val;\n            nextVal = 50 - nextVal;\n        }\n        if (Config.modulators[setting].optionalModify == \"invert-0to99\") {\n            val = 99 - val;\n            nextVal = 99 - nextVal;\n        }\n        if (Config.modulators[setting].forSong) {\n            if (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {\n                this.modValues[setting] = val;\n                this.nextModValues[setting] = nextVal;\n            }\n        } else {\n            if (this.modInsValues[channelIndex][instrumentIndex][setting] == null\n                || this.modInsValues[channelIndex][instrumentIndex][setting] != val\n                || this.nextModInsValues[channelIndex][instrumentIndex][setting] != nextVal) {\n                this.modInsValues[channelIndex][instrumentIndex][setting] = val;\n                this.nextModInsValues[channelIndex][instrumentIndex][setting] = nextVal;\n            }\n        }\n\n        return val;\n    }\n\n    public getModValue(setting: number, channel?: number | null, instrument?: number | null, nextVal?: boolean): number {\n        const forSong: boolean = Config.modulators[setting].forSong;\n        if (forSong) {\n            if (this.modValues[setting] != null && this.nextModValues[setting] != null) {\n                return nextVal ? this.nextModValues[setting]! : this.modValues[setting]!;\n            }\n        } else if (channel != undefined && instrument != undefined) {\n            if (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {\n                return nextVal ? this.nextModInsValues[channel][instrument][setting]! : this.modInsValues[channel][instrument][setting]!;\n            }\n        }\n        return -1;\n    }\n\n    // Checks if any mod is active for the given channel/instrument OR if any mod is active for the song scope. Could split the logic if needed later.\n    public isAnyModActive(channel: number, instrument: number): boolean {\n        for (let setting: number = 0; setting < Config.modulators.length; setting++) {\n            if ((this.modValues != undefined && this.modValues[setting] != null)\n                || (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public unsetMod(setting: number, channel?: number, instrument?: number) {\n        if (this.isModActive(setting) || (channel != undefined && instrument != undefined && this.isModActive(setting, channel, instrument))) {\n            this.modValues[setting] = null;\n            this.nextModValues[setting] = null;\n            for (let i: number = 0; i < this.heldMods.length; i++) {\n                if (channel != undefined && instrument != undefined) {\n                    if (this.heldMods[i].channelIndex == channel && this.heldMods[i].instrumentIndex == instrument && this.heldMods[i].setting == setting)\n                        this.heldMods.splice(i, 1);\n                } else {\n                    if (this.heldMods[i].setting == setting)\n                        this.heldMods.splice(i, 1);\n                }\n            }\n            if (channel != undefined && instrument != undefined) {\n                this.modInsValues[channel][instrument][setting] = null;\n                this.nextModInsValues[channel][instrument][setting] = null;\n            }\n        }\n    }\n\n    public isFilterModActive(forNoteFilter: boolean, channelIdx: number, instrumentIdx: number) {\n        const instrument: Instrument = this.song!.channels[channelIdx].instruments[instrumentIdx];\n\n        if (forNoteFilter) {\n            if (instrument.noteFilterType)\n                return false;\n            if (instrument.tmpNoteFilterEnd != null)\n                return true;\n        }\n        else {\n            if (instrument.eqFilterType)\n                return false;\n            if (instrument.tmpEqFilterEnd != null)\n                return true;\n        }\n        return false\n    }\n\n    public isModActive(setting: number, channel?: number, instrument?: number): boolean {\n        const forSong: boolean = Config.modulators[setting].forSong;\n        if (forSong) {\n            return (this.modValues != undefined && this.modValues[setting] != null);\n        } else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null) {\n            return (this.modInsValues[channel][instrument][setting] != null);\n        }\n        return false;\n    }\n\n    // Force a modulator to be held at the given volumeStart for a brief duration.\n    public forceHoldMods(volumeStart: number, channelIndex: number, instrumentIndex: number, setting: number): void {\n        let found: boolean = false;\n        for (let i: number = 0; i < this.heldMods.length; i++) {\n            if (this.heldMods[i].channelIndex == channelIndex && this.heldMods[i].instrumentIndex == instrumentIndex && this.heldMods[i].setting == setting) {\n                this.heldMods[i].volume = volumeStart;\n                this.heldMods[i].holdFor = 24;\n                found = true;\n            }\n        }\n        // Default: hold for 24 ticks / 12 parts (half a beat).\n        if (!found)\n            this.heldMods.push({ volume: volumeStart, channelIndex: channelIndex, instrumentIndex: instrumentIndex, setting: setting, holdFor: 24 });\n    }\n\n    public snapToStart(): void {\n        this.bar = 0;\n        this.resetEffects();\n        this.snapToBar();\n    }\n\n    public goToBar(bar: number): void {\n        this.bar = bar;\n        this.resetEffects();\n        this.playheadInternal = this.bar;\n    }\n\n    public snapToBar(): void {\n        this.playheadInternal = this.bar;\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.tickSampleCountdown = 0;\n    }\n\n    public jumpIntoLoop(): void {\n        if (!this.song) return;\n        if (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\n            const oldBar: number = this.bar;\n            this.bar = this.song.loopStart;\n            this.playheadInternal += this.bar - oldBar;\n\n            if (this.playing)\n                this.computeLatestModValues();\n        }\n    }\n\n    public goToNextBar(): void {\n        if (!this.song) return;\n        this.prevBar = this.bar;\n        const oldBar: number = this.bar;\n        this.bar++;\n        if (this.bar >= this.song.barCount) {\n            this.bar = 0;\n        }\n        this.playheadInternal += this.bar - oldBar;\n\n        if (this.playing)\n            this.computeLatestModValues();\n    }\n\n    public goToPrevBar(): void {\n        if (!this.song) return;\n        this.prevBar = null;\n        const oldBar: number = this.bar;\n        this.bar--;\n        if (this.bar < 0 || this.bar >= this.song.barCount) {\n            this.bar = this.song.barCount - 1;\n        }\n        this.playheadInternal += this.bar - oldBar;\n\n        if (this.playing)\n            this.computeLatestModValues();\n    }\n\n    private getNextBar(): number {\n        let nextBar: number = this.bar + 1;\n        if (this.isRecording) {\n            if (nextBar >= this.song!.barCount) {\n                nextBar = this.song!.barCount - 1;\n            }\n        } else if (this.bar == this.loopBar && !this.renderingSong) {\n            nextBar = this.bar;\n        }\n        else if (this.loopRepeatCount != 0 && nextBar == this.song!.loopStart + this.song!.loopLength) {\n            nextBar = this.song!.loopStart;\n        }\n        return nextBar;\n    }\n\n    public skipBar(): void {\n        if (!this.song) return;\n        const samplesPerTick: number = this.getSamplesPerTick();\n        this.bar++;\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.tickSampleCountdown = samplesPerTick;\n\t    \t\t\tthis.isAtStartOfTick = true;\n\t\t\t//BUGFIX FROM JUMMBOX\n\n        if (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\n            this.bar = this.song.loopStart;\n            if (this.loopRepeatCount > 0) this.loopRepeatCount--;\n        }\n\n    }\n\n    private audioProcessCallback = (audioProcessingEvent: any): void => {\n        const outputBuffer = audioProcessingEvent.outputBuffer;\n        const outputDataL: Float32Array = outputBuffer.getChannelData(0);\n        const outputDataR: Float32Array = outputBuffer.getChannelData(1);\n\n        if (this.browserAutomaticallyClearsAudioBuffer && (outputDataL[0] != 0.0 || outputDataR[0] != 0.0 || outputDataL[outputBuffer.length - 1] != 0.0 || outputDataR[outputBuffer.length - 1] != 0.0)) {\n            // If the buffer is ever initially nonzero, then this must be an older browser that doesn't automatically clear the audio buffer.\n            this.browserAutomaticallyClearsAudioBuffer = false;\n        }\n        if (!this.browserAutomaticallyClearsAudioBuffer) {\n            // If this browser does not clear the buffer automatically, do so manually before continuing.\n            const length: number = outputBuffer.length;\n            for (let i: number = 0; i < length; i++) {\n                outputDataL[i] = 0.0;\n                outputDataR[i] = 0.0;\n            }\n        }\n\n        if (!this.isPlayingSong && performance.now() >= this.liveInputEndTime) {\n            this.deactivateAudio();\n        } else {\n            this.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\n\n            if (this.oscEnabled) {\n                if (this.oscRefreshEventTimer <= 0) {\n                    events.raise(\"oscillascopeUpdate\", outputDataL, outputDataR);\n                    this.oscRefreshEventTimer = 2;\n                } else {\n                    this.oscRefreshEventTimer--;\n                }\n            }\n        }\n    }\n\n    public synthesize(outputDataL: Float32Array, outputDataR: Float32Array, outputBufferLength: number, playSong: boolean = true): void {\n        if (this.song == null) {\n            for (let i: number = 0; i < outputBufferLength; i++) {\n                outputDataL[i] = 0.0;\n                outputDataR[i] = 0.0;\n            }\n            this.deactivateAudio();\n            return;\n        }\n\n        const song: Song = this.song;\n        this.song.inVolumeCap = 0.0 // Reset volume cap for this run\n        this.song.outVolumeCap = 0.0;\n\n        let samplesPerTick: number = this.getSamplesPerTick();\n        let ended: boolean = false;\n\n        // Check the bounds of the playhead:\n        if (this.tickSampleCountdown <= 0 || this.tickSampleCountdown > samplesPerTick) {\n            this.tickSampleCountdown = samplesPerTick;\n            this.isAtStartOfTick = true;\n        }\n        if (playSong) {\n            if (this.beat >= song.beatsPerBar) {\n                this.beat = 0;\n                this.part = 0;\n                this.tick = 0;\n                this.tickSampleCountdown = samplesPerTick;\n                this.isAtStartOfTick = true;\n\n                this.prevBar = this.bar;\n                this.bar = this.getNextBar();\n                if (this.bar <= this.prevBar && this.loopRepeatCount > 0) this.loopRepeatCount--;\n\n            }\n            if (this.bar >= song.barCount) {\n                this.bar = 0;\n                if (this.loopRepeatCount != -1) {\n                    ended = true;\n                    this.pause();\n                }\n            }\n        }\n\n        //const synthStartTime: number = performance.now();\n\n        this.syncSongState();\n\n        if (this.tempMonoInstrumentSampleBuffer == null || this.tempMonoInstrumentSampleBuffer.length < outputBufferLength) {\n            this.tempMonoInstrumentSampleBuffer = new Float32Array(outputBufferLength);\n        }\n\n        // Post processing parameters:\n        const volume: number = +this.volume;\n        const limitDecay: number = 1.0 - Math.pow(0.5, this.song.limitDecay / this.samplesPerSecond);\n        const limitRise: number = 1.0 - Math.pow(0.5, this.song.limitRise / this.samplesPerSecond);\n        let limit: number = +this.limit;\n\t    \t\t\tlet skippedBars = [];\n        let firstSkippedBufferIndex = -1;\n\t\t//BUGFIX FROM JUMMBOX\n\n        let bufferIndex: number = 0;\n        while (bufferIndex < outputBufferLength && !ended) {\n\n            this.nextBar = this.getNextBar();\n            if (this.nextBar >= song.barCount) this.nextBar = null;\n\n            const samplesLeftInBuffer: number = outputBufferLength - bufferIndex;\n            const samplesLeftInTick: number = Math.ceil(this.tickSampleCountdown);\n            const runLength: number = Math.min(samplesLeftInTick, samplesLeftInBuffer);\n            const runEnd: number = bufferIndex + runLength;\n\n            // Handle mod synth\n            if (this.isPlayingSong || this.renderingSong) {\n\n                // First modulation pass. Determines active tones.\n                // Runs everything but Dot X/Y mods, to let them always come after morph.\n                for (let channelIndex: number = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\n                    const channel: Channel = song.channels[channelIndex];\n                    const channelState: ChannelState = this.channels[channelIndex];\n\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong);\n                    for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                        const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n                        for (let i: number = 0; i < instrumentState.activeModTones.count(); i++) {\n                            const tone: Tone = instrumentState.activeModTones.get(i);\n                            const channel: Channel = song.channels[channelIndex];\n                            const instrument: Instrument = channel.instruments[tone.instrumentIndex];\n                            let mod: number = Config.modCount - 1 - tone.pitches[0];\n\n                            if ((instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index)\n                                && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {\n                                continue;\n                            }\n                            this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\n                        }\n                    }\n                }\n\n                 // Second modulation pass.\n                // Only for Dot X/Y mods.\n                for (let channelIndex: number = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\n                    const channel: Channel = song.channels[channelIndex];\n                    const channelState: ChannelState = this.channels[channelIndex];\n\n                    for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                        const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n                        for (let i: number = 0; i < instrumentState.activeModTones.count(); i++) {\n                            const tone: Tone = instrumentState.activeModTones.get(i);\n                            const channel: Channel = song.channels[channelIndex];\n                            const instrument: Instrument = channel.instruments[tone.instrumentIndex];\n                            let mod: number = Config.modCount - 1 - tone.pitches[0];\n\n                            if ((instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index)\n                                && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {\n\n                                this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\n                            }\n\n                        }\n                    }\n                }\n            }\n\n            // Handle next bar mods if they were set\n            if (this.wantToSkip) {\n\t\t    \t\t\t\t\t// Unable to continue, as we have skipped back to a previously visited bar without generating new samples, which means we are infinitely skipping.\n                // In this case processing will return before the designated number of samples are processed. In other words, silence will be generated.\n                let barVisited = skippedBars.includes(this.bar);\n                if (barVisited && bufferIndex == firstSkippedBufferIndex)\n                    return;\n                if (firstSkippedBufferIndex == -1) {\n                    firstSkippedBufferIndex = bufferIndex;\n                }\n                if (!barVisited)\n                    skippedBars.push(this.bar);\n\t\t\t\t//BUGFIX FROM JUMMBOX\n                this.wantToSkip = false;\n                this.skipBar();\n\t\t    \t\t\t\t\tcontinue;\n\t\t\t\t\t//BUGFIX FROM JUMMBOX\n            }\n\n            for (let channelIndex: number = 0; channelIndex < song.pitchChannelCount + song.noiseChannelCount; channelIndex++) {\n                const channel: Channel = song.channels[channelIndex];\n                const channelState: ChannelState = this.channels[channelIndex];\n\n                if (this.isAtStartOfTick) {\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong && !this.countInMetronome);\n                    this.determineLiveInputTones(song, channelIndex, samplesPerTick);\n                }\n                for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                    const instrument: Instrument = channel.instruments[instrumentIndex];\n                    const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n\n                    if (this.isAtStartOfTick) {\n                        let tonesPlayedInThisInstrument: number = instrumentState.activeTones.count() + instrumentState.liveInputTones.count();\n\n                        for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\n                            const tone: Tone = instrumentState.releasedTones.get(i);\n                            if (tone.ticksSinceReleased >= Math.abs(instrument.getFadeOutTicks())) {\n                                this.freeReleasedTone(instrumentState, i);\n                                i--;\n                                continue;\n                            }\n                            const shouldFadeOutFast: boolean = (tonesPlayedInThisInstrument >= Config.maximumTonesPerChannel);\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, true, shouldFadeOutFast);\n                            tonesPlayedInThisInstrument++;\n                        }\n\n                        if (instrumentState.awake) {\n                            if (!instrumentState.computed) {\n                                instrumentState.compute(this, instrument, samplesPerTick, Math.ceil(samplesPerTick), null, channelIndex, instrumentIndex);\n                            }\n\n                            instrumentState.computed = false;\n                            //instrumentState.envelopeComputer.clearEnvelopes();\n                        }\n                    }\n\n                    for (let i: number = 0; i < instrumentState.activeTones.count(); i++) {\n                        const tone: Tone = instrumentState.activeTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n\n                    for (let i: number = 0; i < instrumentState.liveInputTones.count(); i++) {\n                        const tone: Tone = instrumentState.liveInputTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n\n                    for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\n                        const tone: Tone = instrumentState.releasedTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n\n                    if (instrumentState.awake) {\n                        Synth.effectsSynth(this, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\n                    }\n\n                    // Update LFO time for instruments (used to be deterministic based on bar position but now vibrato/arp speed messes that up!)\n\n                    const tickSampleCountdown: number = this.tickSampleCountdown;\n                    const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\n                    const endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\n                    const ticksIntoBar: number = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\n                    const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\n                    const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\n                    const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\n                    const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\n                    let useVibratoSpeed: number = instrument.vibratoSpeed;\n\n                    instrumentState.vibratoTime = instrumentState.nextVibratoTime;\n\n                    if (this.isModActive(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex)) {\n                        useVibratoSpeed = this.getModValue(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex);\n                    }\n\n                    if (useVibratoSpeed == 0) {\n                        instrumentState.vibratoTime = 0;\n                        instrumentState.nextVibratoTime = 0;\n                    }\n                    else {\n                        instrumentState.nextVibratoTime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);\n                    }\n                }\n            }\n\n            if (this.enableMetronome || this.countInMetronome) {\n                if (this.part == 0) {\n                    if (!this.startedMetronome) {\n                        const midBeat: boolean = (song.beatsPerBar > 4 && (song.beatsPerBar % 2 == 0) && this.beat == song.beatsPerBar / 2);\n                        const periods: number = (this.beat == 0) ? 8 : midBeat ? 6 : 4;\n                        const hz: number = (this.beat == 0) ? 1600 : midBeat ? 1200 : 800;\n                        const amplitude: number = (this.beat == 0) ? 0.06 : midBeat ? 0.05 : 0.04;\n                        const samplesPerPeriod: number = this.samplesPerSecond / hz;\n                        const radiansPerSample: number = Math.PI * 2.0 / samplesPerPeriod;\n                        this.metronomeSamplesRemaining = Math.floor(samplesPerPeriod * periods);\n                        this.metronomeFilter = 2.0 * Math.cos(radiansPerSample);\n                        this.metronomeAmplitude = amplitude * Math.sin(radiansPerSample);\n                        this.metronomePrevAmplitude = 0.0;\n\n                        this.startedMetronome = true;\n                    }\n                    if (this.metronomeSamplesRemaining > 0) {\n                        const stopIndex: number = Math.min(runEnd, bufferIndex + this.metronomeSamplesRemaining);\n                        this.metronomeSamplesRemaining -= stopIndex - bufferIndex;\n                        for (let i: number = bufferIndex; i < stopIndex; i++) {\n                            outputDataL[i] += this.metronomeAmplitude;\n                            outputDataR[i] += this.metronomeAmplitude;\n                            const tempAmplitude: number = this.metronomeFilter * this.metronomeAmplitude - this.metronomePrevAmplitude;\n                            this.metronomePrevAmplitude = this.metronomeAmplitude;\n                            this.metronomeAmplitude = tempAmplitude;\n                        }\n                    }\n                } else {\n                    this.startedMetronome = false;\n                }\n            }\n\n            // Post processing:\n            for (let i: number = bufferIndex; i < runEnd; i++) {\n                // A compressor/limiter.\n                const sampleL = outputDataL[i] * song.masterGain * song.masterGain;\n                const sampleR = outputDataR[i] * song.masterGain * song.masterGain;\n                const absL: number = sampleL < 0.0 ? -sampleL : sampleL;\n                const absR: number = sampleR < 0.0 ? -sampleR : sampleR;\n                const abs: number = absL > absR ? absL : absR;\n                this.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs); // Analytics, spit out raw input volume\n                // Determines which formula to use. 0 when volume is between [0, compressionThreshold], 1 when between (compressionThreshold, limitThreshold], 2 above\n                const limitRange: number = (+(abs > song.compressionThreshold)) + (+(abs > song.limitThreshold));\n                // Determine the target amplification based on the range of the curve\n                const limitTarget: number =\n                    (+(limitRange == 0)) * (((abs + 1 - song.compressionThreshold) * 0.8 + 0.25) * song.compressionRatio + 1.05 * (1 - song.compressionRatio))\n                    + (+(limitRange == 1)) * (1.05)\n                    + (+(limitRange == 2)) * (1.05 * ((abs + 1 - song.limitThreshold) * song.limitRatio + (1 - song.limitThreshold)));\n                // Move the limit towards the target\n                limit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));\n                const limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\n                outputDataL[i] = sampleL * limitedVolume;\n                outputDataR[i] = sampleR * limitedVolume;\n\n                this.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume); // Analytics, spit out limited output volume\n            }\n\n            bufferIndex += runLength;\n\n            this.isAtStartOfTick = false;\n            this.tickSampleCountdown -= runLength;\n            if (this.tickSampleCountdown <= 0) {\n                this.isAtStartOfTick = true;\n\n                // Track how long tones have been released, and free them if there are too many.\n                // Also reset awake InstrumentStates that didn't have any Tones during this tick.\n                for (const channelState of this.channels) {\n                    for (const instrumentState of channelState.instruments) {\n                        for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\n                            const tone: Tone = instrumentState.releasedTones.get(i);\n                            if (tone.isOnLastTick) {\n                                this.freeReleasedTone(instrumentState, i);\n                                i--;\n                            } else {\n                                tone.ticksSinceReleased++;\n                            }\n                        }\n                        if (instrumentState.deactivateAfterThisTick) {\n                            instrumentState.deactivate();\n                        }\n                        instrumentState.tonesAddedInThisTick = false;\n                    }\n                }\n\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        let instrumentState: InstrumentState = this.channels[channel].instruments[instrumentIdx];\n\n                        // Update arpeggio time, which is used to calculate arpeggio position\n                        let useArpeggioSpeed: number = instrument.arpeggioSpeed;\n                        if (this.isModActive(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx)) {\n                            useArpeggioSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length-1, this.getModValue(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx, false)));\n                            if (Number.isInteger(useArpeggioSpeed)) {\n                                instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\n                            } else {\n                                // Linear interpolate arpeggio values\n                                instrumentState.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\n                            }\n                        }\n                        else {\n                            instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\n                        }\n\n                        // Update envelope time, which is used to calculate (all envelopes') position\n                        let useEnvelopeSpeed: number = instrument.envelopeSpeed;\n                        if (this.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channel, instrumentIdx)) {\n                            useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length-1, this.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channel, instrumentIdx, false)));\n                            if (Number.isInteger(useEnvelopeSpeed)) {\n                                instrumentState.envelopeTime += Config.arpSpeedScale[useEnvelopeSpeed];\n                            } else {\n                                // Linear interpolate envelope values\n                                instrumentState.envelopeTime += (1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)];\n                            }\n                        }\n                        else {\n                            instrumentState.envelopeTime += Config.arpSpeedScale[useEnvelopeSpeed];\n                        }\n                    }\n                }\n\n                // Update next-used filters after each run\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        if (instrument.tmpEqFilterEnd != null) {\n                            instrument.tmpEqFilterStart = instrument.tmpEqFilterEnd;\n                        } else {\n                            instrument.tmpEqFilterStart = instrument.eqFilter;\n                        }\n                        if (instrument.tmpNoteFilterEnd != null) {\n                            instrument.tmpNoteFilterStart = instrument.tmpNoteFilterEnd;\n                        } else {\n                            instrument.tmpNoteFilterStart = instrument.noteFilter;\n                        }\n                    }\n                }\n\n                this.tick++;\n                this.tickSampleCountdown += samplesPerTick;\n                if (this.tick == Config.ticksPerPart) {\n                    this.tick = 0;\n                    this.part++;\n                    this.liveInputDuration--;\n                    this.liveBassInputDuration--;\n                    // Decrement held modulator counters after each run\n                    for (let i: number = 0; i < this.heldMods.length; i++) {\n                        this.heldMods[i].holdFor--;\n                        if (this.heldMods[i].holdFor <= 0) {\n                            this.heldMods.splice(i, 1);\n                        }\n                    }\n\n                    if (this.part == Config.partsPerBeat) {\n                        this.part = 0;\n\n                        if (playSong) {\n                            this.beat++;\n                            if (this.beat == song.beatsPerBar) {\n                                // bar changed, reset for next bar:\n                                this.beat = 0;\n\n                                if (this.countInMetronome) {\n                                    this.countInMetronome = false;\n                                } else {\n                                    this.prevBar = this.bar;\n                                    this.bar = this.getNextBar();\n                                    if (this.bar <= this.prevBar && this.loopRepeatCount > 0) this.loopRepeatCount--;\n\n                                    if (this.bar >= song.barCount) {\n                                        this.bar = 0;\n                                        if (this.loopRepeatCount != -1) {\n                                            ended = true;\n                                            this.resetEffects();\n                                            this.pause();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // Update mod values so that next values copy to current values\n            for (let setting: number = 0; setting < Config.modulators.length; setting++) {\n                if (this.nextModValues != null && this.nextModValues[setting] != null)\n                    this.modValues[setting] = this.nextModValues[setting];\n            }\n\n            // Set samples per tick if song tempo mods changed it\n            if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\n                samplesPerTick = this.getSamplesPerTick();\n                this.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);\n            }\n\n            // Bound LFO times to be within their period (to keep values from getting large)\n            // I figured this modulo math probably doesn't have to happen every LFO tick.\n            for (let channelIndex: number = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\n                for (let instrumentIndex = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[instrumentIndex];\n                    const instrument: Instrument = this.song.channels[channelIndex].instruments[instrumentIndex];\n                    instrumentState.nextVibratoTime = (instrumentState.nextVibratoTime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));\n                    instrumentState.arpTime = (instrumentState.arpTime % (2520 * Config.ticksPerArpeggio)); // 2520 = LCM of 4, 5, 6, 7, 8, 9 (arp sizes)\n                    instrumentState.envelopeTime = (instrumentState.envelopeTime % (Config.partsPerBeat * Config.ticksPerPart * this.song.beatsPerBar));\n                }\n            }\n\n            for (let setting: number = 0; setting < Config.modulators.length; setting++) {\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrument: number = 0; instrument < this.song.getMaxInstrumentsPerChannel(); instrument++) {\n                        if (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {\n                            this.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];\n                        }\n                    }\n                }\n            }\n        }\n\n        // Optimization: Avoid persistent reverb values in the float denormal range.\n        if (!Number.isFinite(limit) || Math.abs(limit) < epsilon) limit = 0.0;\n        this.limit = limit;\n\n        if (playSong && !this.countInMetronome) {\n            this.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / song.beatsPerBar + this.bar;\n        }\n\n        /*\n        const synthDuration: number = performance.now() - synthStartTime;\n        // Performance measurements:\n        samplesAccumulated += outputBufferLength;\n        samplePerformance += synthDuration;\n    \t\n        if (samplesAccumulated >= 44100 * 4) {\n            const secondsGenerated = samplesAccumulated / 44100;\n            const secondsRequired = samplePerformance / 1000;\n            const ratio = secondsRequired / secondsGenerated;\n            console.log(ratio);\n            samplePerformance = 0;\n            samplesAccumulated = 0;\n        }\n        */\n    }\n\n    private freeTone(tone: Tone): void {\n        this.tonePool.pushBack(tone);\n    }\n\n    private newTone(): Tone {\n        if (this.tonePool.count() > 0) {\n            const tone: Tone = this.tonePool.popBack();\n            tone.freshlyAllocated = true;\n            return tone;\n        }\n        return new Tone();\n    }\n\n    private releaseTone(instrumentState: InstrumentState, tone: Tone): void {\n        instrumentState.releasedTones.pushFront(tone);\n        tone.atNoteStart = false;\n        tone.passedEndOfNote = true;\n    }\n\n    private freeReleasedTone(instrumentState: InstrumentState, toneIndex: number): void {\n        this.freeTone(instrumentState.releasedTones.get(toneIndex));\n        instrumentState.releasedTones.remove(toneIndex);\n    }\n\n    public freeAllTones(): void {\n        for (const channelState of this.channels) {\n            for (const instrumentState of channelState.instruments) {\n                while (instrumentState.activeTones.count() > 0) this.freeTone(instrumentState.activeTones.popBack());\n                while (instrumentState.activeModTones.count() > 0) this.freeTone(instrumentState.activeModTones.popBack());\n                while (instrumentState.releasedTones.count() > 0) this.freeTone(instrumentState.releasedTones.popBack());\n                while (instrumentState.liveInputTones.count() > 0) this.freeTone(instrumentState.liveInputTones.popBack());\n            }\n        }\n    }\n\n    private determineLiveInputTones(song: Song, channelIndex: number, samplesPerTick: number): void {\n        const channel: Channel = song.channels[channelIndex];\n        const channelState: ChannelState = this.channels[channelIndex];\n        const pitches: number[] = this.liveInputPitches;\n        const bassPitches: number[] = this.liveBassInputPitches;\n\n        for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n            const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n            const toneList: Deque<Tone> = instrumentState.liveInputTones;\n            let toneCount: number = 0;\n            if (this.liveInputDuration > 0 && (channelIndex == this.liveInputChannel) && pitches.length > 0 && this.liveInputInstruments.indexOf(instrumentIndex) != -1) {\n                const instrument: Instrument = channel.instruments[instrumentIndex];\n\n                if (instrument.getChord().singleTone) {\n                    let tone: Tone;\n                    if (toneList.count() <= toneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\n                        tone = this.newTone();\n                        toneList.set(toneCount, tone);\n                    } else {\n                        tone = toneList.get(toneCount);\n                    }\n                    toneCount++;\n\n                    for (let i: number = 0; i < pitches.length; i++) {\n                        tone.pitches[i] = pitches[i];\n                    }\n                    tone.pitchCount = pitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = instrumentIndex;\n                    tone.note = tone.prevNote = tone.nextNote = null;\n                    tone.atNoteStart = this.liveInputStarted;\n                    tone.forceContinueAtStart = false;\n                    tone.forceContinueAtEnd = false;\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                } else {\n                    //const transition: Transition = instrument.getTransition();\n\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, pitches);\n\n                    for (let i: number = 0; i < pitches.length; i++) {\n                        //const strumOffsetParts: number = i * instrument.getChord().strumParts;\n\n                        let tone: Tone;\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\n                            tone = this.tempMatchedPitchTones[toneCount]!;\n                            this.tempMatchedPitchTones[toneCount] = null;\n                            if (tone.pitchCount != 1 || tone.pitches[0] != pitches[i]) {\n                                this.releaseTone(instrumentState, tone);\n                                tone = this.newTone();\n                            }\n                            toneList.pushBack(tone);\n                        } else {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        }\n                        toneCount++;\n\n                        tone.pitches[0] = pitches[i];\n                        tone.pitchCount = 1;\n                        tone.chordSize = pitches.length;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = tone.prevNote = tone.nextNote = null;\n                        tone.atNoteStart = this.liveInputStarted;\n                        tone.forceContinueAtStart = false;\n                        tone.forceContinueAtEnd = false;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    }\n                }\n            }\n\n            if (this.liveBassInputDuration > 0 && (channelIndex == this.liveBassInputChannel) && bassPitches.length > 0 && this.liveBassInputInstruments.indexOf(instrumentIndex) != -1) {\n                const instrument: Instrument = channel.instruments[instrumentIndex];\n\n                if (instrument.getChord().singleTone) {\n                    let tone: Tone;\n                    if (toneList.count() <= toneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\n                        tone = this.newTone();\n                        toneList.set(toneCount, tone);\n                    } else {\n                        tone = toneList.get(toneCount);\n                    }\n                    toneCount++;\n\n                    for (let i: number = 0; i < bassPitches.length; i++) {\n                        tone.pitches[i] = bassPitches[i];\n                    }\n                    tone.pitchCount = bassPitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = instrumentIndex;\n                    tone.note = tone.prevNote = tone.nextNote = null;\n                    tone.atNoteStart = this.liveBassInputStarted;\n                    tone.forceContinueAtStart = false;\n                    tone.forceContinueAtEnd = false;\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                } else {\n                    //const transition: Transition = instrument.getTransition();\n\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, bassPitches);\n\n                    for (let i: number = 0; i < bassPitches.length; i++) {\n                        //const strumOffsetParts: number = i * instrument.getChord().strumParts;\n\n                        let tone: Tone;\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\n                            tone = this.tempMatchedPitchTones[toneCount]!;\n                            this.tempMatchedPitchTones[toneCount] = null;\n                            if (tone.pitchCount != 1 || tone.pitches[0] != bassPitches[i]) {\n                                this.releaseTone(instrumentState, tone);\n                                tone = this.newTone();\n                            }\n                            toneList.pushBack(tone);\n                        } else {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        }\n                        toneCount++;\n\n                        tone.pitches[0] = bassPitches[i];\n                        tone.pitchCount = 1;\n                        tone.chordSize = bassPitches.length;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = tone.prevNote = tone.nextNote = null;\n                        tone.atNoteStart = this.liveBassInputStarted;\n                        tone.forceContinueAtStart = false;\n                        tone.forceContinueAtEnd = false;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    }\n                }\n            }\n\n            while (toneList.count() > toneCount) {\n                this.releaseTone(instrumentState, toneList.popBack());\n            }\n\n            this.clearTempMatchedPitchTones(toneCount, instrumentState);\n        }\n\n        this.liveInputStarted = false;\n        this.liveBassInputStarted = false;\n    }\n\n    // Returns the chord type of the instrument in the adjacent pattern if it is compatible for a\n    // seamless transition across patterns, otherwise returns null.\n    private adjacentPatternHasCompatibleInstrumentTransition(song: Song, channel: Channel, pattern: Pattern, otherPattern: Pattern, instrumentIndex: number, transition: Transition, chord: Chord, note: Note, otherNote: Note, forceContinue: boolean): Chord | null {\n        if (song.patternInstruments && otherPattern.instruments.indexOf(instrumentIndex) == -1) {\n            // The adjacent pattern does not contain the same instrument as the current pattern.\n\n            if (pattern.instruments.length > 1 || otherPattern.instruments.length > 1) {\n                // The current or adjacent pattern contains more than one instrument, don't bother\n                // trying to connect them.\n                return null;\n            }\n            // Otherwise, the two patterns each contain one instrument, but not the same instrument.\n            // Try to connect them.\n            const otherInstrument: Instrument = channel.instruments[otherPattern.instruments[0]];\n\n            if (forceContinue) {\n                // Even non-seamless instruments can be connected across patterns if forced.\n                return otherInstrument.getChord();\n            }\n\n            // Otherwise, check that both instruments are seamless across patterns.\n            const otherTransition: Transition = otherInstrument.getTransition();\n            if (transition.includeAdjacentPatterns && otherTransition.includeAdjacentPatterns && otherTransition.slides == transition.slides) {\n                return otherInstrument.getChord();\n            } else {\n                return null;\n            }\n        } else {\n            // If both patterns contain the same instrument, check that it is seamless across patterns.\n            return (forceContinue || transition.includeAdjacentPatterns) ? chord : null;\n        }\n    }\n\n    public static adjacentNotesHaveMatchingPitches(firstNote: Note, secondNote: Note): boolean {\n        if (firstNote.pitches.length != secondNote.pitches.length) return false;\n        const firstNoteInterval: number = firstNote.pins[firstNote.pins.length - 1].interval;\n        for (const pitch of firstNote.pitches) {\n            if (secondNote.pitches.indexOf(pitch + firstNoteInterval) == -1) return false;\n        }\n        return true;\n    }\n\n    private moveTonesIntoOrderedTempMatchedList(toneList: Deque<Tone>, notePitches: number[]): void {\n        // The tones are about to seamlessly transition to a new note. The pitches\n        // from the old note may or may not match any of the pitches in the new\n        // note, and not necessarily in order, but if any do match, they'll sound\n        // better if those tones continue to have the same pitch. Attempt to find\n        // the right spot for each old tone in the new chord if possible.\n\n        for (let i: number = 0; i < toneList.count(); i++) {\n            const tone: Tone = toneList.get(i);\n            const pitch: number = tone.pitches[0] + tone.lastInterval;\n            for (let j: number = 0; j < notePitches.length; j++) {\n                if (notePitches[j] == pitch) {\n                    this.tempMatchedPitchTones[j] = tone;\n                    toneList.remove(i);\n                    i--;\n                    break;\n                }\n            }\n        }\n\n        // Any tones that didn't get matched should just fill in the gaps.\n        while (toneList.count() > 0) {\n            const tone: Tone = toneList.popFront();\n            for (let j: number = 0; j < this.tempMatchedPitchTones.length; j++) {\n                if (this.tempMatchedPitchTones[j] == null) {\n                    this.tempMatchedPitchTones[j] = tone;\n                    break;\n                }\n            }\n        }\n    }\n\n    private determineCurrentActiveTones(song: Song, channelIndex: number, samplesPerTick: number, playSong: boolean): void {\n        const channel: Channel = song.channels[channelIndex];\n        const channelState: ChannelState = this.channels[channelIndex];\n        const pattern: Pattern | null = song.getPattern(channelIndex, this.bar);\n        const currentPart: number = this.getCurrentPart();\n        const currentTick: number = this.tick + Config.ticksPerPart * currentPart;\n\n        if (playSong && song.getChannelIsMod(channelIndex)) {\n\n            // For mod channels, notes aren't strictly arranged chronologically. Also, each pitch value could play or not play at a given time. So... a bit more computation involved!\n            // The same transition logic should apply though, even though it isn't really used by mod channels.\n            let notes: (Note | null)[] = [];\n            let prevNotes: (Note | null)[] = [];\n            let nextNotes: (Note | null)[] = [];\n            let fillCount: number = Config.modCount;\n            while (fillCount--) {\n                notes.push(null);\n                prevNotes.push(null);\n                nextNotes.push(null);\n            }\n\n            if (pattern != null && !channel.muted) {\n                for (let i: number = 0; i < pattern.notes.length; i++) {\n                    if (pattern.notes[i].end <= currentPart) {\n                        // Actually need to check which note starts closer to the start of this note.\n                        if (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > (prevNotes[pattern.notes[i].pitches[0]] as Note).start) {\n                            prevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                        }\n                    }\n                    else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\n                        notes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                    }\n                    else if (pattern.notes[i].start > currentPart) {\n                        // Actually need to check which note starts closer to the end of this note.\n                        if (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < (nextNotes[pattern.notes[i].pitches[0]] as Note).start) {\n                            nextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                        }\n                    }\n                }\n            }\n\n            let modToneCount: number = 0;\n            const newInstrumentIndex: number = (song.patternInstruments && (pattern != null)) ? pattern!.instruments[0] : 0;\n            const instrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\n            const toneList: Deque<Tone> = instrumentState.activeModTones;\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                if (notes[mod] != null) {\n                    if (prevNotes[mod] != null && (prevNotes[mod] as Note).end != (notes[mod] as Note).start) prevNotes[mod] = null;\n                    if (nextNotes[mod] != null && (nextNotes[mod] as Note).start != (notes[mod] as Note).end) nextNotes[mod] = null;\n\n                }\n\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\n                    const sourceInstrumentState: InstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\n                    const destInstrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\n                    while (sourceInstrumentState.activeModTones.count() > 0) {\n                        destInstrumentState.activeModTones.pushFront(sourceInstrumentState.activeModTones.popBack());\n                    }\n                }\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\n\n                if (notes[mod] != null) {\n                    let prevNoteForThisInstrument: Note | null = prevNotes[mod];\n                    let nextNoteForThisInstrument: Note | null = nextNotes[mod];\n\n                    let forceContinueAtStart: boolean = false;\n                    let forceContinueAtEnd: boolean = false;\n                    const atNoteStart: boolean = (Config.ticksPerPart * notes[mod]!.start == currentTick) && this.isAtStartOfTick;\n                    let tone: Tone;\n                    if (toneList.count() <= modToneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    } else if (atNoteStart && (prevNoteForThisInstrument == null)) {\n                        const oldTone: Tone = toneList.get(modToneCount);\n                        if (oldTone.isOnLastTick) {\n                            this.freeTone(oldTone);\n                        } else {\n                            this.releaseTone(instrumentState, oldTone);\n                        }\n                        tone = this.newTone();\n                        toneList.set(modToneCount, tone);\n                    } else {\n                        tone = toneList.get(modToneCount);\n                    }\n                    modToneCount++;\n\n                    for (let i: number = 0; i < notes[mod]!.pitches.length; i++) {\n                        tone.pitches[i] = notes[mod]!.pitches[i];\n                    }\n                    tone.pitchCount = notes[mod]!.pitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = newInstrumentIndex;\n                    tone.note = notes[mod];\n                    tone.noteStartPart = notes[mod]!.start;\n                    tone.noteEndPart = notes[mod]!.end;\n                    tone.prevNote = prevNoteForThisInstrument;\n                    tone.nextNote = nextNoteForThisInstrument;\n                    tone.prevNotePitchIndex = 0;\n                    tone.nextNotePitchIndex = 0;\n                    tone.atNoteStart = atNoteStart;\n                    tone.passedEndOfNote = false;\n                    tone.forceContinueAtStart = forceContinueAtStart;\n                    tone.forceContinueAtEnd = forceContinueAtEnd;\n                }\n            }\n            // Automatically free or release seamless tones if there's no new note to take over.\n            while (toneList.count() > modToneCount) {\n                const tone: Tone = toneList.popBack();\n                const channel: Channel = song.channels[channelIndex];\n                if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[tone.instrumentIndex];\n                    this.releaseTone(instrumentState, tone);\n                } else {\n                    this.freeTone(tone);\n                }\n            }\n\n        }\n        else if (!song.getChannelIsMod(channelIndex)) {\n\n            let note: Note | null = null;\n            let prevNote: Note | null = null;\n            let nextNote: Note | null = null;\n\n            if (playSong && pattern != null && !channel.muted && (!this.isRecording || this.liveInputChannel != channelIndex)) {\n                for (let i: number = 0; i < pattern.notes.length; i++) {\n                    if (pattern.notes[i].end <= currentPart) {\n                        prevNote = pattern.notes[i];\n                    } else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\n                        note = pattern.notes[i];\n                    } else if (pattern.notes[i].start > currentPart) {\n                        nextNote = pattern.notes[i];\n                        break;\n                    }\n                }\n\n                if (note != null) {\n                    if (prevNote != null && prevNote.end != note.start) prevNote = null;\n                    if (nextNote != null && nextNote.start != note.end) nextNote = null;\n                }\n            }\n\n            // Seamless tones from a pattern with a single instrument can be transferred to a different single seamless instrument in the next pattern.\n            if (pattern != null && (!song.layeredInstruments || channel.instruments.length == 1 || (song.patternInstruments && pattern.instruments.length == 1))) {\n                const newInstrumentIndex: number = song.patternInstruments ? pattern.instruments[0] : 0;\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\n                    const sourceInstrumentState: InstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\n                    const destInstrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\n                    while (sourceInstrumentState.activeTones.count() > 0) {\n                        destInstrumentState.activeTones.pushFront(sourceInstrumentState.activeTones.popBack());\n                    }\n                }\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\n            } else {\n                channelState.singleSeamlessInstrument = null;\n            }\n\n            for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n                const toneList: Deque<Tone> = instrumentState.activeTones;\n                let toneCount: number = 0;\n                if ((note != null) && (!song.patternInstruments || (pattern!.instruments.indexOf(instrumentIndex) != -1))) {\n                    const instrument: Instrument = channel.instruments[instrumentIndex];\n                    let prevNoteForThisInstrument: Note | null = prevNote;\n                    let nextNoteForThisInstrument: Note | null = nextNote;\n\n                    const partsPerBar: Number = Config.partsPerBeat * song.beatsPerBar;\n                    const transition: Transition = instrument.getTransition();\n                    const chord: Chord = instrument.getChord();\n                    let forceContinueAtStart: boolean = false;\n                    let forceContinueAtEnd: boolean = false;\n                    let tonesInPrevNote: number = 0;\n                    let tonesInNextNote: number = 0;\n                    if (note.start == 0) {\n                        // If the beginning of the note coincides with the beginning of the pattern,\n                        let prevPattern: Pattern | null = (this.prevBar == null) ? null : song.getPattern(channelIndex, this.prevBar);\n                        if (prevPattern != null) {\n                            const lastNote: Note | null = (prevPattern.notes.length <= 0) ? null : prevPattern.notes[prevPattern.notes.length - 1];\n                            if (lastNote != null && lastNote.end == partsPerBar) {\n                                const patternForcesContinueAtStart: boolean = note.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(lastNote, note);\n                                const chordOfCompatibleInstrument: Chord | null = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern!, prevPattern, instrumentIndex, transition, chord, note, lastNote, patternForcesContinueAtStart);\n                                if (chordOfCompatibleInstrument != null) {\n                                    prevNoteForThisInstrument = lastNote;\n                                    tonesInPrevNote = chordOfCompatibleInstrument.singleTone ? 1 : prevNoteForThisInstrument.pitches.length\n                                    forceContinueAtStart = patternForcesContinueAtStart;\n                                }\n                            }\n                        }\n                    } else if (prevNoteForThisInstrument != null) {\n                        tonesInPrevNote = chord.singleTone ? 1 : prevNoteForThisInstrument.pitches.length\n                    }\n                    if (note.end == partsPerBar) {\n                        // If the end of the note coincides with the end of the pattern, look for an\n                        // adjacent note at the beginning of the next pattern.\n                        let nextPattern: Pattern | null = (this.nextBar == null) ? null : song.getPattern(channelIndex, this.nextBar);\n                        if (nextPattern != null) {\n                            const firstNote: Note | null = (nextPattern.notes.length <= 0) ? null : nextPattern.notes[0];\n                            if (firstNote != null && firstNote.start == 0) {\n                                const nextPatternForcesContinueAtStart: boolean = firstNote.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(note, firstNote);\n                                const chordOfCompatibleInstrument: Chord | null = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern!, nextPattern, instrumentIndex, transition, chord, note, firstNote, nextPatternForcesContinueAtStart);\n                                if (chordOfCompatibleInstrument != null) {\n                                    nextNoteForThisInstrument = firstNote;\n                                    tonesInNextNote = chordOfCompatibleInstrument.singleTone ? 1 : nextNoteForThisInstrument.pitches.length\n                                    forceContinueAtEnd = nextPatternForcesContinueAtStart;\n                                }\n                            }\n                        }\n                    } else if (nextNoteForThisInstrument != null) {\n                        tonesInNextNote = chord.singleTone ? 1 : nextNoteForThisInstrument.pitches.length\n                    }\n\n                    if (chord.singleTone) {\n                        const atNoteStart: boolean = (Config.ticksPerPart * note.start == currentTick);\n                        let tone: Tone;\n                        if (toneList.count() <= toneCount) {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        } else if (atNoteStart && ((!(transition.isSeamless || instrument.clicklessTransition) && !forceContinueAtStart) || prevNoteForThisInstrument == null)) {\n                            const oldTone: Tone = toneList.get(toneCount);\n                            if (oldTone.isOnLastTick) {\n                                this.freeTone(oldTone);\n                            } else {\n                                this.releaseTone(instrumentState, oldTone);\n                            }\n                            tone = this.newTone();\n                            toneList.set(toneCount, tone);\n                        } else {\n                            tone = toneList.get(toneCount);\n                        }\n                        toneCount++;\n\n                        for (let i: number = 0; i < note.pitches.length; i++) {\n                            tone.pitches[i] = note.pitches[i];\n                        }\n                        tone.pitchCount = note.pitches.length;\n                        tone.chordSize = 1;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = note;\n                        tone.noteStartPart = note.start;\n                        tone.noteEndPart = note.end;\n                        tone.prevNote = prevNoteForThisInstrument;\n                        tone.nextNote = nextNoteForThisInstrument;\n                        tone.prevNotePitchIndex = 0;\n                        tone.nextNotePitchIndex = 0;\n                        tone.atNoteStart = atNoteStart;\n                        tone.passedEndOfNote = false;\n                        tone.forceContinueAtStart = forceContinueAtStart;\n                        tone.forceContinueAtEnd = forceContinueAtEnd;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    } else {\n                        const transition: Transition = instrument.getTransition();\n\n                        if (((transition.isSeamless && !transition.slides && chord.strumParts == 0) || forceContinueAtStart) && (Config.ticksPerPart * note.start == currentTick) && prevNoteForThisInstrument != null) {\n                            this.moveTonesIntoOrderedTempMatchedList(toneList, note.pitches);\n                        }\n\n                        let strumOffsetParts: number = 0;\n                        for (let i: number = 0; i < note.pitches.length; i++) {\n\n                            let prevNoteForThisTone: Note | null = (tonesInPrevNote > i) ? prevNoteForThisInstrument : null;\n                            let noteForThisTone: Note = note;\n                            let nextNoteForThisTone: Note | null = (tonesInNextNote > i) ? nextNoteForThisInstrument : null;\n                            let noteStartPart: number = noteForThisTone.start + strumOffsetParts;\n                            let passedEndOfNote: boolean = false;\n\n                            // Strumming may mean that a note's actual start time may be after the\n                            // note's displayed start time. If the note start hasn't been reached yet,\n                            // carry over the previous tone if available and seamless, otherwise skip\n                            // the new tone until it is ready to start.\n                            if (noteStartPart > currentPart) {\n                                if (toneList.count() > i && (transition.isSeamless || forceContinueAtStart) && prevNoteForThisTone != null) {\n                                    // Continue the previous note's chord until the current one takes over.\n                                    nextNoteForThisTone = noteForThisTone;\n                                    noteForThisTone = prevNoteForThisTone;\n                                    prevNoteForThisTone = null;\n                                    noteStartPart = noteForThisTone.start + strumOffsetParts;\n                                    passedEndOfNote = true;\n                                } else {\n                                    // This and the rest of the tones in the chord shouldn't start yet.\n                                    break;\n                                }\n                            }\n\n                            let noteEndPart: number = noteForThisTone.end;\n                            if ((transition.isSeamless || forceContinueAtStart) && nextNoteForThisTone != null) {\n                                noteEndPart = Math.min(Config.partsPerBeat * this.song!.beatsPerBar, noteEndPart + strumOffsetParts);\n                            }\n                            if ((!transition.continues && !forceContinueAtStart) || prevNoteForThisTone == null) {\n                                strumOffsetParts += chord.strumParts;\n                            }\n\n                            const atNoteStart: boolean = (Config.ticksPerPart * noteStartPart == currentTick);\n                            let tone: Tone;\n                            if (this.tempMatchedPitchTones[toneCount] != null) {\n                                tone = this.tempMatchedPitchTones[toneCount]!;\n                                this.tempMatchedPitchTones[toneCount] = null;\n                                toneList.pushBack(tone);\n                            } else if (toneList.count() <= toneCount) {\n                                tone = this.newTone();\n                                toneList.pushBack(tone);\n                            } else if (atNoteStart && ((!transition.isSeamless && !forceContinueAtStart) || prevNoteForThisTone == null)) {\n                                const oldTone: Tone = toneList.get(toneCount);\n                                if (oldTone.isOnLastTick) {\n                                    this.freeTone(oldTone);\n                                } else {\n                                    this.releaseTone(instrumentState, oldTone);\n                                }\n                                tone = this.newTone();\n                                toneList.set(toneCount, tone);\n                            } else {\n                                tone = toneList.get(toneCount);\n                            }\n                            toneCount++;\n\n                            tone.pitches[0] = noteForThisTone.pitches[i];\n                            tone.pitchCount = 1;\n                            tone.chordSize = noteForThisTone.pitches.length;\n                            tone.instrumentIndex = instrumentIndex;\n                            tone.note = noteForThisTone;\n                            tone.noteStartPart = noteStartPart;\n                            tone.noteEndPart = noteEndPart;\n                            tone.prevNote = prevNoteForThisTone;\n                            tone.nextNote = nextNoteForThisTone;\n                            tone.prevNotePitchIndex = i;\n                            tone.nextNotePitchIndex = i;\n                            tone.atNoteStart = atNoteStart;\n                            tone.passedEndOfNote = passedEndOfNote;\n                            tone.forceContinueAtStart = forceContinueAtStart && prevNoteForThisTone != null;\n                            tone.forceContinueAtEnd = forceContinueAtEnd && nextNoteForThisTone != null;\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                        }\n                    }\n                }\n                // Automatically free or release seamless tones if there's no new note to take over.\n                while (toneList.count() > toneCount) {\n                    const tone: Tone = toneList.popBack();\n                    const channel: Channel = song.channels[channelIndex];\n                    if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\n                        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\n                        this.releaseTone(instrumentState, tone);\n                    } else {\n                        this.freeTone(tone);\n                    }\n                }\n\n                this.clearTempMatchedPitchTones(toneCount, instrumentState);\n            }\n        }\n    }\n\n    private clearTempMatchedPitchTones(toneCount: number, instrumentState: InstrumentState): void {\n        for (let i: number = toneCount; i < this.tempMatchedPitchTones.length; i++) {\n            const oldTone: Tone | null = this.tempMatchedPitchTones[i];\n            if (oldTone != null) {\n                if (oldTone.isOnLastTick) {\n                    this.freeTone(oldTone);\n                } else {\n                    this.releaseTone(instrumentState, oldTone);\n                }\n                this.tempMatchedPitchTones[i] = null;\n            }\n        }\n    }\n\n\n    private playTone(channelIndex: number, bufferIndex: number, runLength: number, tone: Tone): void {\n        const channelState: ChannelState = this.channels[channelIndex];\n        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\n\n        if (instrumentState.synthesizer != null) instrumentState.synthesizer!(this, bufferIndex, runLength, tone, instrumentState);\n        tone.envelopeComputer.clearEnvelopes();\n    }\n\n    // Computes mod note position at the start and end of the window and \"plays\" the mod tone, setting appropriate mod data.\n    private playModTone(song: Song, channelIndex: number, samplesPerTick: number, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\n        const channel: Channel = song.channels[channelIndex];\n        const instrument: Instrument = channel.instruments[tone.instrumentIndex];\n\n        if (tone.note != null) {\n            const ticksIntoBar: number = this.getTicksIntoBar();\n            const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\n            const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\n            const tickSampleCountdown: number = this.tickSampleCountdown;\n            const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\n            const endRatio: number = 1.0 - (tickSampleCountdown - roundedSamplesPerTick) / samplesPerTick;\n            const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\n            const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\n            const tickTimeStart: number = Config.ticksPerPart * partTimeStart;\n            const tickTimeEnd: number = Config.ticksPerPart * partTimeEnd;\n            const endPinIndex: number = tone.note.getEndPinIndex(this.getCurrentPart());\n            const startPin: NotePin = tone.note.pins[endPinIndex - 1];\n            const endPin: NotePin = tone.note.pins[endPinIndex];\n            const startPinTick: number = (tone.note.start + startPin.time) * Config.ticksPerPart;\n            const endPinTick: number = (tone.note.start + endPin.time) * Config.ticksPerPart;\n            const ratioStart: number = (tickTimeStart - startPinTick) / (endPinTick - startPinTick);\n            const ratioEnd: number = (tickTimeEnd - startPinTick) / (endPinTick - startPinTick);\n            tone.expression = startPin.size + (endPin.size - startPin.size) * ratioStart;\n            tone.expressionDelta = (startPin.size + (endPin.size - startPin.size) * ratioEnd) - tone.expression;\n\n            Synth.modSynth(this, bufferIndex, roundedSamplesPerTick, tone, instrument);\n        }\n    }\n\n    private static computeChordExpression(chordSize: number): number {\n        return 1.0 / ((chordSize - 1) * 0.25 + 1.0);\n    }\n\n    private computeTone(song: Song, channelIndex: number, samplesPerTick: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\n        const roundedSamplesPerTick: number = Math.ceil(samplesPerTick);\n        const channel: Channel = song.channels[channelIndex];\n        const channelState: ChannelState = this.channels[channelIndex];\n        const instrument: Instrument = channel.instruments[tone.instrumentIndex];\n        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\n        instrumentState.awake = true;\n        instrumentState.tonesAddedInThisTick = true;\n        if (!instrumentState.computed) {\n            instrumentState.compute(this, instrument, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, tone.instrumentIndex);\n        }\n        const transition: Transition = instrument.getTransition();\n        const chord: Chord = instrument.getChord();\n        const chordExpression: number = chord.singleTone ? 1.0 : Synth.computeChordExpression(tone.chordSize);\n        const isNoiseChannel: boolean = song.getChannelIsNoise(channelIndex);\n        const intervalScale: number = isNoiseChannel ? Config.noiseInterval : 1;\n        const secondsPerPart: number = Config.ticksPerPart * samplesPerTick / this.samplesPerSecond;\n        const sampleTime: number = 1.0 / this.samplesPerSecond;\n        const beatsPerPart: number = 1.0 / Config.partsPerBeat;\n        const ticksIntoBar: number = this.getTicksIntoBar();\n        const partTimeStart: number = (ticksIntoBar) / Config.ticksPerPart;\n        const partTimeEnd: number = (ticksIntoBar + 1.0) / Config.ticksPerPart;\n        const currentPart: number = this.getCurrentPart();\n\n        let specialIntervalMult: number = 1.0;\n        tone.specialIntervalExpressionMult = 1.0;\n\n        //if (synth.isModActive(ModSetting.mstPan, channelIndex, tone.instrumentIndex)) {\n        //    startPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, false);\n        //    endPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, true);\n        //}\n\n        let toneIsOnLastTick: boolean = shouldFadeOutFast;\n        let intervalStart: number = 0.0;\n        let intervalEnd: number = 0.0;\n        let fadeExpressionStart: number = 1.0;\n        let fadeExpressionEnd: number = 1.0;\n        let chordExpressionStart: number = chordExpression;\n        let chordExpressionEnd: number = chordExpression;\n\n        let expressionReferencePitch: number = 16; // A low \"E\" as a MIDI pitch.\n        let basePitch: number = Config.keys[song.key].basePitch + (Config.pitchesPerOctave * song.octave);\n        let baseExpression: number = 1.0;\n        let pitchDamping: number = 48;\n        if (instrument.type == InstrumentType.spectrum) {\n            baseExpression = Config.spectrumBaseExpression;\n            if (isNoiseChannel) {\n                basePitch = Config.spectrumBasePitch;\n                baseExpression *= 2.0; // Note: spectrum is louder for drum channels than pitch channels!\n            }\n            expressionReferencePitch = Config.spectrumBasePitch;\n            pitchDamping = 28;\n        } else if (instrument.type == InstrumentType.drumset) {\n            basePitch = Config.spectrumBasePitch;\n            baseExpression = Config.drumsetBaseExpression;\n            expressionReferencePitch = basePitch;\n        } else if (instrument.type == InstrumentType.noise) {\n            // dogebox2 code, makes basic noise affected by keys in pitch channels\n            basePitch = isNoiseChannel ? Config.chipNoises[instrument.chipNoise].basePitch : basePitch + Config.chipNoises[instrument.chipNoise].basePitch - 12;\n            // maybe also lower expression in pitch channels?\n            baseExpression = Config.noiseBaseExpression;\n            expressionReferencePitch = basePitch;\n            pitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\n        } else if (instrument.type == InstrumentType.fm || instrument.type == InstrumentType.fm6op) {\n            baseExpression = Config.fmBaseExpression;\n        } else if (instrument.type == InstrumentType.chip){\n                baseExpression = Config.chipBaseExpression;\n\t\t\t\tif (Config.chipWaves[instrument.chipWave].isCustomSampled) {\n\t\t\t\t\tif (Config.chipWaves[instrument.chipWave].isPercussion){\n\t\t\t\t\t\tbasePitch = -84.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length/Config.chipWaves[instrument.chipWave].sampleRate!) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey!);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\telse {\n\t\t\t\t\t\tbasePitch += -96.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length/Config.chipWaves[instrument.chipWave].sampleRate!) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey!); \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (Config.chipWaves[instrument.chipWave].isSampled && !Config.chipWaves[instrument.chipWave].isPercussion) {\n\t\t\t\t\t\tbasePitch = basePitch - 63 + Config.chipWaves[instrument.chipWave].extraSampleDetune!\n\t\t\t\t\t}\n\t\t\t\t\telse if (Config.chipWaves[instrument.chipWave].isSampled && Config.chipWaves[instrument.chipWave].isPercussion) {\n\t\t\t\t\tbasePitch = -51 + Config.chipWaves[instrument.chipWave].extraSampleDetune!;\n\t\t\t\t\t}\n\t\t\t\t}\n            } else if (instrument.type == InstrumentType.customChipWave) {\n            baseExpression = Config.chipBaseExpression;\n        } else if (instrument.type == InstrumentType.harmonics) {\n            baseExpression = Config.harmonicsBaseExpression;\n        } else if (instrument.type == InstrumentType.pwm) {\n            baseExpression = Config.pwmBaseExpression;\n        } else if (instrument.type == InstrumentType.supersaw) {\n\t\t\tbaseExpression = Config.supersawBaseExpression;\n        } else if (instrument.type == InstrumentType.pickedString) {\n            baseExpression = Config.pickedStringBaseExpression;\n        } else if (instrument.type == InstrumentType.mod) {\n            baseExpression = 1.0;\n            expressionReferencePitch = 0;\n            pitchDamping = 1.0;\n            basePitch = 0;\n        } else {\n            throw new Error(\"Unknown instrument type in computeTone.\");\n        }\n\n        if ((tone.atNoteStart && !transition.isSeamless && !tone.forceContinueAtStart) || tone.freshlyAllocated) {\n            tone.reset();\n\t\t\t\t\t\t // advloop addition\n                         if (instrument.type == InstrumentType.chip && instrument.isUsingAdvancedLoopControls) {\n                const chipWaveLength = Config.rawRawChipWaves[instrument.chipWave].samples.length - 1;\n                const firstOffset = instrument.chipWaveStartOffset / chipWaveLength;\n                // const lastOffset = (chipWaveLength - 0.01) / chipWaveLength;\n                // @TODO: This is silly and I should actually figure out how to\n                // properly keep lastOffset as 1.0 and not get it wrapped back\n                // to 0 once it's in `Synth.loopableChipSynth`.\n                const lastOffset = 0.999999999999999;\n                for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {\n                    tone.phases[i] = instrument.chipWavePlayBackwards ? Math.max(0, Math.min(lastOffset, firstOffset)) : Math.max(0, firstOffset);\n                    tone.directions[i] = instrument.chipWavePlayBackwards ? -1 : 1;\n                    tone.chipWaveCompletions[i] = 0;\n                    tone.chipWavePrevWaves[i] = 0;\n                    tone.chipWaveCompletionsLastWave[i] = 0;\n                }\n                // console.log(tone.directions);\n            }\n                // advloop addition\n        }\n        tone.freshlyAllocated = false;\n\n        for (let i: number = 0; i < Config.maxPitchOrOperatorCount; i++) {\n            tone.phaseDeltas[i] = 0.0;\n            tone.phaseDeltaScales[i] = 0.0;\n            tone.operatorExpressions[i] = 0.0;\n            tone.operatorExpressionDeltas[i] = 0.0;\n        }\n        tone.expression = 0.0;\n        tone.expressionDelta = 0.0;\n        for (let i: number = 0; i < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); i++) {\n            tone.operatorWaves[i] = Synth.getOperatorWave(instrument.operators[i].waveform, instrument.operators[i].pulseWidth);\n        }\n\n        if (released) {\n            const startTicksSinceReleased: number = tone.ticksSinceReleased;\n            const endTicksSinceReleased: number = tone.ticksSinceReleased + 1.0;\n            intervalStart = intervalEnd = tone.lastInterval;\n            const fadeOutTicks: number = Math.abs(instrument.getFadeOutTicks());\n            fadeExpressionStart = Synth.noteSizeToVolumeMult((1.0 - startTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\n            fadeExpressionEnd = Synth.noteSizeToVolumeMult((1.0 - endTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\n\n            if (shouldFadeOutFast) {\n                fadeExpressionEnd = 0.0;\n            }\n\n            if (tone.ticksSinceReleased + 1 >= fadeOutTicks) toneIsOnLastTick = true;\n        } else if (tone.note == null) {\n            fadeExpressionStart = fadeExpressionEnd = 1.0;\n            tone.lastInterval = 0;\n            tone.ticksSinceReleased = 0;\n            tone.liveInputSamplesHeld += roundedSamplesPerTick;\n        } else {\n            const note: Note = tone.note;\n            const nextNote: Note | null = tone.nextNote;\n\n            const noteStartPart: number = tone.noteStartPart;\n            const noteEndPart: number = tone.noteEndPart;\n\n\n            const endPinIndex: number = note.getEndPinIndex(currentPart);\n            const startPin: NotePin = note.pins[endPinIndex - 1];\n            const endPin: NotePin = note.pins[endPinIndex];\n            const noteStartTick: number = noteStartPart * Config.ticksPerPart;\n            const noteEndTick: number = noteEndPart * Config.ticksPerPart;\n            const pinStart: number = (note.start + startPin.time) * Config.ticksPerPart;\n            const pinEnd: number = (note.start + endPin.time) * Config.ticksPerPart;\n\n            tone.ticksSinceReleased = 0;\n\n            const tickTimeStart: number = currentPart * Config.ticksPerPart + this.tick;\n            const tickTimeEnd: number = tickTimeStart + 1.0;\n            const noteTicksPassedTickStart: number = tickTimeStart - noteStartTick;\n            const noteTicksPassedTickEnd: number = tickTimeEnd - noteStartTick;\n            const pinRatioStart: number = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\n            const pinRatioEnd: number = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));\n            fadeExpressionStart = 1.0;\n            fadeExpressionEnd = 1.0;\n            intervalStart = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\n            intervalEnd = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\n            tone.lastInterval = intervalEnd;\n\n            if ((!transition.isSeamless && !tone.forceContinueAtEnd) || nextNote == null) {\n                const fadeOutTicks: number = -instrument.getFadeOutTicks();\n                if (fadeOutTicks > 0.0) {\n                    // If the tone should fade out before the end of the note, do so here.\n                    const noteLengthTicks: number = noteEndTick - noteStartTick;\n                    fadeExpressionStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / fadeOutTicks);\n                    fadeExpressionEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / fadeOutTicks);\n                    if (tickTimeEnd >= noteStartTick + noteLengthTicks) toneIsOnLastTick = true;\n                }\n            }\n\n        }\n\n        tone.isOnLastTick = toneIsOnLastTick;\n\n        let tmpNoteFilter: FilterSettings = instrument.noteFilter;\n        let startPoint: FilterControlPoint;\n        let endPoint: FilterControlPoint;\n\n        if (instrument.noteFilterType) {\n            // Simple EQ filter (old style). For analysis, using random filters from normal style since they are N/A in this context.\n            const noteFilterSettingsStart: FilterSettings = instrument.noteFilter;\n            if (instrument.noteSubFilters[1] == null)\n                instrument.noteSubFilters[1] = new FilterSettings();\n            const noteFilterSettingsEnd: FilterSettings = instrument.noteSubFilters[1];\n\n            // Change location based on slider values\n            let startSimpleFreq: number = instrument.noteFilterSimpleCut;\n            let startSimpleGain: number = instrument.noteFilterSimplePeak;\n            let endSimpleFreq: number = instrument.noteFilterSimpleCut;\n            let endSimpleGain: number = instrument.noteFilterSimplePeak;\n            let filterChanges: boolean = false;\n\n            if (this.isModActive(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex)) {\n                startSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, false);\n                endSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, true);\n                filterChanges = true;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex)) {\n                startSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, false);\n                endSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, true);\n                filterChanges = true;\n            }\n\n            noteFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, !filterChanges);\n            noteFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain, !filterChanges);\n\n            startPoint = noteFilterSettingsStart.controlPoints[0];\n            endPoint = noteFilterSettingsEnd.controlPoints[0];\n\n            // Temporarily override so that envelope computer uses appropriate computed note filter\n            instrument.noteFilter = noteFilterSettingsStart;\n            instrument.tmpNoteFilterStart = noteFilterSettingsStart;\n        }\n\n        // Compute envelopes *after* resetting the tone, otherwise the envelope computer gets reset too!\n        const envelopeComputer: EnvelopeComputer = tone.envelopeComputer;\n        let useEnvelopeSpeed: number = Config.arpSpeedScale[instrument.envelopeSpeed];\n        if (this.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, tone.instrumentIndex)) {\n            useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, this.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, tone.instrumentIndex, false)));\n            if (Number.isInteger(useEnvelopeSpeed)) {\n                useEnvelopeSpeed = Config.arpSpeedScale[useEnvelopeSpeed];\n            } else {\n                // Linear interpolate envelope values\n                useEnvelopeSpeed = (1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)];\n            }\n        }\n        envelopeComputer.computeEnvelopes(instrument, currentPart, instrumentState.envelopeTime, Config.ticksPerPart * partTimeStart, samplesPerTick / this.samplesPerSecond, tone, useEnvelopeSpeed);\n        const envelopeStarts: number[] = tone.envelopeComputer.envelopeStarts;\n        const envelopeEnds: number[] = tone.envelopeComputer.envelopeEnds;\n        instrument.noteFilter = tmpNoteFilter;\n\n        if (tone.note != null && transition.slides) {\n            // Slide interval and chordExpression at the start and/or end of the note if necessary.\n            const prevNote: Note | null = tone.prevNote;\n            const nextNote: Note | null = tone.nextNote;\n            if (prevNote != null) {\n                const intervalDiff: number = prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval - tone.pitches[0];\n                if (envelopeComputer.prevSlideStart) intervalStart += intervalDiff * envelopeComputer.prevSlideRatioStart;\n                if (envelopeComputer.prevSlideEnd) intervalEnd += intervalDiff * envelopeComputer.prevSlideRatioEnd;\n                if (!chord.singleTone) {\n                    const chordSizeDiff: number = prevNote.pitches.length - tone.chordSize;\n                    if (envelopeComputer.prevSlideStart) chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioStart);\n                    if (envelopeComputer.prevSlideEnd) chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioEnd);\n                }\n            }\n            if (nextNote != null) {\n                const intervalDiff: number = nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + tone.note.pins[tone.note.pins.length - 1].interval);\n                if (envelopeComputer.nextSlideStart) intervalStart += intervalDiff * envelopeComputer.nextSlideRatioStart;\n                if (envelopeComputer.nextSlideEnd) intervalEnd += intervalDiff * envelopeComputer.nextSlideRatioEnd;\n                if (!chord.singleTone) {\n                    const chordSizeDiff: number = nextNote.pitches.length - tone.chordSize;\n                    if (envelopeComputer.nextSlideStart) chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioStart);\n                    if (envelopeComputer.nextSlideEnd) chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioEnd);\n                }\n            }\n        }\n\n        if (effectsIncludePitchShift(instrument.effects)) {\n            let pitchShift: number = Config.justIntonationSemitones[instrument.pitchShift] / intervalScale;\n            let pitchShiftScalarStart: number = 1.0;\n            let pitchShiftScalarEnd: number = 1.0;\n            if (this.isModActive(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex)) {\n                pitchShift = Config.justIntonationSemitones[Config.justIntonationSemitones.length - 1];\n                pitchShiftScalarStart = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pitchShiftCenter);\n                pitchShiftScalarEnd = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pitchShiftCenter);\n            }\n            const envelopeStart: number = envelopeStarts[EnvelopeComputeIndex.pitchShift];\n            const envelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.pitchShift];\n            intervalStart += pitchShift * envelopeStart * pitchShiftScalarStart;\n            intervalEnd += pitchShift * envelopeEnd * pitchShiftScalarEnd;\n        }\n        if (effectsIncludeDetune(instrument.effects) || this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\n            const envelopeStart: number = envelopeStarts[EnvelopeComputeIndex.detune];\n            const envelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.detune];\n            let modDetuneStart: number = instrument.detune;\n            let modDetuneEnd: number = instrument.detune;\n            if (this.isModActive(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex)) {\n                modDetuneStart = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, false) + Config.detuneCenter;\n                modDetuneEnd = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, true) + Config.detuneCenter;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\n                modDetuneStart += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, false);\n                modDetuneEnd += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, true);\n            }\n            intervalStart += Synth.detuneToCents(modDetuneStart) * envelopeStart * Config.pitchesPerOctave / (12.0 * 100.0);\n            intervalEnd += Synth.detuneToCents(modDetuneEnd) * envelopeEnd * Config.pitchesPerOctave / (12.0 * 100.0);\n        }\n\n        if (effectsIncludeVibrato(instrument.effects)) {\n            let delayTicks: number;\n            let vibratoAmplitudeStart: number;\n            let vibratoAmplitudeEnd: number;\n            // Custom vibrato\n            if (instrument.vibrato == Config.vibratos.length) {\n                delayTicks = instrument.vibratoDelay * 2; // Delay was changed from parts to ticks in BB v9\n                // Special case: if vibrato delay is max, NEVER vibrato.\n                if (instrument.vibratoDelay == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol)\n                    delayTicks = Number.POSITIVE_INFINITY;\n                vibratoAmplitudeStart = instrument.vibratoDepth;\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\n            } else {\n                delayTicks = Config.vibratos[instrument.vibrato].delayTicks;\n                vibratoAmplitudeStart = Config.vibratos[instrument.vibrato].amplitude;\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\n            }\n\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex)) {\n                delayTicks = this.getModValue(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex, false) * 2; // Delay was changed from parts to ticks in BB v9\n                if (delayTicks == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol * 2)\n                    delayTicks = Number.POSITIVE_INFINITY;\n\n            }\n\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex)) {\n                vibratoAmplitudeStart = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, false) / 25;\n                vibratoAmplitudeEnd = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, true) / 25;\n            }\n\n\n            // To maintain pitch continuity, (mostly for picked string which retriggers impulse\n            // otherwise) remember the vibrato at the end of this run and reuse it at the start\n            // of the next run if available.\n            let vibratoStart: number;\n            if (tone.prevVibrato != null) {\n                vibratoStart = tone.prevVibrato;\n            } else {\n                let vibratoLfoStart: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.vibratoTime);\n                const vibratoDepthEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.vibratoDepth];\n                vibratoStart = vibratoAmplitudeStart * vibratoLfoStart * vibratoDepthEnvelopeStart;\n                if (delayTicks > 0.0) {\n                    const ticksUntilVibratoStart: number = delayTicks - envelopeComputer.noteTicksStart;\n                    vibratoStart *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoStart / 2.0));\n                }\n            }\n\n            let vibratoLfoEnd: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.nextVibratoTime);\n            const vibratoDepthEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.vibratoDepth];\n            if (instrument.type != InstrumentType.mod) {\n                let vibratoEnd: number = vibratoAmplitudeEnd * vibratoLfoEnd * vibratoDepthEnvelopeEnd;\n                if (delayTicks > 0.0) {\n                    const ticksUntilVibratoEnd: number = delayTicks - envelopeComputer.noteTicksEnd;\n                    vibratoEnd *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoEnd / 2.0));\n                }\n\n                tone.prevVibrato = vibratoEnd;\n\n                intervalStart += vibratoStart;\n                intervalEnd += vibratoEnd;\n            }\n        }\n\n        if ((!transition.isSeamless && !tone.forceContinueAtStart) || tone.prevNote == null) {\n            // Fade in the beginning of the note.\n            const fadeInSeconds: number = instrument.getFadeInSeconds();\n            if (fadeInSeconds > 0.0) {\n                fadeExpressionStart *= Math.min(1.0, envelopeComputer.noteSecondsStart / fadeInSeconds);\n                fadeExpressionEnd *= Math.min(1.0, envelopeComputer.noteSecondsEnd / fadeInSeconds);\n            }\n        }\n\n\n        if (instrument.type == InstrumentType.drumset && tone.drumsetPitch == null) {\n            // It's possible that the note will change while the user is editing it,\n            // but the tone's pitches don't get updated because the tone has already\n            // ended and is fading out. To avoid an array index out of bounds error, clamp the pitch.\n            tone.drumsetPitch = tone.pitches[0];\n            if (tone.note != null) tone.drumsetPitch += tone.note.pickMainInterval();\n            tone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\n        }\n\n        let noteFilterExpression: number = envelopeComputer.lowpassCutoffDecayVolumeCompensation;\n        if (!effectsIncludeNoteFilter(instrument.effects)) {\n            tone.noteFilterCount = 0;\n        } else {\n\n            const noteAllFreqsEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterAllFreqs];\n            const noteAllFreqsEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterAllFreqs];\n\n            // Simple note filter\n            if (instrument.noteFilterType) {\n                const noteFreqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterFreq0];\n                const noteFreqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterFreq0];\n                const notePeakEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterGain0];\n                const notePeakEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterGain0];\n\n                startPoint!.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\n                endPoint!.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\n\n                if (tone.noteFilters.length < 1) tone.noteFilters[0] = new DynamicBiquadFilter();\n                tone.noteFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint!.type == FilterType.lowPass);\n                noteFilterExpression *= startPoint!.getVolumeCompensationMult();\n\n                tone.noteFilterCount = 1;\n            }\n            else {\n                const noteFilterSettings: FilterSettings = (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter;\n\n                for (let i: number = 0; i < noteFilterSettings.controlPointCount; i++) {\n                    const noteFreqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterFreq0 + i];\n                    const noteFreqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterFreq0 + i];\n                    const notePeakEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterGain0 + i];\n                    const notePeakEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterGain0 + i];\n                    let startPoint: FilterControlPoint = noteFilterSettings.controlPoints[i];\n                    const endPoint: FilterControlPoint = (instrument.tmpNoteFilterEnd != null && instrument.tmpNoteFilterEnd.controlPoints[i] != null) ? instrument.tmpNoteFilterEnd.controlPoints[i] : noteFilterSettings.controlPoints[i];\n\n                    // If switching dot type, do it all at once and do not try to interpolate since no valid interpolation exists.\n                    if (startPoint.type != endPoint.type) {\n                        startPoint = endPoint;\n                    }\n\n                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\n                    endPoint.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\n                    if (tone.noteFilters.length <= i) tone.noteFilters[i] = new DynamicBiquadFilter();\n                    tone.noteFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                    noteFilterExpression *= startPoint.getVolumeCompensationMult();\n                }\n                tone.noteFilterCount = noteFilterSettings.controlPointCount;\n            }\n        }\n\n        if (instrument.type == InstrumentType.drumset) {\n            const drumsetFilterEnvelope: Envelope = instrument.getDrumsetEnvelope(tone.drumsetPitch!);\n            //const timeScale: number = Config.arpSpeedScale[instrument.envelopeSpeed];\n            //secondsPerTick *= timeScale;\n            // If the drumset lowpass cutoff decays, compensate by increasing expression.\n            noteFilterExpression *= EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(drumsetFilterEnvelope)\n\n            // Drumset filters use the same envelope timing as the rest of the envelopes, but do not include support for slide transitions.\n            let drumsetFilterEnvelopeStart: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.noteSecondsStart, beatsPerPart * partTimeStart, envelopeComputer.noteSizeStart);\n\n            // Apply slide interpolation to drumset envelope.\n            if (envelopeComputer.prevSlideStart) {\n                const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.prevNoteSecondsStart, beatsPerPart * partTimeStart, envelopeComputer.prevNoteSize);\n                drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * envelopeComputer.prevSlideRatioStart;\n            }\n            if (envelopeComputer.nextSlideStart) {\n                const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 0.0, beatsPerPart * partTimeStart, envelopeComputer.nextNoteSize);\n                drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * envelopeComputer.nextSlideRatioStart;\n            }\n            \n            let drumsetFilterEnvelopeEnd: number = drumsetFilterEnvelopeStart;\n\n            if ( instrument.discreteEnvelope == false ) {\n                drumsetFilterEnvelopeEnd = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.noteSecondsEnd, beatsPerPart * partTimeEnd, envelopeComputer.noteSizeEnd);\n\n                if (envelopeComputer.prevSlideEnd) {\n                    const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.prevNoteSecondsEnd, beatsPerPart * partTimeEnd, envelopeComputer.prevNoteSize);\n                    drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * envelopeComputer.prevSlideRatioEnd;\n                }\n                if (envelopeComputer.nextSlideEnd) {\n                    const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 0.0, beatsPerPart * partTimeEnd, envelopeComputer.nextNoteSize);\n                    drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * envelopeComputer.nextSlideRatioEnd;\n                }\n            }\n\n            const point: FilterControlPoint = this.tempDrumSetControlPoint;\n            point.type = FilterType.lowPass;\n            point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(0.5);\n            point.freq = FilterControlPoint.getRoundedSettingValueFromHz(8000.0);\n            // Drumset envelopes are warped to better imitate the legacy simplified 2nd order lowpass at ~48000Hz that I used to use.\n            point.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeStart * (1.0 + drumsetFilterEnvelopeStart), 1.0);\n            point.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeEnd * (1.0 + drumsetFilterEnvelopeEnd), 1.0);\n            if (tone.noteFilters.length == tone.noteFilterCount) tone.noteFilters[tone.noteFilterCount] = new DynamicBiquadFilter();\n            tone.noteFilters[tone.noteFilterCount].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, true);\n            tone.noteFilterCount++;\n        }\n\n        noteFilterExpression = Math.min(3.0, noteFilterExpression);\n\n        if (instrument.type == InstrumentType.fm || instrument.type == InstrumentType.fm6op) {\n            // phase modulation!\n\n            let sineExpressionBoost: number = 1.0;\n            let totalCarrierExpression: number = 0.0;\n\n            let arpeggioInterval: number = 0;\n            const arpeggiates: boolean = chord.arpeggiates;\n            if (tone.pitchCount > 1 && arpeggiates) {\n                const arpeggio: number = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\n                arpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\n            }\n\n\n            const carrierCount: number = (instrument.type == InstrumentType.fm6op ? instrument.customAlgorithm.carrierCount : Config.algorithms[instrument.algorithm].carrierCount);\n            for (let i: number = 0; i < (instrument.type == InstrumentType.fm6op? 6 : Config.operatorCount); i++) {\n\n                const associatedCarrierIndex: number = (instrument.type == InstrumentType.fm6op ? instrument.customAlgorithm.associatedCarrier[i]-1:Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1);\n                const pitch: number = tone.pitches[arpeggiates ? 0 : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\n                const freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\n                const interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\n                const pitchStart: number = basePitch + (pitch + intervalStart) * intervalScale + interval;\n                const pitchEnd: number = basePitch + (pitch + intervalEnd) * intervalScale + interval;\n                const baseFreqStart: number = Instrument.frequencyFromPitch(pitchStart);\n                const baseFreqEnd: number = Instrument.frequencyFromPitch(pitchEnd);\n                const hzOffset: number = Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\n                const targetFreqStart: number = freqMult * baseFreqStart + hzOffset;\n                const targetFreqEnd: number = freqMult * baseFreqEnd + hzOffset;\n\n                \n                const freqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.operatorFrequency0 + i];\n                const freqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.operatorFrequency0 + i];\n                let freqStart: number;\n                let freqEnd: number;\n                if (freqEnvelopeStart != 1.0 || freqEnvelopeEnd != 1.0) {\n                    freqStart = Math.pow(2.0, Math.log2(targetFreqStart / baseFreqStart) * freqEnvelopeStart) * baseFreqStart;\n                    freqEnd = Math.pow(2.0, Math.log2(targetFreqEnd / baseFreqEnd) * freqEnvelopeEnd) * baseFreqEnd;\n                } else {\n                    freqStart = targetFreqStart;\n                    freqEnd = targetFreqEnd;\n                }\n                tone.phaseDeltas[i] = freqStart * sampleTime;\n                tone.phaseDeltaScales[i] = Math.pow(freqEnd / freqStart, 1.0 / roundedSamplesPerTick);\n\n                let amplitudeStart: number = instrument.operators[i].amplitude;\n                let amplitudeEnd: number = instrument.operators[i].amplitude;\n                if (i < 4){\n                    if (this.isModActive(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex)) {\n                        amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, false) / 15.0;\n                        amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, true) / 15.0;\n                    }\n                } else {\n                    if (this.isModActive(Config.modulators.dictionary[\"fm slider 5\"].index + i-4, channelIndex, tone.instrumentIndex)) {\n                        amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 5\"].index + i-4, channelIndex, tone.instrumentIndex, false) / 15.0;\n                        amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 5\"].index + i-4, channelIndex, tone.instrumentIndex, true) / 15.0;\n                    }\n                }\n\n                const amplitudeCurveStart: number = Synth.operatorAmplitudeCurve(amplitudeStart);\n                const amplitudeCurveEnd: number = Synth.operatorAmplitudeCurve(amplitudeEnd);\n                const amplitudeMultStart: number = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\n                const amplitudeMultEnd: number = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\n\n                let expressionStart: number = amplitudeMultStart;\n                let expressionEnd: number = amplitudeMultEnd;\n\n\n                if (i < carrierCount) {\n                    // carrier\n                    let pitchExpressionStart: number;\n                    if (tone.prevPitchExpressions[i] != null) {\n                        pitchExpressionStart = tone.prevPitchExpressions[i]!;\n                    } else {\n                        pitchExpressionStart = Math.pow(2.0, -(pitchStart - expressionReferencePitch) / pitchDamping);\n                    }\n                    const pitchExpressionEnd: number = Math.pow(2.0, -(pitchEnd - expressionReferencePitch) / pitchDamping);\n                    tone.prevPitchExpressions[i] = pitchExpressionEnd;\n                    expressionStart *= pitchExpressionStart;\n                    expressionEnd *= pitchExpressionEnd;\n\n                    totalCarrierExpression += amplitudeCurveEnd;\n                } else {\n                    // modulator\n                    expressionStart *= Config.sineWaveLength * 1.5;\n                    expressionEnd *= Config.sineWaveLength * 1.5;\n\n                    sineExpressionBoost *= 1.0 - Math.min(1.0, instrument.operators[i].amplitude / 15);\n                }\n\n                expressionStart *= envelopeStarts[EnvelopeComputeIndex.operatorAmplitude0 + i];\n                expressionEnd *= envelopeEnds[EnvelopeComputeIndex.operatorAmplitude0 + i];\n\n                // Check for mod-related volume delta\n                // @jummbus - This amplification is also applied to modulator FM operators which distorts the sound.\n                // The fix is to apply this only to carriers, but as this is a legacy bug and it can cause some interesting sounds, it's left in.\n                // You can use the mix volume modulator instead to avoid this effect.\n\n                if (this.isModActive(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex)) {\n                    // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\n                    const startVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, false);\n                    const endVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, true);\n                    expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n                    expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n                }\n\n                tone.operatorExpressions[i] = expressionStart;\n                tone.operatorExpressionDeltas[i] = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n\n            }\n\n            sineExpressionBoost *= (Math.pow(2.0, (2.0 - 1.4 * instrument.feedbackAmplitude / 15.0)) - 1.0) / 3.0;\n            sineExpressionBoost *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierExpression - 1) / 2.0);\n            sineExpressionBoost = 1.0 + sineExpressionBoost * 3.0;\n            const expressionStart: number = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionStart * chordExpressionStart * envelopeStarts[EnvelopeComputeIndex.noteVolume];\n            const expressionEnd: number = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionEnd * chordExpressionEnd * envelopeEnds[EnvelopeComputeIndex.noteVolume];\n            tone.expression = expressionStart;\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n\n\n            let useFeedbackAmplitudeStart: number = instrument.feedbackAmplitude;\n            let useFeedbackAmplitudeEnd: number = instrument.feedbackAmplitude;\n            if (this.isModActive(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex)) {\n                useFeedbackAmplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, false) / 15.0;\n                useFeedbackAmplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, true) / 15.0;\n            }\n\n            let feedbackAmplitudeStart: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;\n            const feedbackAmplitudeEnd: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;\n\n            let feedbackStart: number = feedbackAmplitudeStart * envelopeStarts[EnvelopeComputeIndex.feedbackAmplitude];\n            let feedbackEnd: number = feedbackAmplitudeEnd * envelopeEnds[EnvelopeComputeIndex.feedbackAmplitude];\n            tone.feedbackMult = feedbackStart;\n            tone.feedbackDelta = (feedbackEnd - feedbackStart) / roundedSamplesPerTick;\n\n\n        } else {\n            const freqEndRatio: number = Math.pow(2.0, (intervalEnd - intervalStart) * intervalScale / 12.0);\n\t\t\tconst basePhaseDeltaScale: number = Math.pow(freqEndRatio, 1.0 / roundedSamplesPerTick);\n\n\n            let pitch: number = tone.pitches[0];\n            if (tone.pitchCount > 1 && (chord.arpeggiates || chord.customInterval)) {\n                const arpeggio: number = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\n                if (chord.customInterval) {\n                    const intervalOffset: number = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\n                    specialIntervalMult = Math.pow(2.0, intervalOffset / 12.0);\n                    tone.specialIntervalExpressionMult = Math.pow(2.0, -intervalOffset / pitchDamping);\n                } else {\n                    pitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];\n                }\n            }\n\n            const startPitch: number = basePitch + (pitch + intervalStart) * intervalScale;\n            const endPitch: number = basePitch + (pitch + intervalEnd) * intervalScale;\n            let pitchExpressionStart: number;\n            // TODO: use the second element of prevPitchExpressions for the unison voice, compute a separate expression delta for it.\n            if (tone.prevPitchExpressions[0] != null) {\n                pitchExpressionStart = tone.prevPitchExpressions[0]!;\n            } else {\n                pitchExpressionStart = Math.pow(2.0, -(startPitch - expressionReferencePitch) / pitchDamping);\n            }\n            const pitchExpressionEnd: number = Math.pow(2.0, -(endPitch - expressionReferencePitch) / pitchDamping);\n            tone.prevPitchExpressions[0] = pitchExpressionEnd;\n            let settingsExpressionMult: number = baseExpression * noteFilterExpression;\n\n            if (instrument.type == InstrumentType.noise) {\n                settingsExpressionMult *= Config.chipNoises[instrument.chipNoise].expression;\n            }\n            if (instrument.type == InstrumentType.chip) {\n                settingsExpressionMult *= Config.chipWaves[instrument.chipWave].expression;\n            }\n            if (instrument.type == InstrumentType.pwm) {\n                const basePulseWidth: number = getPulseWidthRatio(instrument.pulseWidth);\n\n                // Check for PWM mods to this instrument\n                let pulseWidthModStart: number = basePulseWidth;\n                let pulseWidthModEnd: number = basePulseWidth;\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\n                }\n\n                const pulseWidthStart: number = pulseWidthModStart * envelopeStarts[EnvelopeComputeIndex.pulseWidth];\n                const pulseWidthEnd: number = pulseWidthModEnd * envelopeEnds[EnvelopeComputeIndex.pulseWidth];\n                tone.pulseWidth = pulseWidthStart;\n                tone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / roundedSamplesPerTick;\n\n                //decimal offset mods\n                let decimalOffsetModStart: number = instrument.decimalOffset;\n                if (this.isModActive(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex)) {\n                    decimalOffsetModStart = this.getModValue(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex, false);\n                }\n \n                const decimalOffsetStart: number = decimalOffsetModStart * envelopeStarts[EnvelopeComputeIndex.decimalOffset];\n                tone.decimalOffset = decimalOffsetStart;\n                \n                tone.pulseWidth -= (tone.decimalOffset) / 10000;\n            }\n            if (instrument.type == InstrumentType.pickedString) {\n                // Check for sustain mods\n                let useSustainStart: number = instrument.stringSustain;\n                let useSustainEnd: number = instrument.stringSustain;\n                if (this.isModActive(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex)) {\n                    useSustainStart = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, false);\n                    useSustainEnd = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, true);\n                }\n\n                tone.stringSustainStart = useSustainStart;\n                tone.stringSustainEnd = useSustainEnd;\n\n                // Increase expression to compensate for string decay.\n                settingsExpressionMult *= Math.pow(2.0, 0.7 * (1.0 - useSustainStart / (Config.stringSustainRange - 1)));\n\n            }\n\n            const startFreq: number = Instrument.frequencyFromPitch(startPitch);\n            if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString) {\n                // These instruments have two waves at different frequencies for the unison feature.\n                //const unison: Unison = Config.unisons[instrument.unison];\n                const unisonVoices: number = instrument.unisonVoices;\n                const unisonSpread: number = instrument.unisonSpread;\n                const unisonOffset: number = instrument.unisonOffset;\n                const unisonExpression: number = instrument.unisonExpression;\n                //const unisonSign: number = Config.unisons[instrument.unisonSign];\n                //const unison: Unison = [voices:, ];\n                const voiceCountExpression: number = (instrument.type == InstrumentType.pickedString) ? 1 : unisonVoices / 2.0;\n                settingsExpressionMult *= unisonExpression * voiceCountExpression;\n                const unisonEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.unison];\n                const unisonEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.unison];\n                const unisonAStart: number = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeStart / 12.0);\n                const unisonAEnd: number = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeEnd / 12.0);\n                const unisonBStart: number = Math.pow(2.0, (unisonOffset - unisonSpread) * unisonEnvelopeStart / 12.0) * specialIntervalMult;\n                const unisonBEnd: number = Math.pow(2.0, (unisonOffset- unisonSpread) * unisonEnvelopeEnd / 12.0) * specialIntervalMult;\n                tone.phaseDeltas[0] = startFreq * sampleTime * unisonAStart;\n                tone.phaseDeltas[1] = startFreq * sampleTime * unisonBStart;\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale * Math.pow(unisonAEnd / unisonAStart, 1.0 / roundedSamplesPerTick);\n                tone.phaseDeltaScales[1] = basePhaseDeltaScale * Math.pow(unisonBEnd / unisonBStart, 1.0 / roundedSamplesPerTick);\n            } else {\n                tone.phaseDeltas[0] = startFreq * sampleTime;\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale;\n            }\n\n             // TODO: make expressionStart and expressionEnd variables earlier and modify those\n\t\t\t// instead of these supersawExpression variables.\n\t\t\tlet supersawExpressionStart: number = 1.0;\n\t\t\tlet supersawExpressionEnd: number = 1.0;\n\t\t\tif (instrument.type == InstrumentType.supersaw) {\n\t\t\t\tconst minFirstVoiceAmplitude: number = 1.0 / Math.sqrt(Config.supersawVoiceCount);\n\n                // Dynamism mods\n                let useDynamismStart: number = instrument.supersawDynamism / Config.supersawDynamismMax;\n                let useDynamismEnd: number = instrument.supersawDynamism / Config.supersawDynamismMax;\n                if (this.isModActive(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex)) {\n                    useDynamismStart = (this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawDynamismMax;\n                    useDynamismEnd = (this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawDynamismMax;\n                }\n\n\t\t\t\tconst curvedDynamismStart: number = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismStart * envelopeStarts[EnvelopeComputeIndex.supersawDynamism]), 0.2);\n\t\t\t\tconst curvedDynamismEnd:   number = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismEnd * envelopeEnds[  EnvelopeComputeIndex.supersawDynamism]), 0.2);\n\t\t\t\tconst firstVoiceAmplitudeStart: number = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismStart);\n\t\t\t\tconst firstVoiceAmplitudeEnd:   number = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismEnd);\n\n\t\t\t\tconst dynamismStart: number = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeStart, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\n\t\t\t\tconst dynamismEnd:   number = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeEnd, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\n\t\t\t\ttone.supersawDynamism = dynamismStart;\n\t\t\t\ttone.supersawDynamismDelta = (dynamismEnd - dynamismStart) / roundedSamplesPerTick;\n\n\t\t\t\tconst initializeSupersaw: boolean = (tone.supersawDelayIndex == -1);\n\t\t\t\tif (initializeSupersaw) {\n\t\t\t\t\t// Goal: generate sawtooth phases such that the combined initial amplitude\n\t\t\t\t\t// cancel out to minimize pop. Algorithm: generate sorted phases, iterate over\n\t\t\t\t\t// their sawtooth drop points to find a combined zero crossing, then offset the\n\t\t\t\t\t// phases so they start there.\n\n\t\t\t\t\t// Generate random phases in ascending order by adding positive randomly\n\t\t\t\t\t// sized gaps between adjacent phases. For a proper distribution of random\n\t\t\t\t\t// events, the gaps sizes should be an \"exponential distribution\", which is\n\t\t\t\t\t// just: -Math.log(Math.random()). At the end, normalize the phases to a 0-1\n\t\t\t\t\t// range by dividing by the final value of the accumulator.\n\t\t\t\t\tlet accumulator: number = 0.0;\n\t\t\t\t\tfor (let i: number = 0; i < Config.supersawVoiceCount; i++) {\n\t\t\t\t\t\ttone.phases[i] = accumulator;\n\t\t\t\t\t\taccumulator += -Math.log(Math.random());\n\t\t\t\t\t}\n\n\t\t\t\t\tconst amplitudeSum: number = 1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart;\n\t\t\t\t\tconst slope: number = amplitudeSum;\n\n\t\t\t\t\t// Find the initial amplitude of the sum of sawtooths with the normalized\n\t\t\t\t\t// set of phases.\n\t\t\t\t\tlet sample: number = 0.0;\n\t\t\t\t\tfor (let i: number = 0; i < Config.supersawVoiceCount; i++) {\n\t\t\t\t\t\tconst amplitude: number = (i == 0) ? 1.0 : dynamismStart;\n\t\t\t\t\t\tconst normalizedPhase: number = tone.phases[i] / accumulator;\n\t\t\t\t\t\ttone.phases[i] = normalizedPhase;\n\t\t\t\t\t\tsample += (normalizedPhase - 0.5) * amplitude;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Find the phase of the zero crossing of the sum of the sawtooths. You can\n\t\t\t\t\t// use a constant slope and the distance between sawtooth drops to determine if\n\t\t\t\t\t// the zero crossing occurs between them. Note that a small phase means that\n\t\t\t\t\t// the corresponding drop for that wave is far away, and a big phase means the\n\t\t\t\t\t// drop is nearby, so to iterate forward through the drops we iterate backward\n\t\t\t\t\t// through the phases.\n\t\t\t\t\tlet zeroCrossingPhase: number = 1.0;\n\t\t\t\t\tlet prevDrop: number = 0.0;\n\t\t\t\t\tfor (let i: number = Config.supersawVoiceCount - 1; i >= 0; i--) {\n\t\t\t\t\t\tconst nextDrop: number = 1.0 - tone.phases[i];\n\t\t\t\t\t\tconst phaseDelta: number = nextDrop - prevDrop;\n\t\t\t\t\t\tif (sample < 0.0) {\n\t\t\t\t\t\t\tconst distanceToZeroCrossing: number = -sample / slope;\n\t\t\t\t\t\t\tif (distanceToZeroCrossing < phaseDelta) {\n\t\t\t\t\t\t\t\tzeroCrossingPhase = prevDrop + distanceToZeroCrossing;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst amplitude: number = (i == 0) ? 1.0 : dynamismStart;\n\t\t\t\t\t\tsample += phaseDelta * slope - amplitude;\n\t\t\t\t\t\tprevDrop = nextDrop;\n\t\t\t\t\t}\n\t\t\t\t\tfor (let i: number = 0; i < Config.supersawVoiceCount; i++) {\n\t\t\t\t\t\ttone.phases[i] += zeroCrossingPhase;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Randomize the (initially sorted) order of the phases (aside from the\n\t\t\t\t\t// first one) so that they don't correlate to the detunes that are also\n\t\t\t\t\t// based on index.\n\t\t\t\t\tfor (let i: number = 1; i < Config.supersawVoiceCount - 1; i++) {\n\t\t\t\t\t\tconst swappedIndex: number = i + Math.floor(Math.random() * (Config.supersawVoiceCount - i));\n\t\t\t\t\t\tconst temp: number = tone.phases[i];\n\t\t\t\t\t\ttone.phases[i] = tone.phases[swappedIndex];\n\t\t\t\t\t\ttone.phases[swappedIndex] = temp;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst baseSpreadSlider: number = instrument.supersawSpread / Config.supersawSpreadMax;\n\t\t\t\t// Spread mods\n\t\t\t\tlet useSpreadStart: number = baseSpreadSlider;\n\t\t\t\tlet useSpreadEnd:   number = baseSpreadSlider;\n                if (this.isModActive(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex)) {\n                    useSpreadStart = (this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawSpreadMax;\n                    useSpreadEnd = (this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawSpreadMax;\n                }\n\n\t\t\t\tconst spreadSliderStart: number = useSpreadStart * envelopeStarts[EnvelopeComputeIndex.supersawSpread];\n\t\t\t\tconst spreadSliderEnd:   number = useSpreadEnd * envelopeEnds[  EnvelopeComputeIndex.supersawSpread];\n\t\t\t\t// Just use the average detune for the current tick in the below loop.\n\t\t\t\tconst averageSpreadSlider: number = (spreadSliderStart + spreadSliderEnd) * 0.5;\n\t\t\t\tconst curvedSpread: number = Math.pow(1.0 - Math.sqrt(Math.max(0.0, 1.0 - averageSpreadSlider)), 1.75);\n\t\t\t\tfor (let i = 0; i < Config.supersawVoiceCount; i++) {\n\t\t\t\t\t// Spread out the detunes around the center;\n\t\t\t\t\tconst offset: number = (i == 0) ? 0.0 : Math.pow((((i + 1) >> 1) - 0.5 + 0.025 * ((i & 2) - 1)) / (Config.supersawVoiceCount >> 1), 1.1) * ((i & 1) * 2 - 1);\n\t\t\t\t\ttone.supersawUnisonDetunes[i] = Math.pow(2.0, curvedSpread * offset / 12.0);\n\t\t\t\t}\n\n\t\t\t\tconst baseShape: number = instrument.supersawShape / Config.supersawShapeMax;\n\t\t\t\t// Saw shape mods\n\t\t\t\tlet useShapeStart: number = baseShape * envelopeStarts[EnvelopeComputeIndex.supersawShape];\n\t\t\t\tlet useShapeEnd:   number = baseShape * envelopeEnds[  EnvelopeComputeIndex.supersawShape];\n                if (this.isModActive(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex)) {\n                    useShapeStart = (this.getModValue(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawShapeMax;\n                    useShapeEnd = (this.getModValue(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawShapeMax;\n                }\n\n\t\t\t\tconst shapeStart: number = useShapeStart * envelopeStarts[EnvelopeComputeIndex.supersawShape];\n\t\t\t\tconst shapeEnd:   number = useShapeEnd * envelopeEnds[EnvelopeComputeIndex.supersawShape];\n\t\t\t\ttone.supersawShape = shapeStart;\n\t\t\t\ttone.supersawShapeDelta = (shapeEnd - shapeStart) / roundedSamplesPerTick;\n\n                //decimal offset mods\n                let decimalOffsetModStart: number = instrument.decimalOffset;\n                if (this.isModActive(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex)) {\n                    decimalOffsetModStart = this.getModValue(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex, false);\n                }\n \n                const decimalOffsetStart: number = decimalOffsetModStart * envelopeStarts[EnvelopeComputeIndex.decimalOffset];\n                // ...is including tone.decimalOffset still necessary?\n                tone.decimalOffset = decimalOffsetStart;\n\n                const basePulseWidth: number = getPulseWidthRatio(instrument.pulseWidth);\n\n                // Check for PWM mods to this instrument\n                let pulseWidthModStart: number = basePulseWidth;\n                let pulseWidthModEnd: number = basePulseWidth;\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\n                }\n\n                let pulseWidthStart: number = pulseWidthModStart * envelopeStarts[EnvelopeComputeIndex.pulseWidth];\n                let pulseWidthEnd: number = pulseWidthModEnd * envelopeEnds[EnvelopeComputeIndex.pulseWidth];\n                pulseWidthStart -= decimalOffsetStart / 10000;\n                pulseWidthEnd -= decimalOffsetStart / 10000;\n\t\t\t\tconst phaseDeltaStart: number = (tone.supersawPrevPhaseDelta != null) ? tone.supersawPrevPhaseDelta : startFreq * sampleTime;\n\t\t\t\tconst phaseDeltaEnd: number = startFreq * sampleTime * freqEndRatio;\n\t\t\t\ttone.supersawPrevPhaseDelta = phaseDeltaEnd;\n\t\t\t\tconst delayLengthStart = pulseWidthStart / phaseDeltaStart;\n\t\t\t\tconst delayLengthEnd = pulseWidthEnd / phaseDeltaEnd;\n\t\t\t\ttone.supersawDelayLength = delayLengthStart;\n\t\t\t\ttone.supersawDelayLengthDelta = (delayLengthEnd - delayLengthStart) / roundedSamplesPerTick;\n\t\t\t\tconst minBufferLength: number = Math.ceil(Math.max(delayLengthStart, delayLengthEnd)) + 2;\n\n\t\t\t\tif (tone.supersawDelayLine == null || tone.supersawDelayLine.length <= minBufferLength) {\n\t\t\t\t\t// The delay line buffer will get reused for other tones so might as well\n\t\t\t\t\t// start off with a buffer size that is big enough for most notes.\n\t\t\t\t\tconst likelyMaximumLength: number = Math.ceil(0.5 * this.samplesPerSecond / Instrument.frequencyFromPitch(24));\n\t\t\t\t\tconst newDelayLine: Float32Array = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\n\t\t\t\t\tif (!initializeSupersaw && tone.supersawDelayLine != null) {\n\t\t\t\t\t\t// If the tone has already started but the buffer needs to be reallocated,\n\t\t\t\t\t\t// transfer the old data to the new buffer.\n\t\t\t\t\t\tconst oldDelayBufferMask: number = (tone.supersawDelayLine.length - 1) >> 0;\n\t\t\t\t\t\tconst startCopyingFromIndex: number = tone.supersawDelayIndex;\n\t\t\t\t\t\tfor (let i: number = 0; i < tone.supersawDelayLine.length; i++) {\n\t\t\t\t\t\t\tnewDelayLine[i] = tone.supersawDelayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttone.supersawDelayLine = newDelayLine;\n\t\t\t\t\ttone.supersawDelayIndex = tone.supersawDelayLine.length;\n\t\t\t\t} else if (initializeSupersaw) {\n\t\t\t\t\ttone.supersawDelayLine.fill(0.0);\n\t\t\t\t\ttone.supersawDelayIndex = tone.supersawDelayLine.length;\n\t\t\t\t}\n\n\t\t\t\tconst pulseExpressionRatio: number = Config.pwmBaseExpression / Config.supersawBaseExpression;\n\t\t\t\tsupersawExpressionStart *= (1.0 + (pulseExpressionRatio - 1.0) * shapeStart) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart * dynamismStart);\n\t\t\t\tsupersawExpressionEnd *= (1.0 + (pulseExpressionRatio - 1.0) * shapeEnd) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismEnd * dynamismEnd);\n\t\t\t}\n\n\t\t\tlet expressionStart: number = settingsExpressionMult * fadeExpressionStart * chordExpressionStart * pitchExpressionStart * envelopeStarts[EnvelopeComputeIndex.noteVolume] * supersawExpressionStart;\n\t\t\tlet expressionEnd:   number = settingsExpressionMult * fadeExpressionEnd   * chordExpressionEnd   * pitchExpressionEnd   * envelopeEnds[  EnvelopeComputeIndex.noteVolume] * supersawExpressionEnd;\n\n            // Check for mod-related volume delta\n            if (this.isModActive(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex)) {\n                // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\n                const startVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, false);\n                const endVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, true)\n                expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n                expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n            }\n\n            tone.expression = expressionStart;\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n\n\n            if (instrument.type == InstrumentType.pickedString) {\n                let stringDecayStart: number;\n                if (tone.prevStringDecay != null) {\n                    stringDecayStart = tone.prevStringDecay;\n                } else {\n                    const sustainEnvelopeStart: number = tone.envelopeComputer.envelopeStarts[EnvelopeComputeIndex.stringSustain];\n                    stringDecayStart = 1.0 - Math.min(1.0, sustainEnvelopeStart * tone.stringSustainStart / (Config.stringSustainRange - 1));\n                }\n                const sustainEnvelopeEnd: number = tone.envelopeComputer.envelopeEnds[EnvelopeComputeIndex.stringSustain];\n                let stringDecayEnd: number = 1.0 - Math.min(1.0, sustainEnvelopeEnd * tone.stringSustainEnd / (Config.stringSustainRange - 1));\n                tone.prevStringDecay = stringDecayEnd;\n\n                //const unison: Unison = Config.unisons[instrument.unison];\n                const unisonVoices: number = instrument.unisonVoices;\n                for (let i: number = tone.pickedStrings.length; i < unisonVoices; i++) {\n                    tone.pickedStrings[i] = new PickedString();\n                }\n\n                if (tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\n                    for (const pickedString of tone.pickedStrings) {\n                        // Force the picked string to retrigger the attack impulse at the start of the note.\n                        pickedString.delayIndex = -1;\n                    }\n                }\n\n                for (let i: number = 0; i < unisonVoices; i++) {\n                    tone.pickedStrings[i].update(this, instrumentState, tone, i, roundedSamplesPerTick, stringDecayStart, stringDecayEnd, instrument.stringSustainType);\n                }\n            }\n        }\n    }\n\n    public static getLFOAmplitude(instrument: Instrument, secondsIntoBar: number): number {\n        let effect: number = 0.0;\n        for (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {\n            effect += Math.sin(Math.PI * 2.0 * secondsIntoBar / vibratoPeriodSeconds);\n        }\n        return effect;\n    }\n\n\n    public static getInstrumentSynthFunction(instrument: Instrument): Function {\n        if (instrument.type == InstrumentType.fm) {\n            const fingerprint: string = instrument.algorithm + \"_\" + instrument.feedbackType;\n            if (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\n                const synthSource: string[] = [];\n\n                for (const line of Synth.fmSourceTemplate) {\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\n                        const outputs: string[] = [];\n                        for (let j: number = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\n                            outputs.push(\"operator\" + j + \"Scaled\");\n                        }\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\n                    } else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\n                        for (let j: number = Config.operatorCount - 1; j >= 0; j--) {\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\n                                    let modulators = \"\";\n                                    for (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\n                                    }\n\n                                    const feedbackIndices: ReadonlyArray<number> = Config.feedbacks[instrument.feedbackType].indices[j];\n                                    if (feedbackIndices.length > 0) {\n                                        modulators += \" + feedbackMult * (\";\n                                        const feedbacks: string[] = [];\n                                        for (const modulatorNumber of feedbackIndices) {\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\n                                        }\n                                        modulators += feedbacks.join(\" + \") + \")\";\n                                    }\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\n                                } else {\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\n                                }\n                            }\n                        }\n                    } else if (line.indexOf(\"#\") != -1) {\n                        for (let j: number = 0; j < Config.operatorCount; j++) {\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\n                        }\n                    } else {\n                        synthSource.push(line);\n                    }\n                }\n\n                //console.log(synthSource.join(\"\\n\"));\n\n                const wrappedFmSynth: string = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {\" + synthSource.join(\"\\n\") + \"}\";\n\n\t\t\t\tSynth.fmSynthFunctionCache[fingerprint] = new Function(\"Config\", \"Synth\", wrappedFmSynth)(Config, Synth);\n\n            }\n            return Synth.fmSynthFunctionCache[fingerprint];\n        } else if (instrument.type == InstrumentType.chip) {\n\t\t                 // advloop addition\n                if (instrument.isUsingAdvancedLoopControls) {\n                    return Synth.loopableChipSynth;\n                }\n                // advloop addition\n            return Synth.chipSynth;\n        } else if (instrument.type == InstrumentType.customChipWave) {\n            return Synth.chipSynth;\n        } else if (instrument.type == InstrumentType.harmonics) {\n            return Synth.harmonicsSynth;\n        } else if (instrument.type == InstrumentType.pwm) {\n            return Synth.pulseWidthSynth;\n        } else if (instrument.type == InstrumentType.supersaw) {\n\t\t\treturn Synth.supersawSynth;\n        } else if (instrument.type == InstrumentType.pickedString) {\n            return Synth.pickedStringSynth;\n        } else if (instrument.type == InstrumentType.noise) {\n            return Synth.noiseSynth;\n        } else if (instrument.type == InstrumentType.spectrum) {\n            return Synth.spectrumSynth;\n        } else if (instrument.type == InstrumentType.drumset) {\n            return Synth.drumsetSynth;\n        } else if (instrument.type == InstrumentType.mod) {\n            return Synth.modSynth;\n        } else if (instrument.type == InstrumentType.fm6op) {\n            const fingerprint: string = instrument.customAlgorithm.name + \"_\" + instrument.customFeedbackType.name;\n            if (Synth.fm6SynthFunctionCache[fingerprint] == undefined) {\n                const synthSource: string[] = [];\n\n                for (const line of Synth.fmSourceTemplate) {\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\n                        const outputs: string[] = [];\n                        for (let j: number = 0; j < instrument.customAlgorithm.carrierCount; j++) {\n                            outputs.push(\"operator\" + j + \"Scaled\");\n                        }\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\n                    } else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\n                        for (let j: number = Config.operatorCount+2 - 1; j >= 0; j--) {\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\n                                    let modulators = \"\";\n                                    for (const modulatorNumber of instrument.customAlgorithm.modulatedBy[j]) {\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\n                                    }\n\n                                    const feedbackIndices: ReadonlyArray<number> = instrument.customFeedbackType.indices[j];\n                                    if (feedbackIndices.length > 0) {\n                                        modulators += \" + feedbackMult * (\";\n                                        const feedbacks: string[] = [];\n                                        for (const modulatorNumber of feedbackIndices) {\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\n                                        }\n                                        modulators += feedbacks.join(\" + \") + \")\";\n                                    }\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\n                                } else {\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\n                                }\n                            }\n                        }\n                    } else if (line.indexOf(\"#\") != -1) {\n                        for (let j = 0; j < Config.operatorCount+2; j++) {\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\n                        }\n                    } else {\n                        synthSource.push(line);\n                    }\n                }\n\n                //console.log(synthSource.join(\"\\n\"));\n\n                const wrappedFm6Synth: string = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {\" + synthSource.join(\"\\n\") + \"}\";\n\n\t\t\t\tSynth.fm6SynthFunctionCache[fingerprint] = new Function(\"Config\", \"Synth\", wrappedFm6Synth)(Config, Synth);\n            }\n            return Synth.fm6SynthFunctionCache[fingerprint];\n        }else{\n            throw new Error(\"Unrecognized instrument type: \" + instrument.type);\n        }\n    }\n// advloop addition\n        static wrap(x: number, b: number): number {\n            return (x % b + b) % b;\n        }\n        static loopableChipSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n            // @TODO:\n            // - Longer declicking? This is more difficult than I thought.\n            //   When determining this automatically is difficult (or the input\n            //   samples are expected to vary too much), this is left up to the\n            //   user.\n            const aliases: boolean = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);\n            // const aliases = false;\n            const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n            const wave: Float32Array = instrumentState.wave!;\n            const volumeScale: number = instrumentState.volumeScale;\n            const waveLength: number = (aliases && instrumentState.type == 8) ? wave.length : wave.length - 1;\n            let chipWaveLoopEnd: number = Math.max(0, Math.min(waveLength, instrumentState.chipWaveLoopEnd));\n            let chipWaveLoopStart: number = Math.max(0, Math.min(chipWaveLoopEnd - 1, instrumentState.chipWaveLoopStart));\n\t\t\t// @TODO: This is where to set things up for the release loop mode.\n           // const ticksSinceReleased = tone.ticksSinceReleased;\n            // if (ticksSinceReleased > 0) {\n            //     chipWaveLoopStart = 0;\n            //     chipWaveLoopEnd = waveLength - 1;\n            // }\n            let chipWaveLoopLength: number = chipWaveLoopEnd - chipWaveLoopStart;\n\t\t\tif (chipWaveLoopLength < 2) {\n                chipWaveLoopStart = 0;\n                chipWaveLoopEnd = waveLength;\n                chipWaveLoopLength = waveLength;\n            }\n            const chipWaveLoopMode: number = instrumentState.chipWaveLoopMode;\n            const chipWavePlayBackwards: boolean = instrumentState.chipWavePlayBackwards;\n            const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n            if (instrumentState.unisonVoices == 1 && !instrumentState.chord!.customInterval)\n                tone.phases[1] = tone.phases[0];\n            let phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\n            let phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\n            let directionA: number = tone.directions[0];\n            let directionB: number = tone.directions[1];\n            let chipWaveCompletionA: number = tone.chipWaveCompletions[0];\n            let chipWaveCompletionB: number = tone.chipWaveCompletions[1];\n            if (chipWaveLoopMode === 3 || chipWaveLoopMode === 2 || chipWaveLoopMode === 0) {\n                // If playing once or looping, we force the correct direction,\n                // since it shouldn't really change. This is mostly so that if\n                // the mode is changed midway through playback, it won't get\n                // stuck on the wrong direction.\n                if (!chipWavePlayBackwards) {\n                    directionA = 1;\n                    directionB = 1;\n                } else {\n                    directionA = -1;\n                    directionB = -1;\n                }\n            }\n            if (chipWaveLoopMode === 0 || chipWaveLoopMode === 1) {\n                // If looping or ping-ponging, we clear the completion status,\n                // as it's not relevant anymore. This is mostly so that if the\n                // mode is changed midway through playback, it won't get stuck\n                // on zero volume.\n                chipWaveCompletionA = 0;\n                chipWaveCompletionB = 0;\n            }\n            let lastWaveA: number = tone.chipWaveCompletionsLastWave[0];\n            let lastWaveB: number = tone.chipWaveCompletionsLastWave[1];\n            const chipWaveCompletionFadeLength: number = 1000;\n            const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\n            const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\n            let expression: number = +tone.expression;\n            const expressionDelta: number = +tone.expressionDelta;\n            let phaseA: number = Synth.wrap(tone.phases[0], 1) * waveLength;\n            let phaseB: number = Synth.wrap(tone.phases[1], 1) * waveLength;\n            let prevWaveIntegralA: number = 0;\n            let prevWaveIntegralB: number = 0;\n            if (!aliases) {\n                const phaseAInt = Math.floor(phaseA);\n                const phaseBInt = Math.floor(phaseB);\n                const indexA = Synth.wrap(phaseAInt, waveLength);\n               const indexB = Synth.wrap(phaseBInt, waveLength);\n                const phaseRatioA = phaseA - phaseAInt;\n                const phaseRatioB = phaseB - phaseBInt;\n                prevWaveIntegralA = +wave[indexA];\n                prevWaveIntegralB = +wave[indexB];\n                prevWaveIntegralA += (wave[Synth.wrap(indexA + 1, waveLength)] - prevWaveIntegralA) * phaseRatioA;\n                prevWaveIntegralB += (wave[Synth.wrap(indexB + 1, waveLength)] - prevWaveIntegralB) * phaseRatioB;\n           }\n            const filters = tone.noteFilters;\n            const filterCount: number = tone.noteFilterCount | 0;\n            let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n            let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n            const applyFilters: Function = Synth.applyFilters;\n            const stopIndex: number = bufferIndex + roundedSamplesPerTick;\n            let prevWaveA: number = tone.chipWavePrevWaves[0];\n            let prevWaveB: number = tone.chipWavePrevWaves[1];\n            for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n                if (chipWaveCompletionA > 0 && chipWaveCompletionA < chipWaveCompletionFadeLength) {\n                    chipWaveCompletionA++;\n                }\n                if (chipWaveCompletionB > 0 && chipWaveCompletionB < chipWaveCompletionFadeLength) {\n                    chipWaveCompletionB++;\n                }\n               let wrapped: number = 0;\n                phaseA += phaseDeltaA * directionA;\n                phaseB += phaseDeltaB * directionB;\n                if (chipWaveLoopMode === 2) {\n                    // once\n                    if (directionA === 1) {\n                        if (phaseA > waveLength) {\n                            if (chipWaveCompletionA <= 0) {\n                                lastWaveA = prevWaveA;\n                                chipWaveCompletionA++;\n                            }\n                            wrapped = 1;\n                        }\n                    } else if (directionA === -1) {\n                        if (phaseA < 0) {\n                            if (chipWaveCompletionA <= 0) {\n                                lastWaveA = prevWaveA;\n                                chipWaveCompletionA++;\n                            }\n                            wrapped = 1;\n                        }\n                    }\n                    if (directionB === 1) {\n                        if (phaseB > waveLength) {\n                            if (chipWaveCompletionB <= 0) {\n                                lastWaveB = prevWaveB;\n                                chipWaveCompletionB++;\n                            }\n                            wrapped = 1;\n                        }\n                    } else if (directionA === -1) {\n                        if (phaseB < 0) {\n                            if (chipWaveCompletionB <= 0) {\n                                lastWaveB = prevWaveB;\n                                chipWaveCompletionB++;\n                            }\n                            wrapped = 1;\n                        }\n                    }\n                } else if (chipWaveLoopMode === 3) {\n                    // loop once\n                    if (directionA === 1) {\n                        if (phaseA > chipWaveLoopEnd) {\n                            if (chipWaveCompletionA <= 0) {\n                                lastWaveA = prevWaveA;\n                                chipWaveCompletionA++;\n                            }\n                            wrapped = 1;\n                        }\n                    } else if (directionA === -1) {\n                        if (phaseA < chipWaveLoopStart) {\n                            if (chipWaveCompletionA <= 0) {\n                                lastWaveA = prevWaveA;\n                                chipWaveCompletionA++;\n                            }\n                            wrapped = 1;\n                        }\n                    }\n                    if (directionB === 1) {\n                        if (phaseB > chipWaveLoopEnd) {\n                            if (chipWaveCompletionB <= 0) {\n                                lastWaveB = prevWaveB;\n                                chipWaveCompletionB++;\n                            }\n                            wrapped = 1;\n                        }\n                    } else if (directionA === -1) {\n                        if (phaseB < chipWaveLoopStart) {\n                            if (chipWaveCompletionB <= 0) {\n                                lastWaveB = prevWaveB;\n                                chipWaveCompletionB++;\n                            }\n                            wrapped = 1;\n                        }\n                    }\n                } else if (chipWaveLoopMode === 0) {\n                    // loop\n                    if (directionA === 1) {\n                        if (phaseA > chipWaveLoopEnd) {\n                            phaseA = chipWaveLoopStart + Synth.wrap(phaseA - chipWaveLoopEnd, chipWaveLoopLength);\n                            // phaseA = chipWaveLoopStart;\n                            wrapped = 1;\n                        }\n                    } else if (directionA === -1) {\n                        if (phaseA < chipWaveLoopStart) {\n                            phaseA = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phaseA, chipWaveLoopLength);\n                            // phaseA = chipWaveLoopEnd;\n                            wrapped = 1;\n                        }\n                    }\n                    if (directionB === 1) {\n                        if (phaseB > chipWaveLoopEnd) {\n                            phaseB = chipWaveLoopStart + Synth.wrap(phaseB - chipWaveLoopEnd, chipWaveLoopLength);\n                            // phaseB = chipWaveLoopStart;\n                            wrapped = 1;\n                        }\n                    } else if (directionB === -1) {\n                        if (phaseB < chipWaveLoopStart) {\n                            phaseB = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phaseB, chipWaveLoopLength);\n                            // phaseB = chipWaveLoopEnd;\n                            wrapped = 1;\n                        }\n                    }\n                } else if (chipWaveLoopMode === 1) {\n                    // ping-pong\n                    if (directionA === 1) {\n                        if (phaseA > chipWaveLoopEnd) {\n                            phaseA = chipWaveLoopEnd - Synth.wrap(phaseA - chipWaveLoopEnd, chipWaveLoopLength);\n                            // phaseA = chipWaveLoopEnd;\n                            directionA = -1;\n                           wrapped = 1;\n                        }\n                    } else if (directionA === -1) {\n                        if (phaseA < chipWaveLoopStart) {\n                            phaseA = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phaseA, chipWaveLoopLength);\n                            // phaseA = chipWaveLoopStart;\n                            directionA = 1;\n                           wrapped = 1;\n                        }\n                    }\n                    if (directionB === 1) {\n                        if (phaseB > chipWaveLoopEnd) {\n                            phaseB = chipWaveLoopEnd - Synth.wrap(phaseB - chipWaveLoopEnd, chipWaveLoopLength);\n                            // phaseB = chipWaveLoopEnd;\n                            directionB = -1;\n                            wrapped = 1;\n                        }\n                    } else if (directionB === -1) {\n                        if (phaseB < chipWaveLoopStart) {\n                            phaseB = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phaseB, chipWaveLoopLength);\n                            // phaseB = chipWaveLoopStart;\n                            directionB = 1;\n                            wrapped = 1;\n                        }\n                    }\n               }\n                let waveA = 0;\n                let waveB = 0;\n                let inputSample = 0;\n                if (aliases) {\n                    waveA = wave[Synth.wrap(Math.floor(phaseA), waveLength)];\n                    waveB = wave[Synth.wrap(Math.floor(phaseB), waveLength)];\n                    prevWaveA = waveA;\n                    prevWaveB = waveB;\n                    const completionFadeA: number = chipWaveCompletionA > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionA, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                    const completionFadeB: number = chipWaveCompletionB > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionB, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                    inputSample = 0;\n                    if (chipWaveCompletionA > 0) {\n                        inputSample += lastWaveA * completionFadeA;\n                    } else {\n                        inputSample += waveA;\n                    }\n                    if (chipWaveCompletionB > 0) {\n                        inputSample += lastWaveB * completionFadeB;\n                    } else {\n                        inputSample += waveB;\n                    }\n                }\n                else {\n                    const phaseAInt = Math.floor(phaseA);\n                    const phaseBInt = Math.floor(phaseB);\n                    const indexA = Synth.wrap(phaseAInt, waveLength);\n                    const indexB = Synth.wrap(phaseBInt, waveLength);\n                    let nextWaveIntegralA = wave[indexA];\n                    let nextWaveIntegralB = wave[indexB];\n                    const phaseRatioA = phaseA - phaseAInt;\n                    const phaseRatioB = phaseB - phaseBInt;\n                    nextWaveIntegralA += (wave[Synth.wrap(indexA + 1, waveLength)] - nextWaveIntegralA) * phaseRatioA;\n                    nextWaveIntegralB += (wave[Synth.wrap(indexB + 1, waveLength)] - nextWaveIntegralB) * phaseRatioB;\n                    if (!(chipWaveLoopMode === 0 && chipWaveLoopStart === 0 && chipWaveLoopEnd === waveLength) && wrapped !== 0) {\n                        let pwia = 0;\n                        let pwib = 0;\n                        const phaseA_ = Math.max(0, phaseA - phaseDeltaA * directionA);\n                        const phaseB_ = Math.max(0, phaseB - phaseDeltaB * directionB);\n                        const phaseAInt = Math.floor(phaseA_);\n                        const phaseBInt = Math.floor(phaseB_);\n                        const indexA = Synth.wrap(phaseAInt, waveLength);\n                        const indexB = Synth.wrap(phaseBInt, waveLength);\n                        pwia = wave[indexA];\n                        pwib = wave[indexB];\n                        pwia += (wave[Synth.wrap(indexA + 1, waveLength)] - pwia) * (phaseA_ - phaseAInt) * directionA;\n                        pwib += (wave[Synth.wrap(indexB + 1, waveLength)] - pwib) * (phaseB_ - phaseBInt) * directionB;\n                        prevWaveIntegralA = pwia;\n                        prevWaveIntegralB = pwib;\n\t\t\t\t   }\n                   if (chipWaveLoopMode === 1 && wrapped !== 0) {\n                       waveA = prevWaveA;\n                       waveB = prevWaveB;\n                   } else {\n                       waveA = (nextWaveIntegralA - prevWaveIntegralA) / (phaseDeltaA * directionA);\n                       waveB = (nextWaveIntegralB - prevWaveIntegralB) / (phaseDeltaB * directionB);\n                   }\n                   prevWaveA = waveA;\n                   prevWaveB = waveB;\n\t\t\t\t   prevWaveIntegralA = nextWaveIntegralA;\n\t\t\t\t   prevWaveIntegralB = nextWaveIntegralB;\n                    const completionFadeA = chipWaveCompletionA > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionA, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                    const completionFadeB = chipWaveCompletionB > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionB, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                    if (chipWaveCompletionA > 0) {\n                        inputSample += lastWaveA * completionFadeA;\n                    } else {\n                        inputSample += waveA;\n                    }\n                    if (chipWaveCompletionB > 0) {\n                        inputSample += lastWaveB * completionFadeB;\n                    } else {\n                        inputSample += waveB * unisonSign;\n                    }\n                }\n                const sample = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);\n                initialFilterInput2 = initialFilterInput1;\n                initialFilterInput1 = inputSample * volumeScale;\n                phaseDeltaA *= phaseDeltaScaleA;\n                phaseDeltaB *= phaseDeltaScaleB;\n                const output = sample * expression;\n                expression += expressionDelta;\n                data[sampleIndex] += output;\n            }\n            tone.phases[0] = phaseA / waveLength;\n            tone.phases[1] = phaseB / waveLength;\n            tone.phaseDeltas[0] = phaseDeltaA / waveLength;\n            tone.phaseDeltas[1] = phaseDeltaB / waveLength;\n            tone.directions[0] = directionA;\n            tone.directions[1] = directionB;\n            tone.chipWaveCompletions[0] = chipWaveCompletionA;\n            tone.chipWaveCompletions[1] = chipWaveCompletionB;\n            tone.chipWavePrevWaves[0] = prevWaveA;\n            tone.chipWavePrevWaves[1] = prevWaveB;\n            tone.chipWaveCompletionsLastWave[0] = lastWaveA;\n            tone.chipWaveCompletionsLastWave[1] = lastWaveB;\n            tone.expression = expression;\n            synth.sanitizeFilters(filters);\n            tone.initialNoteFilterInput1 = initialFilterInput1;\n            tone.initialNoteFilterInput2 = initialFilterInput2;\n        }\n        // advloop addition\n    private static chipSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n        const aliases: boolean = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n        const wave: Float32Array = instrumentState.wave!;\n        const volumeScale = instrumentState.volumeScale;\n\n        const waveLength = (aliases && instrumentState.type == 8) ? wave.length : wave.length - 1;\n\t\t\t//BUGFIX FROM JUMMBOX\n\n        const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        if (instrumentState.unisonVoices == 1 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\n        let phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\n        let phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\n        const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n        const applyFilters: Function = Synth.applyFilters;\n        let prevWaveIntegralA: number = 0;\n        let prevWaveIntegralB: number = 0;\n\n        if (!aliases) {\n            const phaseAInt: number = phaseA | 0;\n            const phaseBInt: number = phaseB | 0;\n            const indexA: number = phaseAInt % waveLength;\n            const indexB: number = phaseBInt % waveLength;\n            const phaseRatioA: number = phaseA - phaseAInt;\n            const phaseRatioB: number = phaseB - phaseBInt;\n            prevWaveIntegralA = +wave[indexA];\n            prevWaveIntegralB = +wave[indexB];\n            prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\n            prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\n        }\n\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\n            phaseA += phaseDeltaA;\n            phaseB += phaseDeltaB;\n\n            let waveA: number;\n            let waveB: number;\n            let inputSample: number;\n\n            if (aliases) {\n                waveA = wave[(0 | phaseA) % waveLength];\n                waveB = wave[(0 | phaseB) % waveLength];\n                inputSample = waveA + waveB;\n            } else {\n                const phaseAInt: number = phaseA | 0;\n                const phaseBInt: number = phaseB | 0;\n                const indexA: number = phaseAInt % waveLength;\n                const indexB: number = phaseBInt % waveLength;\n                let nextWaveIntegralA: number = wave[indexA];\n                let nextWaveIntegralB: number = wave[indexB];\n                const phaseRatioA: number = phaseA - phaseAInt;\n                const phaseRatioB: number = phaseB - phaseBInt;\n                nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\n                nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\n                waveA = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\n                waveB = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\n                prevWaveIntegralA = nextWaveIntegralA;\n                prevWaveIntegralB = nextWaveIntegralB;\n                inputSample = waveA + waveB * unisonSign;\n            }\n\n            const sample: number = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t//BUGFIX FROM JUMMBOX\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample * volumeScale;\n\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n\n            const output: number = sample * expression;\n\t\t//BUGFIX FROM JUMMBOX\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phaseA / waveLength;\n        tone.phases[1] = phaseB / waveLength;\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\n        tone.expression = expression;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n\n    private static harmonicsSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n        const wave: Float32Array = instrumentState.wave!;\n        const waveLength: number = wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\n\n        const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        if (instrumentState.unisonVoices == 1 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\n        let phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\n        let phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\n        const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n        const applyFilters: Function = Synth.applyFilters;\n\n        const phaseAInt: number = phaseA | 0;\n        const phaseBInt: number = phaseB | 0;\n        const indexA: number = phaseAInt % waveLength;\n        const indexB: number = phaseBInt % waveLength;\n        const phaseRatioA: number = phaseA - phaseAInt;\n        const phaseRatioB: number = phaseB - phaseBInt;\n        let prevWaveIntegralA: number = +wave[indexA];\n        let prevWaveIntegralB: number = +wave[indexB];\n        prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\n        prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\n\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\n            phaseA += phaseDeltaA;\n            phaseB += phaseDeltaB;\n\n            const phaseAInt: number = phaseA | 0;\n            const phaseBInt: number = phaseB | 0;\n            const indexA: number = phaseAInt % waveLength;\n            const indexB: number = phaseBInt % waveLength;\n            let nextWaveIntegralA: number = wave[indexA];\n            let nextWaveIntegralB: number = wave[indexB];\n            const phaseRatioA: number = phaseA - phaseAInt;\n            const phaseRatioB: number = phaseB - phaseBInt;\n            nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\n            nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\n            const waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\n            const waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\n            prevWaveIntegralA = nextWaveIntegralA;\n            prevWaveIntegralB = nextWaveIntegralB;\n\n            const inputSample: number = waveA + waveB * unisonSign;\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n\n            const output: number = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phaseA / waveLength;\n        tone.phases[1] = phaseB / waveLength;\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\n        tone.expression = expression;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n\n    private static pickedStringSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n        // This algorithm is similar to the Karpluss-Strong algorithm in principle, but with an\n        // all-pass filter for dispersion and with more control over the impulse harmonics.\n        // The source code is processed as a string before being compiled, in order to\n        // handle the unison feature. If unison is disabled or set to none, then only one\n        // string voice is required, otherwise two string voices are required. We only want\n        // to compute the minimum possible number of string voices, so omit the code for\n        // processing extra ones if possible. Any line containing a \"#\" is duplicated for\n        // each required voice, replacing the \"#\" with the voice index.\n\n        const voiceCount: number = instrumentState.unisonVoices;\n        let pickedStringFunction: Function = Synth.pickedStringFunctionCache[voiceCount];\n        if (pickedStringFunction == undefined) {\n            let pickedStringSource: string = \"return (synth, bufferIndex, runLength, tone, instrumentState) => {\";\n\n\n            pickedStringSource += `\n\t\t\t\tconst Config = beepbox.Config;\n\t\t\t\tconst Synth = beepbox.Synth;\n\t\t\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\n\t\t\t\tlet sustainFilterSample# = +pickedString#.sustainFilterSample;\n\t\t\t\tlet sustainFilterPrevOutput2# = +pickedString#.sustainFilterPrevOutput2;\n\t\t\t\tlet sustainFilterPrevInput1# = +pickedString#.sustainFilterPrevInput1;\n\t\t\t\tlet sustainFilterPrevInput2# = +pickedString#.sustainFilterPrevInput2;\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;\n\t\t\t\tlet delayLength# = +pickedString#.prevDelayLength;\n\t\t\t\tconst delayLengthDelta# = +pickedString#.delayLengthDelta;\n\t\t\t\tlet allPassG# = +pickedString#.allPassG;\n\t\t\t\tlet sustainFilterA1# = +pickedString#.sustainFilterA1;\n\t\t\t\tlet sustainFilterA2# = +pickedString#.sustainFilterA2;\n\t\t\t\tlet sustainFilterB0# = +pickedString#.sustainFilterB0;\n\t\t\t\tlet sustainFilterB1# = +pickedString#.sustainFilterB1;\n\t\t\t\tlet sustainFilterB2# = +pickedString#.sustainFilterB2;\n\t\t\t\tconst allPassGDelta# = +pickedString#.allPassGDelta;\n\t\t\t\tconst sustainFilterA1Delta# = +pickedString#.sustainFilterA1Delta;\n\t\t\t\tconst sustainFilterA2Delta# = +pickedString#.sustainFilterA2Delta;\n\t\t\t\tconst sustainFilterB0Delta# = +pickedString#.sustainFilterB0Delta;\n\t\t\t\tconst sustainFilterB1Delta# = +pickedString#.sustainFilterB1Delta;\n\t\t\t\tconst sustainFilterB2Delta# = +pickedString#.sustainFilterB2Delta;\n\t\t\t\t\n\t\t\t\tlet expression = +tone.expression;\n\t\t\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\t\t\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\n\t\t\t\t\n\t\t\t\tconst filters = tone.noteFilters;\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tconst sustainFilterPrevOutput1# = sustainFilterSample#;\n\t\t\t\t\tsustainFilterSample# = sustainFilterB0# * allPassSample# + sustainFilterB1# * sustainFilterPrevInput1# + sustainFilterB2# * sustainFilterPrevInput2# - sustainFilterA1# * sustainFilterSample# - sustainFilterA2# * sustainFilterPrevOutput2#;\n\t\t\t\t\tsustainFilterPrevOutput2# = sustainFilterPrevOutput1#;\n\t\t\t\t\tsustainFilterPrevInput2# = sustainFilterPrevInput1#;\n\t\t\t\t\tsustainFilterPrevInput1# = allPassSample#;\n\t\t\t\t\t\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += sustainFilterSample#;\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\n\t\t\t\t\tdelayIndex#++;\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = (`\n\n            const sampleList: string[] = [];\n            for (let voice: number = 0; voice < voiceCount; voice++) {\n                sampleList.push(\"fractionalDelaySample\" + voice + (voice == 1 ? \" * unisonSign\" : \"\"));\n            }\n\n            pickedStringSource += sampleList.join(\" + \");\n\n            pickedStringSource += `) * expression;\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\tdata[sampleIndex] += sample;\n\t\t\t\t\t\n\t\t\t\t\texpression += expressionDelta;\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\n\t\t\t\t\tallPassG# += allPassGDelta#;\n\t\t\t\t\tsustainFilterA1# += sustainFilterA1Delta#;\n\t\t\t\t\tsustainFilterA2# += sustainFilterA2Delta#;\n\t\t\t\t\tsustainFilterB0# += sustainFilterB0Delta#;\n\t\t\t\t\tsustainFilterB1# += sustainFilterB1Delta#;\n\t\t\t\t\tsustainFilterB2# += sustainFilterB2Delta#;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterSample#) || Math.abs(sustainFilterSample#) < epsilon) sustainFilterSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevOutput2#) || Math.abs(sustainFilterPrevOutput2#) < epsilon) sustainFilterPrevOutput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput1#) || Math.abs(sustainFilterPrevInput1#) < epsilon) sustainFilterPrevInput1# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput2#) || Math.abs(sustainFilterPrevInput2#) < epsilon) sustainFilterPrevInput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\n\t\t\t\tpickedString#.sustainFilterSample = sustainFilterSample#;\n\t\t\t\tpickedString#.sustainFilterPrevOutput2 = sustainFilterPrevOutput2#;\n\t\t\t\tpickedString#.sustainFilterPrevInput1 = sustainFilterPrevInput1#;\n\t\t\t\tpickedString#.sustainFilterPrevInput2 = sustainFilterPrevInput2#;\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\n\t\t\t\tpickedString#.allPassG = allPassG#;\n\t\t\t\tpickedString#.sustainFilterA1 = sustainFilterA1#;\n\t\t\t\tpickedString#.sustainFilterA2 = sustainFilterA2#;\n\t\t\t\tpickedString#.sustainFilterB0 = sustainFilterB0#;\n\t\t\t\tpickedString#.sustainFilterB1 = sustainFilterB1#;\n\t\t\t\tpickedString#.sustainFilterB2 = sustainFilterB2#;\n\t\t\t\t\n\t\t\t\ttone.expression = expression;\n\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\t\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t\t\t}`\n\n            // Duplicate lines containing \"#\" for each voice and replace the \"#\" with the voice index.\n            pickedStringSource = pickedStringSource.replace(/^.*\\#.*$/mg, line => {\n                const lines = [];\n                for (let voice: number = 0; voice < voiceCount; voice++) {\n                    lines.push(line.replace(/\\#/g, String(voice)));\n                }\n                return lines.join(\"\\n\");\n            });\n\n            //console.log(pickedStringSource);\n            pickedStringFunction = new Function(\"Config\", \"Synth\", pickedStringSource)(Config, Synth);\n\t\t\tSynth.pickedStringFunctionCache[voiceCount] = pickedStringFunction;\n        }\n\n        pickedStringFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\n    }\n\n    private static effectsSynth(synth: Synth, outputDataL: Float32Array, outputDataR: Float32Array, bufferIndex: number, runLength: number, instrumentState: InstrumentState): void {\n        // TODO: If automation is involved, don't assume sliders will stay at zero.\n        // @jummbus - ^ Correct, removed the non-zero checks as modulation can change them.\n\n        const usesDistortion: boolean = effectsIncludeDistortion(instrumentState.effects);\n        const usesBitcrusher: boolean = effectsIncludeBitcrusher(instrumentState.effects);\n        const usesEqFilter: boolean = instrumentState.eqFilterCount > 0;\n        const usesPanning: boolean = effectsIncludePanning(instrumentState.effects);\n        const usesChorus: boolean = effectsIncludeChorus(instrumentState.effects);\n        const usesEcho: boolean = effectsIncludeEcho(instrumentState.effects);\n        const usesReverb: boolean = effectsIncludeReverb(instrumentState.effects);\n        let signature: number = 0; if (usesDistortion) signature = signature | 1;\n        signature = signature << 1; if (usesBitcrusher) signature = signature | 1;\n        signature = signature << 1; if (usesEqFilter) signature = signature | 1;\n        signature = signature << 1; if (usesPanning) signature = signature | 1;\n        signature = signature << 1; if (usesChorus) signature = signature | 1;\n        signature = signature << 1; if (usesEcho) signature = signature | 1;\n        signature = signature << 1; if (usesReverb) signature = signature | 1;\n\n        let effectsFunction: Function = Synth.effectsFunctionCache[signature];\n        if (effectsFunction == undefined) {\n            let effectsSource: string = \"return (synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) => {\";\n\n            const usesDelays: boolean = usesChorus || usesReverb || usesEcho;\n\n            effectsSource += `\n\t\t\t\tconst tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet mixVolume = +instrumentState.mixVolume;\n\t\t\t\tconst mixVolumeDelta = +instrumentState.mixVolumeDelta;`\n\n            if (usesDelays) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tlet delayInputMult = +instrumentState.delayInputMult;\n\t\t\t\tconst delayInputMultDelta = +instrumentState.delayInputMultDelta;`\n            }\n\n            if (usesDistortion) {\n                // Distortion can sometimes create noticeable aliasing.\n                // It seems the established industry best practice for distortion antialiasing\n                // is to upsample the inputs (\"zero stuffing\" followed by a brick wall lowpass\n                // at the original nyquist frequency), perform the distortion, then downsample\n                // (the lowpass again followed by dropping in-between samples). This is\n                // \"mathematically correct\" in that it preserves only the intended frequencies,\n                // but it has several unfortunate tradeoffs depending on the choice of filter,\n                // introducing latency and/or time smearing, since no true brick wall filter\n                // exists. For the time being, I've opted to instead generate in-between input\n                // samples using fractional delay all-pass filters, and after distorting them,\n                // I \"downsample\" these with a simple weighted sum.\n\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tconst distortionBaseVolume = +Config.distortionBaseVolume;\n\t\t\t\tlet distortion = instrumentState.distortion;\n\t\t\t\tconst distortionDelta = instrumentState.distortionDelta;\n\t\t\t\tlet distortionDrive = instrumentState.distortionDrive;\n\t\t\t\tconst distortionDriveDelta = instrumentState.distortionDriveDelta;\n\t\t\t\tconst distortionFractionalResolution = 4.0;\n\t\t\t\tconst distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\n\t\t\t\tconst distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\n\t\t\t\tconst distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\n\t\t\t\tconst distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\n\t\t\t\t\n\t\t\t\tlet distortionFractionalInput1 = +instrumentState.distortionFractionalInput1;\n\t\t\t\tlet distortionFractionalInput2 = +instrumentState.distortionFractionalInput2;\n\t\t\t\tlet distortionFractionalInput3 = +instrumentState.distortionFractionalInput3;\n\t\t\t\tlet distortionPrevInput = +instrumentState.distortionPrevInput;\n\t\t\t\tlet distortionNextOutput = +instrumentState.distortionNextOutput;`\n            }\n\n            if (usesBitcrusher) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tlet bitcrusherPrevInput = +instrumentState.bitcrusherPrevInput;\n\t\t\t\tlet bitcrusherCurrentOutput = +instrumentState.bitcrusherCurrentOutput;\n\t\t\t\tlet bitcrusherPhase = +instrumentState.bitcrusherPhase;\n\t\t\t\tlet bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;\n\t\t\t\tconst bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;\n\t\t\t\tlet bitcrusherScale = +instrumentState.bitcrusherScale;\n\t\t\t\tconst bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;\n\t\t\t\tlet bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;\n\t\t\t\tconst bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;`\n            }\n\n            if (usesEqFilter) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tlet filters = instrumentState.eqFilters;\n\t\t\t\tconst filterCount = instrumentState.eqFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +instrumentState.initialEqFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +instrumentState.initialEqFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;`\n            }\n\n            // The eq filter volume is also used to fade out the instrument state, so always include it.\n            effectsSource += `\n\t\t\t\t\n\t\t\t\tlet eqFilterVolume = +instrumentState.eqFilterVolume;\n\t\t\t\tconst eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;`\n\n            if (usesPanning) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tconst panningMask = synth.panningDelayBufferMask >>> 0;\n\t\t\t\tconst panningDelayLine = instrumentState.panningDelayLine;\n\t\t\t\tlet panningDelayPos = instrumentState.panningDelayPos & panningMask;\n\t\t\t\tlet   panningVolumeL      = +instrumentState.panningVolumeL;\n\t\t\t\tlet   panningVolumeR      = +instrumentState.panningVolumeR;\n\t\t\t\tconst panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;\n\t\t\t\tconst panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;\n\t\t\t\tlet   panningOffsetL      = +instrumentState.panningOffsetL;\n\t\t\t\tlet   panningOffsetR      = +instrumentState.panningOffsetR;\n\t\t\t\tconst panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;\n\t\t\t\tconst panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;`\n            }\n\n            if (usesChorus) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tconst chorusMask = synth.chorusDelayBufferMask >>> 0;\n\t\t\t\tconst chorusDelayLineL = instrumentState.chorusDelayLineL;\n\t\t\t\tconst chorusDelayLineR = instrumentState.chorusDelayLineR;\n\t\t\t\tinstrumentState.chorusDelayLineDirty = true;\n\t\t\t\tlet chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;\n\t\t\t\t\n\t\t\t\tlet chorusVoiceMult = +instrumentState.chorusVoiceMult;\n\t\t\t\tconst chorusVoiceMultDelta = +instrumentState.chorusVoiceMultDelta;\n\t\t\t\tlet chorusCombinedMult = +instrumentState.chorusCombinedMult;\n\t\t\t\tconst chorusCombinedMultDelta = +instrumentState.chorusCombinedMultDelta;\n\t\t\t\t\n\t\t\t\tconst chorusDuration = +beepbox.Config.chorusPeriodSeconds;\n\t\t\t\tconst chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\n\t\t\t\tconst chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;\n\t\t\t\tconst chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;\n\t\t\t\tconst chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;\n\t\t\t\tconst chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;\n\t\t\t\tconst chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;\n\t\t\t\tconst chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;\n\t\t\t\tconst chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;\n\t\t\t\tlet chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);\n\t\t\t\tlet chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);\n\t\t\t\tlet chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);\n\t\t\t\tlet chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);\n\t\t\t\tlet chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);\n\t\t\t\tlet chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);\n\t\t\t\tlet chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);\n\t\t\t\tchorusPhase += chorusAngle * runLength;\n\t\t\t\tconst chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;\n\t\t\t\tconst chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;\n\t\t\t\tconst chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;\n\t\t\t\tconst chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;\n\t\t\t\tconst chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;\n\t\t\t\tconst chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;\n\t\t\t\tconst chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;\n\t\t\t\tconst chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;\n\t\t\t\tconst chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;\n\t\t\t\tconst chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;\n\t\t\t\tconst chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;\n\t\t\t\tconst chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;`\n            }\n\n            if (usesEcho) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tlet echoMult = +instrumentState.echoMult;\n\t\t\t\tconst echoMultDelta = +instrumentState.echoMultDelta;\n\t\t\t\t\n\t\t\t\tconst echoDelayLineL = instrumentState.echoDelayLineL;\n\t\t\t\tconst echoDelayLineR = instrumentState.echoDelayLineR;\n\t\t\t\tconst echoMask = (echoDelayLineL.length - 1) >>> 0;\n\t\t\t\tinstrumentState.echoDelayLineDirty = true;\n\t\t\t\t\n\t\t\t\tlet echoDelayPos = instrumentState.echoDelayPos & echoMask;\n\t\t\t\tconst echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;\n\t\t\t\tconst echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;\n\t\t\t\tlet echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;\n\t\t\t\tconst echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;\n\t\t\t\t\n\t\t\t\tconst echoShelfA1 = +instrumentState.echoShelfA1;\n\t\t\t\tconst echoShelfB0 = +instrumentState.echoShelfB0;\n\t\t\t\tconst echoShelfB1 = +instrumentState.echoShelfB1;\n\t\t\t\tlet echoShelfSampleL = +instrumentState.echoShelfSampleL;\n\t\t\t\tlet echoShelfSampleR = +instrumentState.echoShelfSampleR;\n\t\t\t\tlet echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;\n\t\t\t\tlet echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;`\n            }\n\n            if (usesReverb) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tconst reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\n\t\t\t\tconst reverbDelayLine = instrumentState.reverbDelayLine;\n\t\t\t\tinstrumentState.reverbDelayLineDirty = true;\n\t\t\t\tlet reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;\n\t\t\t\t\n\t\t\t\tlet reverb = +instrumentState.reverbMult;\n\t\t\t\tconst reverbDelta = +instrumentState.reverbMultDelta;\n\t\t\t\t\n\t\t\t\tconst reverbShelfA1 = +instrumentState.reverbShelfA1;\n\t\t\t\tconst reverbShelfB0 = +instrumentState.reverbShelfB0;\n\t\t\t\tconst reverbShelfB1 = +instrumentState.reverbShelfB1;\n\t\t\t\tlet reverbShelfSample0 = +instrumentState.reverbShelfSample0;\n\t\t\t\tlet reverbShelfSample1 = +instrumentState.reverbShelfSample1;\n\t\t\t\tlet reverbShelfSample2 = +instrumentState.reverbShelfSample2;\n\t\t\t\tlet reverbShelfSample3 = +instrumentState.reverbShelfSample3;\n\t\t\t\tlet reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;\n\t\t\t\tlet reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;\n\t\t\t\tlet reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;\n\t\t\t\tlet reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;`\n            }\n\n            effectsSource += `\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tlet sample = tempMonoInstrumentSampleBuffer[sampleIndex];\n\t\t\t\t\ttempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;`\n\n            if (usesDistortion) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst distortionReverse = 1.0 - distortion;\n\t\t\t\t\tconst distortionNextInput = sample * distortionDrive;\n\t\t\t\t\tsample = distortionNextOutput;\n\t\t\t\t\tdistortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);\n\t\t\t\t\tdistortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;\n\t\t\t\t\tdistortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;\n\t\t\t\t\tdistortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;\n\t\t\t\t\tconst distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);\n\t\t\t\t\tconst distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);\n\t\t\t\t\tconst distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);\n\t\t\t\t\tdistortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;\n\t\t\t\t\tsample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;\n\t\t\t\t\tsample *= distortionOversampleCompensation;\n\t\t\t\t\tdistortionPrevInput = distortionNextInput;\n\t\t\t\t\tdistortion += distortionDelta;\n\t\t\t\t\tdistortionDrive += distortionDriveDelta;`\n            }\n\n            if (usesBitcrusher) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tbitcrusherPhase += bitcrusherPhaseDelta;\n\t\t\t\t\tif (bitcrusherPhase < 1.0) {\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\tsample = bitcrusherCurrentOutput;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbitcrusherPhase = bitcrusherPhase % 1.0;\n\t\t\t\t\t\tconst ratio = bitcrusherPhase / bitcrusherPhaseDelta;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;\n\t\t\t\t\t\tconst wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;\n\t\t\t\t\t\tconst foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);\n\t\t\t\t\t\tconst scaledSample = foldedSample / bitcrusherScale;\n\t\t\t\t\t\tconst oldValue = bitcrusherCurrentOutput;\n\t\t\t\t\t\tconst newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tsample = oldValue + (newValue - oldValue) * ratio;\n\t\t\t\t\t\tbitcrusherCurrentOutput = newValue;\n\t\t\t\t\t}\n\t\t\t\t\tbitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;\n\t\t\t\t\tbitcrusherScale *= bitcrusherScaleScale;\n\t\t\t\t\tbitcrusherFoldLevel *= bitcrusherFoldLevelScale;`\n            }\n\n            if (usesEqFilter) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = sample;\n\t\t\t\t\tsample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;`\n            }\n\n            // The eq filter volume is also used to fade out the instrument state, so always include it.\n            effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tsample *= eqFilterVolume;\n\t\t\t\t\teqFilterVolume += eqFilterVolumeDelta;`\n\n            if (usesPanning) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tpanningDelayLine[panningDelayPos] = sample;\n\t\t\t\t\tconst panningRatioL  = panningOffsetL % 1;\n\t\t\t\t\tconst panningRatioR  = panningOffsetR % 1;\n\t\t\t\t\tconst panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];\n\t\t\t\t\tconst panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];\n\t\t\t\t\tconst panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];\n\t\t\t\t\tconst panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];\n\t\t\t\t\tconst panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;\n\t\t\t\t\tconst panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;\n\t\t\t\t\tlet sampleL = panningTapL * panningVolumeL;\n\t\t\t\t\tlet sampleR = panningTapR * panningVolumeR;\n\t\t\t\t\tpanningDelayPos = (panningDelayPos + 1) & panningMask;\n\t\t\t\t\tpanningVolumeL += panningVolumeDeltaL;\n\t\t\t\t\tpanningVolumeR += panningVolumeDeltaR;\n\t\t\t\t\tpanningOffsetL += panningOffsetDeltaL;\n\t\t\t\t\tpanningOffsetR += panningOffsetDeltaR;`\n            } else {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tlet sampleL = sample;\n\t\t\t\t\tlet sampleR = sample;`\n            }\n\n            if (usesChorus) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst chorusTap0Ratio = chorusTap0Index % 1;\n\t\t\t\t\tconst chorusTap1Ratio = chorusTap1Index % 1;\n\t\t\t\t\tconst chorusTap2Ratio = chorusTap2Index % 1;\n\t\t\t\t\tconst chorusTap3Ratio = chorusTap3Index % 1;\n\t\t\t\t\tconst chorusTap4Ratio = chorusTap4Index % 1;\n\t\t\t\t\tconst chorusTap5Ratio = chorusTap5Index % 1;\n\t\t\t\t\tconst chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];\n\t\t\t\t\tconst chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];\n\t\t\t\t\tconst chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];\n\t\t\t\t\tconst chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];\n\t\t\t\t\tconst chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];\n\t\t\t\t\tconst chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];\n\t\t\t\t\tconst chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\n\t\t\t\t\tconst chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\n\t\t\t\t\tconst chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\n\t\t\t\t\tconst chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\n\t\t\t\t\tconst chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\n\t\t\t\t\tconst chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\n\t\t\t\t\tchorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\tchorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\tsampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));\n\t\t\t\t\tsampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));\n\t\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & chorusMask;\n\t\t\t\t\tchorusTap0Index += chorusTap0Delta;\n\t\t\t\t\tchorusTap1Index += chorusTap1Delta;\n\t\t\t\t\tchorusTap2Index += chorusTap2Delta;\n\t\t\t\t\tchorusTap3Index += chorusTap3Delta;\n\t\t\t\t\tchorusTap4Index += chorusTap4Delta;\n\t\t\t\t\tchorusTap5Index += chorusTap5Delta;\n\t\t\t\t\tchorusVoiceMult += chorusVoiceMultDelta;\n\t\t\t\t\tchorusCombinedMult += chorusCombinedMultDelta;`\n            }\n\n            if (usesEcho) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;\n\t\t\t\t\tconst echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;\n\t\t\t\t\tconst echoTapStartL = echoDelayLineL[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndL   = echoDelayLineL[echoTapEndIndex];\n\t\t\t\t\tconst echoTapStartR = echoDelayLineR[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndR   = echoDelayLineR[echoTapEndIndex];\n\t\t\t\t\tconst echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\tconst echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\t\n\t\t\t\t\techoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;\n\t\t\t\t\techoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;\n\t\t\t\t\techoShelfPrevInputL = echoTapL;\n\t\t\t\t\techoShelfPrevInputR = echoTapR;\n\t\t\t\t\tsampleL += echoShelfSampleL;\n\t\t\t\t\tsampleR += echoShelfSampleR;\n\t\t\t\t\t\n\t\t\t\t\techoDelayLineL[echoDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\techoDelayLineR[echoDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\techoDelayPos = (echoDelayPos + 1) & echoMask;\n\t\t\t\t\techoDelayOffsetRatio += echoDelayOffsetRatioDelta;\n\t\t\t\t\techoMult += echoMultDelta;\n                    `\n            }\n\n            if (usesReverb) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\n\t\t\t\t\tconst reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;\n\t\t\t\t\tconst reverbSample0 = (reverbDelayLine[reverbDelayPos]);\n\t\t\t\t\tconst reverbSample1 = reverbDelayLine[reverbDelayPos1];\n\t\t\t\t\tconst reverbSample2 = reverbDelayLine[reverbDelayPos2];\n\t\t\t\t\tconst reverbSample3 = reverbDelayLine[reverbDelayPos3];\n\t\t\t\t\tconst reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;\n\t\t\t\t\tconst reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;\n\t\t\t\t\tconst reverbTemp2 = -reverbSample2 + reverbSample3;\n\t\t\t\t\tconst reverbTemp3 = -reverbSample2 - reverbSample3;\n\t\t\t\t\tconst reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;\n\t\t\t\t\tconst reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;\n\t\t\t\t\treverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;\n\t\t\t\t\treverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;\n\t\t\t\t\treverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;\n\t\t\t\t\treverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;\n\t\t\t\t\treverbShelfPrevInput0 = reverbShelfInput0;\n\t\t\t\t\treverbShelfPrevInput1 = reverbShelfInput1;\n\t\t\t\t\treverbShelfPrevInput2 = reverbShelfInput2;\n\t\t\t\t\treverbShelfPrevInput3 = reverbShelfInput3;\n\t\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;\n\t\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & reverbMask;\n\t\t\t\t\tsampleL += reverbSample1 + reverbSample2 + reverbSample3;\n\t\t\t\t\tsampleR += reverbSample0 + reverbSample2 - reverbSample3;\n\t\t\t\t\treverb += reverbDelta;`\n            }\n\n            effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\toutputDataL[sampleIndex] += sampleL * mixVolume;\n\t\t\t\t\toutputDataR[sampleIndex] += sampleR * mixVolume;\n\t\t\t\t\tmixVolume += mixVolumeDelta;`\n\n            if (usesDelays) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tdelayInputMult += delayInputMultDelta;`\n            }\n\n            effectsSource += `\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tinstrumentState.mixVolume = mixVolume;\n\t\t\t\tinstrumentState.eqFilterVolume = eqFilterVolume;\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);`\n\n            if (usesDelays) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tinstrumentState.delayInputMult = delayInputMult;`\n            }\n\n            if (usesDistortion) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tinstrumentState.distortion = distortion;\n\t\t\t\tinstrumentState.distortionDrive = distortionDrive;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;\n\t\t\t\t\n\t\t\t\tinstrumentState.distortionFractionalInput1 = distortionFractionalInput1;\n\t\t\t\tinstrumentState.distortionFractionalInput2 = distortionFractionalInput2;\n\t\t\t\tinstrumentState.distortionFractionalInput3 = distortionFractionalInput3;\n\t\t\t\tinstrumentState.distortionPrevInput = distortionPrevInput;\n\t\t\t\tinstrumentState.distortionNextOutput = distortionNextOutput;`\n            }\n\n            if (usesBitcrusher) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\tif (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;\n\t\t\t\tif (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;\n\t\t\t\tinstrumentState.bitcrusherPrevInput = bitcrusherPrevInput;\n\t\t\t\tinstrumentState.bitcrusherCurrentOutput = bitcrusherCurrentOutput;\n\t\t\t\tinstrumentState.bitcrusherPhase = bitcrusherPhase;\n\t\t\t\tinstrumentState.bitcrusherPhaseDelta = bitcrusherPhaseDelta;\n\t\t\t\tinstrumentState.bitcrusherScale = bitcrusherScale;\n\t\t\t\tinstrumentState.bitcrusherFoldLevel = bitcrusherFoldLevel;`\n\n            }\n\n            if (usesEqFilter) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\t// The filter input here is downstream from another filter so we\n\t\t\t\t// better make sure it's safe too.\n\t\t\t\tif (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {\n\t\t\t\t\tinitialFilterInput1 = 0.0;\n\t\t\t\t\tinitialFilterInput2 = 0.0;\n\t\t\t\t}\n\t\t\t\tif (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;\n\t\t\t\tif (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;\n\t\t\t\tinstrumentState.initialEqFilterInput1 = initialFilterInput1;\n\t\t\t\tinstrumentState.initialEqFilterInput2 = initialFilterInput2;`\n            }\n\n            if (usesPanning) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);\n\t\t\t\tinstrumentState.panningDelayPos = panningDelayPos;\n\t\t\t\tinstrumentState.panningVolumeL = panningVolumeL;\n\t\t\t\tinstrumentState.panningVolumeR = panningVolumeR;\n\t\t\t\tinstrumentState.panningOffsetL = panningOffsetL;\n\t\t\t\tinstrumentState.panningOffsetR = panningOffsetR;`\n            }\n\n            if (usesChorus) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);\n\t\t\t\tinstrumentState.chorusPhase = chorusPhase;\n\t\t\t\tinstrumentState.chorusDelayPos = chorusDelayPos;\n\t\t\t\tinstrumentState.chorusVoiceMult = chorusVoiceMult;\n\t\t\t\tinstrumentState.chorusCombinedMult = chorusCombinedMult;`\n            }\n\n            if (usesEcho) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);\n\t\t\t\tinstrumentState.echoDelayPos = echoDelayPos;\n\t\t\t\tinstrumentState.echoMult = echoMult;\n\t\t\t\tinstrumentState.echoDelayOffsetRatio = echoDelayOffsetRatio;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;\n\t\t\t\tinstrumentState.echoShelfSampleL = echoShelfSampleL;\n\t\t\t\tinstrumentState.echoShelfSampleR = echoShelfSampleR;\n\t\t\t\tinstrumentState.echoShelfPrevInputL = echoShelfPrevInputL;\n\t\t\t\tinstrumentState.echoShelfPrevInputR = echoShelfPrevInputR;`\n            }\n\n            if (usesReverb) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);\n\t\t\t\tinstrumentState.reverbDelayPos = reverbDelayPos;\n\t\t\t\tinstrumentState.reverbMult = reverb;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;\n\t\t\t\tinstrumentState.reverbShelfSample0 = reverbShelfSample0;\n\t\t\t\tinstrumentState.reverbShelfSample1 = reverbShelfSample1;\n\t\t\t\tinstrumentState.reverbShelfSample2 = reverbShelfSample2;\n\t\t\t\tinstrumentState.reverbShelfSample3 = reverbShelfSample3;\n\t\t\t\tinstrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;\n\t\t\t\tinstrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;\n\t\t\t\tinstrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;\n\t\t\t\tinstrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;`\n            }\n\n            effectsSource += \"}\";\n\n            //console.log(effectsSource);\n            effectsFunction = new Function(\"Config\", \"Synth\", effectsSource)(Config, Synth);\n            Synth.effectsFunctionCache[signature] = effectsFunction;\n        }\n\n        effectsFunction(synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\n    }\n\n    private static pulseWidthSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrument: Instrument): void {\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n\n        let phaseDelta: number = tone.phaseDeltas[0];\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n        let phase: number = (tone.phases[0] % 1);\n\n        let pulseWidth: number = tone.pulseWidth;\n        const pulseWidthDelta: number = tone.pulseWidthDelta;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n        const applyFilters: Function = Synth.applyFilters;\n\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\n            const sawPhaseA: number = phase % 1;\n            const sawPhaseB: number = (phase + pulseWidth) % 1;\n\n            let pulseWave: number = sawPhaseB - sawPhaseA;\n\n            // This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \n            if (!instrument.aliases) {\n                if (sawPhaseA < phaseDelta) {\n                    var t = sawPhaseA / phaseDelta;\n                    pulseWave += (t + t - t * t - 1) * 0.5;\n                } else if (sawPhaseA > 1.0 - phaseDelta) {\n                    var t = (sawPhaseA - 1.0) / phaseDelta;\n                    pulseWave += (t + t + t * t + 1) * 0.5;\n                }\n                if (sawPhaseB < phaseDelta) {\n                    var t = sawPhaseB / phaseDelta;\n                    pulseWave -= (t + t - t * t - 1) * 0.5;\n                } else if (sawPhaseB > 1.0 - phaseDelta) {\n                    var t = (sawPhaseB - 1.0) / phaseDelta;\n                    pulseWave -= (t + t + t * t + 1) * 0.5;\n                }\n            }\n\n            const inputSample: number = pulseWave;\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phase += phaseDelta;\n            phaseDelta *= phaseDeltaScale;\n            pulseWidth += pulseWidthDelta;\n\n            const output: number = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phase;\n        tone.phaseDeltas[0] = phaseDelta;\n        tone.expression = expression;\n        tone.pulseWidth = pulseWidth;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n\n    private static supersawSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n\t\tconst data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n\t\tconst voiceCount: number = Config.supersawVoiceCount|0;\n\n\t\tlet phaseDelta: number = tone.phaseDeltas[0];\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n\t\tlet expression: number = +tone.expression;\n\t\tconst expressionDelta: number = +tone.expressionDelta;\n\t\tlet phases: number[] = tone.phases;\n\n\t\tlet dynamism: number = +tone.supersawDynamism;\n\t\tconst dynamismDelta: number = +tone.supersawDynamismDelta;\n\t\tconst unisonDetunes: number[] = tone.supersawUnisonDetunes;\n\t\tlet shape: number = +tone.supersawShape;\n\t\tconst shapeDelta: number = +tone.supersawShapeDelta;\n\t\tlet delayLength: number = +tone.supersawDelayLength;\n\t\tconst delayLengthDelta: number = +tone.supersawDelayLengthDelta;\n\t\tconst delayLine: Float32Array = tone.supersawDelayLine!;\n\t\tconst delayBufferMask: number = (delayLine.length - 1) >> 0;\n\t\tlet delayIndex: number = tone.supersawDelayIndex|0;\n\t\tdelayIndex = (delayIndex & delayBufferMask) + delayLine.length;\n\n\t\tconst filters: DynamicBiquadFilter[] = tone.noteFilters;\n\t\tconst filterCount: number = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1: number = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2: number = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters: Function = Synth.applyFilters;\n\n\t\tconst stopIndex: number = bufferIndex + runLength;\n\t\tfor (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t// The phase initially starts at a zero crossing so apply\n\t\t\t// the delta before first sample to get a nonzero value.\n\t\t\tlet phase: number = (phases[0] + phaseDelta) % 1.0;\n\t\t\tlet supersawSample: number = phase - 0.5 * (1.0 + (voiceCount - 1.0) * dynamism);\n\n\t\t\t// This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \n            if (!instrumentState.aliases) {\n                if (phase < phaseDelta) {\n                    var t: number = phase / phaseDelta;\n                    supersawSample -= (t + t - t * t - 1) * 0.5;\n                } else if (phase > 1.0 - phaseDelta) {\n                    var t: number = (phase - 1.0) / phaseDelta;\n                    supersawSample -= (t + t + t * t + 1) * 0.5;\n                }\n            }\n\n\t\t\tphases[0] = phase;\n\n\t\t\tfor (let i: number = 1; i < voiceCount; i++) {\n\t\t\t\tconst detunedPhaseDelta: number = phaseDelta * unisonDetunes[i];\n\t\t\t\t// The phase initially starts at a zero crossing so apply\n\t\t\t\t// the delta before first sample to get a nonzero value.\n\t\t\t\tlet phase: number = (phases[i] + detunedPhaseDelta) % 1.0;\n\t\t\t\tsupersawSample += phase * dynamism;\n\n\t\t\t\t// This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \n                if (!instrumentState.aliases) {\n                    if (phase < detunedPhaseDelta) {\n                        const t: number = phase / detunedPhaseDelta;\n                        supersawSample -= (t + t - t * t - 1) * 0.5 * dynamism;\n                    } else if (phase > 1.0 - detunedPhaseDelta) {\n                        const t: number = (phase - 1.0) / detunedPhaseDelta;\n                        supersawSample -= (t + t + t * t + 1) * 0.5 * dynamism;\n                    }\n                }\n\n\t\t\t\tphases[i] = phase;\n\t\t\t}\n\n\t\t\tdelayLine[delayIndex & delayBufferMask] = supersawSample;\n\t\t\tconst delaySampleTime: number = delayIndex - delayLength;\n\t\t\tconst lowerIndex: number = delaySampleTime | 0;\n\t\t\tconst upperIndex: number = lowerIndex + 1;\n\t\t\tconst delayRatio: number = delaySampleTime - lowerIndex;\n\t\t\tconst prevDelaySample: number = delayLine[lowerIndex & delayBufferMask];\n\t\t\tconst nextDelaySample: number = delayLine[upperIndex & delayBufferMask];\n\t\t\tconst delaySample: number = prevDelaySample + (nextDelaySample - prevDelaySample) * delayRatio;\n\t\t\tdelayIndex++;\n\n\t\t\tconst inputSample: number = supersawSample - delaySample * shape;\n\t\t\tconst sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\n\t\t\tphaseDelta *= phaseDeltaScale;\n\t\t\tdynamism += dynamismDelta;\n\t\t\tshape += shapeDelta;\n\t\t\tdelayLength += delayLengthDelta;\n\n\t\t\tconst output: number = sample * expression;\n\t\t\texpression += expressionDelta;\n\n\t\t\tdata[sampleIndex] += output;\n\t\t}\n\n\t\ttone.phaseDeltas[0] = phaseDelta;\n\t\ttone.expression = expression;\n\t\ttone.supersawDynamism = dynamism;\n\t\ttone.supersawShape = shape;\n\t\ttone.supersawDelayLength = delayLength;\n\t\ttone.supersawDelayIndex = delayIndex;\n\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t}\n\n    private static fmSourceTemplate: string[] = (`\n\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\tconst sineWave = Config.sineWave;\n\t\t\t\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * ` + Config.sineWaveLength + `;\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#] * ` + Config.sineWaveLength + `;\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\n\t\tlet operator#OutputMult  = +tone.operatorExpressions[#];\n\t\tconst operator#OutputDelta = +tone.operatorExpressionDeltas[#];\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\n        const operator#Wave      = tone.operatorWaves[#].samples;\n\t\tlet feedbackMult         = +tone.feedbackMult;\n\t\tconst feedbackDelta        = +tone.feedbackDelta;\n        let expression = +tone.expression;\n\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\n\t\tconst filters = tone.noteFilters;\n\t\tconst filterCount = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters = Synth.applyFilters;\n\t\t\n\t\tconst stopIndex = bufferIndex + roundedSamplesPerTick;\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\n\t\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\n\t\t\t\t\n\t\t\tconst inputSample = fmOutput;\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\n\t\t\t\tfeedbackMult += feedbackDelta;\n\t\t\t\toperator#OutputMult += operator#OutputDelta;\n\t\t\t\toperator#Phase += operator#PhaseDelta;\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\n\t\t\t\n\t\t\tconst output = sample * expression;\n\t\t\texpression += expressionDelta;\n\n\t\t\tdata[sampleIndex] += output;\n\t\t\t}\n\t\t\t\n\t\t\ttone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\n\t\t\ttone.phaseDeltas[#] = operator#PhaseDelta / ` + Config.sineWaveLength + `;\n\t\t\ttone.operatorExpressions[#] = operator#OutputMult;\n\t\t    tone.feedbackOutputs[#] = operator#Output;\n\t\t    tone.feedbackMult = feedbackMult;\n\t\t    tone.expression = expression;\n\t\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t\t`).split(\"\\n\");\n\n    private static operatorSourceTemplate: string[] = (`\n\t\t\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\n\t\t\t\tconst operator#PhaseInt = operator#PhaseMix|0;\n\t\t\t\tconst operator#Index    = operator#PhaseInt & ` + Config.sineWaveMask + `;\n                const operator#Sample   = operator#Wave[operator#Index];\n                operator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\n\t\t\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\n\t\t`).split(\"\\n\");\n\n    private static noiseSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n        const wave: Float32Array = instrumentState.wave!;\n        let phaseDelta: number = +tone.phaseDeltas[0];\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n        let phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\n        if (tone.phases[0] == 0.0) {\n            // Zero phase means the tone was reset, just give noise a random start phase instead.\n            phase = Math.random() * Config.chipNoiseLength;\n        }\n        const phaseMask: number = Config.chipNoiseLength - 1;\n        let noiseSample: number = +tone.noiseSample;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n        const applyFilters: Function = Synth.applyFilters;\n\n        // This is for a \"legacy\" style simplified 1st order lowpass filter with\n        // a cutoff frequency that is relative to the tone's fundamental frequency.\n        const pitchRelativefilter: number = Math.min(1.0, phaseDelta * instrumentState.noisePitchFilterMult);\n\n        const stopIndex: number = bufferIndex + runLength;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            const waveSample: number = wave[phase & phaseMask];\n\n            noiseSample += (waveSample - noiseSample) * pitchRelativefilter;\n\n            const inputSample: number = noiseSample;\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phase += phaseDelta;\n            phaseDelta *= phaseDeltaScale;\n\n            const output: number = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phase / Config.chipNoiseLength;\n        tone.phaseDeltas[0] = phaseDelta;\n        tone.expression = expression;\n        tone.noiseSample = noiseSample;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n\n    private static spectrumSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n        const wave: Float32Array = instrumentState.wave!;\n        const samplesInPeriod: number = (1 << 7);\n        let phaseDelta: number = tone.phaseDeltas[0] * samplesInPeriod;\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n        let noiseSample: number = +tone.noiseSample;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n        const applyFilters: Function = Synth.applyFilters;\n\n        let phase: number = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\n        // Zero phase means the tone was reset, just give noise a random start phase instead.\n        if (tone.phases[0] == 0.0) phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;\n        const phaseMask: number = Config.spectrumNoiseLength - 1;\n\n        // This is for a \"legacy\" style simplified 1st order lowpass filter with\n        // a cutoff frequency that is relative to the tone's fundamental frequency.\n        const pitchRelativefilter: number = Math.min(1.0, phaseDelta);\n\n        const stopIndex: number = bufferIndex + runLength;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            const phaseInt: number = phase | 0;\n            const index: number = phaseInt & phaseMask;\n            let waveSample: number = wave[index];\n            const phaseRatio: number = phase - phaseInt;\n            waveSample += (wave[index + 1] - waveSample) * phaseRatio;\n\n            noiseSample += (waveSample - noiseSample) * pitchRelativefilter;\n\n\n            const inputSample: number = noiseSample;\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phase += phaseDelta;\n            phaseDelta *= phaseDeltaScale;\n\n            const output: number = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phase / Config.spectrumNoiseLength;\n        tone.phaseDeltas[0] = phaseDelta / samplesInPeriod;\n        tone.expression = expression;\n        tone.noiseSample = noiseSample;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n\n    private static drumsetSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n        let wave: Float32Array = instrumentState.getDrumsetWave(tone.drumsetPitch!);\n        const referenceDelta: number = InstrumentState.drumsetIndexReferenceDelta(tone.drumsetPitch!);\n        let phaseDelta: number = tone.phaseDeltas[0] / referenceDelta;\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n        const applyFilters: Function = Synth.applyFilters;\n\n        let phase: number = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\n        // Zero phase means the tone was reset, just give noise a random start phase instead.\n        if (tone.phases[0] == 0.0) phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;\n        const phaseMask: number = Config.spectrumNoiseLength - 1;\n\n        const stopIndex: number = bufferIndex + runLength;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            const phaseInt: number = phase | 0;\n            const index: number = phaseInt & phaseMask;\n            let noiseSample: number = wave[index];\n            const phaseRatio: number = phase - phaseInt;\n            noiseSample += (wave[index + 1] - noiseSample) * phaseRatio;\n\n            const inputSample: number = noiseSample;\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phase += phaseDelta;\n            phaseDelta *= phaseDeltaScale;\n\n            const output: number = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phase / Config.spectrumNoiseLength;\n        tone.phaseDeltas[0] = phaseDelta * referenceDelta;\n        tone.expression = expression;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n\n    private static modSynth(synth: Synth, stereoBufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrument: Instrument): void {\n        // Note: present modulator value is tone.expressionStarts[0].\n\n        if (!synth.song) return;\n\n        let mod: number = Config.modCount - 1 - tone.pitches[0];\n\n        // Flagged as invalid because unused by current settings, skip\n        if (instrument.invalidModulators[mod]) return;\n\n        let setting: number = instrument.modulators[mod];\n\n        // Generate list of used instruments\n        let usedInstruments: number[] = [];\n        if (Config.modulators[instrument.modulators[mod]].forSong) {\n            // Instrument doesn't matter for song, just push a random index to run the modsynth once\n            usedInstruments.push(0);\n        } else {\n            // All\n            if (instrument.modInstruments[mod] == synth.song.channels[instrument.modChannels[mod]].instruments.length) {\n                for (let i: number = 0; i < synth.song.channels[instrument.modChannels[mod]].instruments.length; i++) {\n                    usedInstruments.push(i);\n                }\n            }\n            // Active\n            else if (instrument.modInstruments[mod] > synth.song.channels[instrument.modChannels[mod]].instruments.length) {\n                if (synth.song.getPattern(instrument.modChannels[mod], synth.bar) != null)\n                    usedInstruments = synth.song.getPattern(instrument.modChannels[mod], synth.bar)!.instruments;\n            } else {\n                usedInstruments.push(instrument.modInstruments[mod]);\n            }\n        }\n\n        for (let instrumentIndex: number = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\n\n            synth.setModValue(tone.expression, tone.expression + tone.expressionDelta, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\n\n            // If mods are being held (for smoother playback while recording mods), use those values instead.\n            for (let i: number = 0; i < synth.heldMods.length; i++) {\n                if (Config.modulators[instrument.modulators[mod]].forSong) {\n                    if (synth.heldMods[i].setting == setting)\n                        synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\n                }\n                else if (synth.heldMods[i].channelIndex == instrument.modChannels[mod] && synth.heldMods[i].instrumentIndex == usedInstruments[instrumentIndex] && synth.heldMods[i].setting == setting) {\n                    synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\n                }\n            }\n\n            // Reset arps, but only at the start of the note\n            if (setting == Config.modulators.dictionary[\"reset arp\"].index && synth.tick == 0 && tone.noteStartPart == synth.beat * Config.partsPerBeat + synth.part) {\n                synth.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]].arpTime = 0;\n            }\n            // Denote next bar skip\n            else if (setting == Config.modulators.dictionary[\"next bar\"].index) {\n                synth.wantToSkip = true;\n            }\n            // Extra info for eq filter target needs to be set as well\n            else if (setting == Config.modulators.dictionary[\"eq filter\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n\n                if (!tgtInstrument.eqFilterType) {\n\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\n\n                    if (dotTarget == 0) { // Morph. Figure out the target filter's X/Y coords for this point. If no point exists with this index, or point types don't match, do lerp-out for this point and lerp-in of a new point\n\n                        let pinIdx: number = 0;\n                        const currentPart: number = synth.getTicksIntoBar() / Config.ticksPerPart;\n                        while (tone.note!.start + tone.note!.pins[pinIdx].time <= currentPart) pinIdx++;\n                        // 0 to 1 based on distance to next morph\n                        //let lerpStartRatio: number = (currentPart - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n                        let lerpEndRatio: number = ((currentPart - tone.note!.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n\n                        // Compute the new settings to go to.\n                        if (tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx - 1].size] != null || tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx].size] != null) {\n                            tgtInstrument.tmpEqFilterEnd = FilterSettings.lerpFilters(tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx - 1].size]!, tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx].size]!, lerpEndRatio);\n                        } else {\n                            // No mutation will occur to the filter object so we can safely return it without copying\n                            tgtInstrument.tmpEqFilterEnd = tgtInstrument.eqFilter;\n                        }\n\n                    } // Target (1 is dot 1 X, 2 is dot 1 Y, etc.)\n                    else {\n                        // Since we are directly manipulating the filter, make sure it is a new one and not an actual one of the instrument's filters\n                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                            if (tgtInstrument.tmpEqFilterEnd == tgtInstrument.eqSubFilters[i] && tgtInstrument.tmpEqFilterEnd != null) {\n                                tgtInstrument.tmpEqFilterEnd = new FilterSettings();\n                                tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqSubFilters[i]!.toJsonObject());\n                            }\n                        }\n                        if (tgtInstrument.tmpEqFilterEnd == null) {\n                            tgtInstrument.tmpEqFilterEnd = new FilterSettings();\n                            tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqFilter.toJsonObject());\n                        }\n\n                        if (tgtInstrument.tmpEqFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                            if (dotTarget % 2) { // X\n                                tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                            } else { // Y\n                                tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                            }\n                        }\n                    }\n                }\n            }\n            // Extra info for note filter target needs to be set as well\n            else if (setting == Config.modulators.dictionary[\"note filter\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n\n                if (!tgtInstrument.noteFilterType) {\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\n\n                    if (dotTarget == 0) { // Morph. Figure out the target filter's X/Y coords for this point. If no point exists with this index, or point types don't match, do lerp-out for this point and lerp-in of a new point\n\n                        let pinIdx: number = 0;\n                        const currentPart: number = synth.getTicksIntoBar() / Config.ticksPerPart;\n                        while (tone.note!.start + tone.note!.pins[pinIdx].time <= currentPart) pinIdx++;\n                        // 0 to 1 based on distance to next morph\n                        //let lerpStartRatio: number = (currentPart - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n                        let lerpEndRatio: number = ((currentPart - tone.note!.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n\n                        // Compute the new settings to go to.\n                        if (tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx - 1].size] != null || tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx].size] != null) {\n                            tgtInstrument.tmpNoteFilterEnd = FilterSettings.lerpFilters(tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx - 1].size]!, tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx].size]!, lerpEndRatio);\n                        } else {\n                            // No mutation will occur to the filter object so we can safely return it without copying\n                            tgtInstrument.tmpNoteFilterEnd = tgtInstrument.noteFilter;\n                        }\n\n                    } // Target (1 is dot 1 X, 2 is dot 1 Y, etc.)\n                    else {\n                        // Since we are directly manipulating the filter, make sure it is a new one and not an actual one of the instrument's filters\n\n                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                            if (tgtInstrument.tmpNoteFilterEnd == tgtInstrument.noteSubFilters[i] && tgtInstrument.tmpNoteFilterEnd != null) {\n                                tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\n                                tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteSubFilters[i]!.toJsonObject());\n                            }\n                        }\n                        if (tgtInstrument.tmpNoteFilterEnd == null) {\n                            tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\n                            tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteFilter.toJsonObject());\n                        }\n\n                        if (tgtInstrument.tmpNoteFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                            if (dotTarget % 2) { // X\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                            } else { // Y\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private static findRandomZeroCrossing(wave: Float32Array, waveLength: number): number {\n        let phase: number = Math.random() * waveLength;\n        const phaseMask: number = waveLength - 1;\n\n        // Spectrum and drumset waves sounds best when they start at a zero crossing,\n        // otherwise they pop. Try to find a zero crossing.\n        let indexPrev: number = phase & phaseMask;\n        let wavePrev: number = wave[indexPrev];\n        const stride: number = 16;\n        for (let attemptsRemaining: number = 128; attemptsRemaining > 0; attemptsRemaining--) {\n            const indexNext: number = (indexPrev + stride) & phaseMask;\n            const waveNext: number = wave[indexNext];\n            if (wavePrev * waveNext <= 0.0) {\n                // Found a zero crossing! Now let's narrow it down to two adjacent sample indices.\n                for (let i: number = 0; i < stride; i++) {\n                    const innerIndexNext: number = (indexPrev + 1) & phaseMask;\n                    const innerWaveNext: number = wave[innerIndexNext];\n                    if (wavePrev * innerWaveNext <= 0.0) {\n                        // Found the zero crossing again! Now let's find the exact intersection.\n                        const slope: number = innerWaveNext - wavePrev;\n                        phase = indexPrev;\n                        if (Math.abs(slope) > 0.00000001) {\n                            phase += -wavePrev / slope;\n                        }\n                        phase = Math.max(0, phase) % waveLength;\n                        break;\n                    } else {\n                        indexPrev = innerIndexNext;\n                        wavePrev = innerWaveNext;\n                    }\n                }\n                break;\n            } else {\n                indexPrev = indexNext;\n                wavePrev = waveNext;\n            }\n        }\n\n        return phase;\n    }\n\n    public static instrumentVolumeToVolumeMult(instrumentVolume: number): number {\n        return (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\n    }\n    public static volumeMultToInstrumentVolume(volumeMult: number): number {\n        return (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);\n    }\n    public static noteSizeToVolumeMult(size: number): number {\n        return Math.pow(Math.max(0.0, size) / Config.noteSizeMax, 1.5);\n    }\n    public static volumeMultToNoteSize(volumeMult: number): number {\n        return Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * Config.noteSizeMax;\n    }\n\n    public static fadeInSettingToSeconds(setting: number): number {\n        return 0.0125 * (0.95 * setting + 0.05 * setting * setting);\n    }\n    public static secondsToFadeInSetting(seconds: number): number {\n        return clamp(0, Config.fadeInRange, Math.round((-0.95 + Math.sqrt(0.9025 + 0.2 * seconds / 0.0125)) / 0.1));\n    }\n    public static fadeOutSettingToTicks(setting: number): number {\n        return Config.fadeOutTicks[setting];\n    }\n    public static ticksToFadeOutSetting(ticks: number): number {\n        let lower: number = Config.fadeOutTicks[0];\n        if (ticks <= lower) return 0;\n        for (let i: number = 1; i < Config.fadeOutTicks.length; i++) {\n            let upper: number = Config.fadeOutTicks[i];\n            if (ticks <= upper) return (ticks < (lower + upper) / 2) ? i - 1 : i;\n            lower = upper;\n        }\n        return Config.fadeOutTicks.length - 1;\n    }\n\n    public static detuneToCents(detune: number): number {\n        // BeepBox formula, for reference:\n        // return detune * (Math.abs(detune) + 1) / 2;\n        return detune - Config.detuneCenter;\n    }\n    public static centsToDetune(cents: number): number {\n        // BeepBox formula, for reference:\n        // return Math.sign(cents) * (Math.sqrt(1 + 8 * Math.abs(cents)) - 1) / 2.0;\n        return cents + Config.detuneCenter;\n    }\n\n    public static getOperatorWave(waveform: number, pulseWidth: number) {\n        if (waveform != 2) {\n            return Config.operatorWaves[waveform];\n        }\n        else {\n            return Config.pwmOperatorWaves[pulseWidth];\n        }\n    }\n\n    private getSamplesPerTick(): number {\n        if (this.song == null) return 0;\n        let beatsPerMinute: number = this.song.getBeatsPerMinute();\n        if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\n            beatsPerMinute = this.getModValue(Config.modulators.dictionary[\"tempo\"].index);\n        }\n        return this.getSamplesPerTickSpecificBPM(beatsPerMinute);\n    }\n\n    private getSamplesPerTickSpecificBPM(beatsPerMinute: number): number {\n        const beatsPerSecond: number = beatsPerMinute / 60.0;\n        const partsPerSecond: number = Config.partsPerBeat * beatsPerSecond;\n        const tickPerSecond: number = Config.ticksPerPart * partsPerSecond;\n        return this.samplesPerSecond / tickPerSecond;\n    }\n\n    public static fittingPowerOfTwo(x: number): number {\n        return 1 << (32 - Math.clz32(Math.ceil(x) - 1));\n    }\n\n    private sanitizeFilters(filters: DynamicBiquadFilter[]): void {\n        let reset: boolean = false;\n        for (const filter of filters) {\n            const output1: number = Math.abs(filter.output1);\n            const output2: number = Math.abs(filter.output2);\n            // If either is a large value, Infinity, or NaN, then just reset all filter history.\n            if (!(output1 < 100) || !(output2 < 100)) {\n                reset = true;\n                break;\n            }\n            if (output1 < epsilon) filter.output1 = 0.0;\n            if (output2 < epsilon) filter.output2 = 0.0;\n        }\n        if (reset) {\n            for (const filter of filters) {\n                filter.output1 = 0.0;\n                filter.output2 = 0.0;\n            }\n        }\n    }\n\n    public static sanitizeDelayLine(delayLine: Float32Array, lastIndex: number, mask: number): void {\n        while (true) {\n            lastIndex--;\n            const index: number = lastIndex & mask;\n            const sample: number = Math.abs(delayLine[index]);\n            if (Number.isFinite(sample) && (sample == 0.0 || sample >= epsilon)) break;\n            delayLine[index] = 0.0;\n        }\n    }\n\n    public static applyFilters(sample: number, input1: number, input2: number, filterCount: number, filters: DynamicBiquadFilter[]): number {\n        for (let i: number = 0; i < filterCount; i++) {\n            const filter: DynamicBiquadFilter = filters[i];\n            const output1: number = filter.output1;\n            const output2: number = filter.output2;\n            const a1: number = filter.a1;\n            const a2: number = filter.a2;\n            const b0: number = filter.b0;\n            const b1: number = filter.b1;\n            const b2: number = filter.b2;\n            sample = b0 * sample + b1 * input1 + b2 * input2 - a1 * output1 - a2 * output2;\n            filter.a1 = a1 + filter.a1Delta;\n            filter.a2 = a2 + filter.a2Delta;\n            if (filter.useMultiplicativeInputCoefficients) {\n                filter.b0 = b0 * filter.b0Delta;\n                filter.b1 = b1 * filter.b1Delta;\n                filter.b2 = b2 * filter.b2Delta;\n            } else {\n                filter.b0 = b0 + filter.b0Delta;\n                filter.b1 = b1 + filter.b1Delta;\n                filter.b2 = b2 + filter.b2Delta;\n            }\n            filter.output2 = output1;\n            filter.output1 = sample;\n            // Updating the input values is waste if the next filter doesn't exist...\n            input2 = output2;\n            input1 = output1;\n        }\n        return sample;\n    }\n}\n\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\nexport { Dictionary, DictionaryArray, FilterType, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config };"],"names":[],"mappings":"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,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE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AAE,EAAE,EAAE,EAAE,CAAC,EAAE;QAElE,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE;QAClD,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE;QAClD,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE;QAClD,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE;QAClD,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;QAClD,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;QAClD,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE;QACtD,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE;QACtD,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE;QAC1D,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,C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O,EAAE,CAAC,EAAE,gBAAgB,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,gBAAgB,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,gBAAgB,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,gBAAgB,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,gBAAgB,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,gBAAgB,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,gBAAgB,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,gBAAgB,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,gBAAgB,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,gBAAgB,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,gBAAgB,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,E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E,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,wBAAwB,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,E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"}